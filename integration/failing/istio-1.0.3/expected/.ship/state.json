{
  "v1": {
    "config": {},
    "releaseName": "istio",
    "helmValuesDefaults": "# Common settings.\nglobal:\n  # Default hub for Istio images.\n  # Releases are published to docker hub under 'istio' project.\n  # Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly\n  hub: gcr.io/istio-release\n\n  # Default tag for Istio images.\n  tag: release-1.0-latest-daily\n\n  # Gateway used for legacy k8s Ingress resources. By default it is\n  # using 'istio:ingress', to match 0.8 config. It requires that\n  # ingress.enabled is set to true. You can also set it\n  # to ingressgateway, or any other gateway you define in the 'gateway'\n  # section.\n  k8sIngressSelector: ingress\n\n  # k8sIngressHttps will add port 443 on the ingress and ingressgateway.\n  # It REQUIRES that the certificates are installed  in the\n  # expected secrets - enabling this option without certificates\n  # will result in LDS rejection and the ingress will not work.\n  k8sIngressHttps: false\n\n  proxy:\n    image: proxyv2\n\n    # Resources for the sidecar.\n    resources:\n      requests:\n        cpu: 10m\n      #  memory: 128Mi\n      # limits:\n      #   cpu: 100m\n      #   memory: 128Mi\n\n    # Controls number of Proxy worker threads.\n    # If set to 0 (default), then start worker thread for each CPU thread/core.\n    concurrency: 0\n\n    # Configures the access log for each sidecar. Setting it to an empty string will\n    # disable access log for sidecar.\n    accessLogFile: \"/dev/stdout\"\n\n    #If set to true, istio-proxy container will have privileged securityContext\n    privileged: false\n\n    # If set, newly injected sidecars will have core dumps enabled. Core dumps will always be written to the same\n    # file to prevent storage filling up indefinitely. Add a timestamp option to core_pattern to keep all cores:\n    # e.g. sysctl -w kernel.core_pattern=/var/lib/istio/core.%e.%p.%t\n    enableCoreDump: false\n\n    # Default port for Pilot agent health checks. A value of 0 will disable health checking.\n    # statusPort: 15020\n    statusPort: 0\n\n    # The initial delay for readiness probes in seconds.\n    readinessInitialDelaySeconds: 1\n\n    # The period between readiness probes.\n    readinessPeriodSeconds: 2\n\n    # The number of successive failed probes before indicating readiness failure.\n    readinessFailureThreshold: 30\n\n    # istio egress capture whitelist\n    # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly\n    # example: includeIPRanges: \"172.30.0.0/16,172.20.0.0/16\"\n    # would only capture egress traffic on those two IP Ranges, all other outbound traffic would\n    # be allowed by the sidecar\n    includeIPRanges: \"*\"\n    excludeIPRanges: \"\"\n\n    # istio ingress capture whitelist\n    # examples:\n    #     Redirect no inbound traffic to Envoy:    --includeInboundPorts=\"\"\n    #     Redirect all inbound traffic to Envoy:   --includeInboundPorts=\"*\"\n    #     Redirect only selected ports:            --includeInboundPorts=\"80,8080\"\n    includeInboundPorts: \"*\"\n    excludeInboundPorts: \"\"\n\n    # This controls the 'policy' in the sidecar injector.\n    autoInject: enabled\n\n    # Sets the destination Statsd in envoy (the value of the \"--statsdUdpAddress\" proxy argument\n    # would be \u003chost\u003e:\u003cport\u003e).\n    # Disabled by default.\n    # The istio-statsd-prom-bridge is deprecated and should not be used moving forward.\n    envoyStatsd:\n      # If enabled is set to true, host and port must also be provided. Istio no longer provides a statsd collector.\n      enabled: false\n      host: # example: statsd-svc\n      port: # example: 9125\n\n    # This controls the stats collection for proxies. To disable stats\n    # collection, set the prometheusPort to 0.\n    stats:\n      prometheusPort: 15090\n\n  proxy_init:\n    # Base name for the proxy_init container, used to configure iptables.\n    image: proxy_init\n\n  # imagePullPolicy is applied to istio control plane components.\n  # local tests require IfNotPresent, to avoid uploading to dockerhub.\n  # TODO: Switch to Always as default, and override in the local tests.\n  imagePullPolicy: IfNotPresent\n\n  # controlPlaneMtls enabled. Will result in delays starting the pods while secrets are\n  # propagated, not recommended for tests.\n  controlPlaneSecurityEnabled: false\n\n  # disablePolicyChecks disables mixer policy checks.\n  # Will set the value with same name in istio config map - pilot needs to be restarted to take effect.\n  disablePolicyChecks: false\n\n  # policyCheckFailOpen allows traffic in cases when the mixer policy service cannot be reached.\n  # Default is false which means the traffic is denied when the client is unable to connect to Mixer.\n  policyCheckFailOpen: false\n\n  # EnableTracing sets the value with same name in istio config map, requires pilot restart to take effect.\n  enableTracing: true\n\n  # Default mtls policy. If true, mtls between services will be enabled by default.\n  mtls:\n    # Default setting for service-to-service mtls. Can be set explicitly using\n    # destination rules or service annotations.\n    enabled: false\n\n  # ImagePullSecrets for all ServiceAccount, list of secrets in the same namespace\n  # to use for pulling any images in pods that reference this ServiceAccount.\n  # Must be set for any clustser configured with privte docker registry.\n  imagePullSecrets:\n    # - private-registry-key\n\n  # Specify pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:\n  #   0 - Never scheduled\n  #   1 - Least preferred\n  #   2 - No preference\n  #   3 - Most preferred\n  arch:\n    amd64: 2\n    s390x: 2\n    ppc64le: 2\n\n  # Whether to restrict the applications namespace the controller manages;\n  # If not set, controller watches all namespaces\n  oneNamespace: false\n\n  # Whether to perform server-side validation of configuration.\n  configValidation: true\n\n  # If set to true, the pilot and citadel mtls will be exposed on the\n  # ingress gateway\n  meshExpansion: false\n\n  # If set to true, the pilot and citadel mtls and the plain text pilot ports\n  # will be exposed on an internal gateway\n  meshExpansionILB: false\n\n  # A minimal set of requested resources to applied to all deployments so that\n  # Horizontal Pod Autoscaler will be able to function (if set).\n  # Each component can overwrite these default values by adding its own resources\n  # block in the relevant section below and setting the desired resources values.\n  defaultResources:\n    requests:\n      cpu: 10m\n    #   memory: 128Mi\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # Not recommended for user to configure this. Hyperkube image to use when creating custom resources\n  hyperkube:\n    hub: quay.io/coreos\n    tag: v1.7.6_coreos.0\n\n  # Kubernetes \u003e=v1.11.0 will create two PriorityClass, including system-cluster-critical and\n  # system-node-critical, it is better to configure this in order to make sure your Istio pods\n  # will not be killed because of low prioroty class.\n  # Refer to https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n  # for more detail.\n  priorityClassName: \"\"\n\n  # Include the crd definition when generating the template.\n  # For 'helm template' and helm install \u003e 2.10 it should be true.\n  # For helm \u003c 2.9, crds must be installed ahead of time with\n  # 'kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml\n  # and this options must be set off.\n  crds: true\n\n#\n# ingress configuration\n#\ningress:\n  enabled: false\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  service:\n    annotations: {}\n    loadBalancerIP: \"\"\n    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be\n    # Uncomment the following line to preserve client source ip.\n    # externalTrafficPolicy: Local\n    ports:\n    - port: 80\n      name: http\n      nodePort: 32000\n    - port: 443\n      name: https\n    selector:\n      istio: ingress\n\n#\n# Gateways Configuration\n# By default (if enabled) a pair of Ingress and Egress Gateways will be created for the mesh.\n# You can add more gateways in addition to the defaults but make sure those are uniquely named\n# and that NodePorts are not conflicting.\n# Disable specifc gateway by setting the `enabled` to false.\n#\ngateways:\n  enabled: true\n\n  istio-ingressgateway:\n    enabled: true\n    labels:\n      app: istio-ingressgateway\n      istio: ingressgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    resources: {}\n      # limits:\n      #  cpu: 100m\n      #  memory: 128Mi\n      #requests:\n      #  cpu: 1800m\n      #  memory: 256Mi\n    cpu:\n      targetAverageUtilization: 80\n    loadBalancerIP: \"\"\n    serviceAnnotations: {}\n    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be\n    # Uncomment the following line to preserve client source ip.\n    # externalTrafficPolicy: Local\n\n    ports:\n      ## You can add custom gateway ports\n    - port: 80\n      targetPort: 80\n      name: http2\n      nodePort: 31380\n    - port: 443\n      name: https\n      nodePort: 31390\n    - port: 31400\n      name: tcp\n      nodePort: 31400\n    # Pilot and Citadel MTLS ports are enabled in gateway - but will only redirect\n    # to pilot/citadel if global.meshExpansion settings are enabled.\n    - port: 15011\n      targetPort: 15011\n      name: tcp-pilot-grpc-tls\n    - port: 8060\n      targetPort: 8060\n      name: tcp-citadel-grpc-tls\n    - port: 853\n      targetPort: 853\n      name: tcp-dns-tls\n    - port: 15030\n      targetPort: 15030\n      name: http2-prometheus\n    - port: 15031\n      targetPort: 15031\n      name: http2-grafana\n    secretVolumes:\n    - name: ingressgateway-certs\n      secretName: istio-ingressgateway-certs\n      mountPath: /etc/istio/ingressgateway-certs\n    - name: ingressgateway-ca-certs\n      secretName: istio-ingressgateway-ca-certs\n      mountPath: /etc/istio/ingressgateway-ca-certs\n\n  istio-egressgateway:\n    enabled: true\n    labels:\n      app: istio-egressgateway\n      istio: egressgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n    serviceAnnotations: {}\n    type: ClusterIP #change to NodePort or LoadBalancer if need be\n    ports:\n      - port: 80\n        name: http2\n      - port: 443\n        name: https\n    secretVolumes:\n      - name: egressgateway-certs\n        secretName: istio-egressgateway-certs\n        mountPath: /etc/istio/egressgateway-certs\n      - name: egressgateway-ca-certs\n        secretName: istio-egressgateway-ca-certs\n        mountPath: /etc/istio/egressgateway-ca-certs\n\n  # Mesh ILB gateway creates a gateway of type InternalLoadBalancer,\n  # for mesh expansion. It exposes the mtls ports for Pilot,CA as well\n  # as non-mtls ports to support upgrades and gradual transition.\n  istio-ilbgateway:\n    enabled: false\n    labels:\n      app: istio-ilbgateway\n      istio: ilbgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    resources:\n      requests:\n        cpu: 800m\n        memory: 512Mi\n      #limits:\n      #  cpu: 1800m\n      #  memory: 256Mi\n    cpu:\n      targetAverageUtilization: 80      \n    loadBalancerIP: \"\"\n    serviceAnnotations:\n      cloud.google.com/load-balancer-type: \"internal\"\n    type: LoadBalancer\n    ports:\n    ## You can add custom gateway ports - google ILB default quota is 5 ports,\n    - port: 15011\n      name: grpc-pilot-mtls\n    # Insecure port - only for migration from 0.8. Will be removed in 1.1\n    - port: 15010\n      name: grpc-pilot\n    - port: 8060\n      targetPort: 8060\n      name: tcp-citadel-grpc-tls\n    # Port 853 is reserved for the kube-dns gateway\n    - port: 853\n      name: tcp-dns\n    secretVolumes:\n    - name: ilbgateway-certs\n      secretName: istio-ilbgateway-certs\n      mountPath: /etc/istio/ilbgateway-certs\n    - name: ilbgateway-ca-certs\n      secretName: istio-ilbgateway-ca-certs\n      mountPath: /etc/istio/ilbgateway-ca-certs\n\n#\n# sidecar-injector webhook configuration\n#\nsidecarInjectorWebhook:\n  enabled: true\n  replicaCount: 1\n  image: sidecar_injector\n  enableNamespacesByDefault: false\n\n#\n# galley configuration\n#\ngalley:\n  enabled: true\n  replicaCount: 1\n  image: galley\n\n#\n# mixer configuration\n#\nmixer:\n  enabled: true\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  image: mixer\n\n  env:\n    GODEBUG: gctrace=2\n\n  istio-policy:\n    autoscaleEnabled: true\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n\n  istio-telemetry:\n    autoscaleEnabled: true\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n\n  prometheusStatsdExporter:\n    hub: docker.io/prom\n    tag: v0.6.0\n\n#\n# pilot configuration\n#\npilot:\n  enabled: true\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  image: pilot\n  sidecar: true\n  traceSampling: 1.0\n  # Resources for a small pilot install\n  resources:\n    requests:\n      cpu: 500m\n      memory: 2048Mi\n  env:\n    PILOT_PUSH_THROTTLE_COUNT: 100\n    GODEBUG: gctrace=2\n  cpu:\n    targetAverageUtilization: 80\n\n#\n# security configuration\n#\nsecurity:\n  replicaCount: 1\n  image: citadel\n  selfSigned: true # indicate if self-signed CA is used.\n\n#\n# addons configuration\n#\ntelemetry-gateway:\n  gatewayName: ingressgateway\n  grafanaEnabled: false\n  prometheusEnabled: false\n\ngrafana:\n  enabled: false\n  replicaCount: 1\n  image:\n    repository: grafana/grafana\n    tag: 5.2.3\n  persist: false\n  storageClassName: \"\"\n  security:\n    enabled: false\n    adminUser: admin\n    adminPassword: admin\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 3000\n    internalPort: 3000\n\nprometheus:\n  enabled: true\n  replicaCount: 1\n  hub: docker.io/prom\n  tag: v2.3.1\n\n  service:\n    annotations: {}\n    nodePort:\n      enabled: false\n      port: 32090\n\nservicegraph:\n  enabled: false\n  replicaCount: 1\n  image: servicegraph\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 8088\n    internalPort: 8088\n  ingress:\n    enabled: false\n    # Used to create an Ingress record.\n    hosts:\n      - servicegraph.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: servicegraph-tls\n      #   hosts:\n      #     - servicegraph.local\n  # prometheus addres\n  prometheusAddr: http://prometheus:9090\n\ntracing:\n  enabled: false\n  provider: jaeger\n  jaeger:\n    hub: docker.io/jaegertracing\n    tag: 1.5\n    memory:\n      max_traces: 50000\n    ui:\n      port: 16686\n    ingress:\n      enabled: false\n      # Used to create an Ingress record.\n      hosts:\n        - jaeger.local\n      annotations:\n        # kubernetes.io/ingress.class: nginx\n        # kubernetes.io/tls-acme: \"true\"\n      tls:\n        # Secrets must be manually created in the namespace.\n        # - secretName: jaeger-tls\n        #   hosts:\n        #     - jaeger.local\n  replicaCount: 1\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 9411\n    internalPort: 9411\n  ingress:\n    enabled: false\n    # Used to create an Ingress record.\n    hosts:\n      - tracing.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: tracing-tls\n      #   hosts:\n      #     - tracing.local\n\nkiali:\n  enabled: false\n  replicaCount: 1\n  hub: docker.io/kiali\n  tag: v0.9\n  ingress:\n    enabled: false\n    ## Used to create an Ingress record.\n    # hosts:\n    #  - kiali.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: kiali-tls\n      #   hosts:\n      #     - kiali.local\n  dashboard:\n    username: admin\n    # Default admin passphrase for kiali. Must be set during setup, and\n    # changed by overriding the secret\n    passphrase: admin\n\n    # Override the automatically detected Grafana URL, usefull when Grafana service has no ExternalIPs\n    # grafanaURL:\n\n    # Override the automatically detected Jaeger URL, usefull when Jaeger service has no ExternalIPs\n    # jaegerURL:\n\n# Certmanager uses ACME to sign certificates. Since Istio gateways are\n# mounting the TLS secrets the Certificate CRDs must be created in the\n# istio-system namespace. Once the certificate has been created, the\n# gateway must be updated by adding 'secretVolumes'. After the gateway\n# restart, DestinationRules can be created using the ACME-signed certificates.\ncertmanager:\n  enabled: false\n  hub: quay.io/jetstack\n  tag: v0.3.1\n  resources: {}\n",
    "upstream": "https://github.com/istio/istio/tree/_latest_/install/kubernetes/helm/istio",
    "metadata": {
      "applicationType": "helm",
      "sequence": 0,
      "icon": "https://istio.io/favicons/android-192x192.png",
      "name": "istio",
      "releaseNotes": "Support setting FAIL_OPEN for istio-policy service (#9493)",
      "version": "1.0.3",
      "license": {
        "id": "",
        "assignee": "",
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "0001-01-01T00:00:00Z",
        "type": ""
      }
    },
    "upstreamContents": {
      "upstreamFiles": [
        {
          "filePath": ".helmignore",
          "fileContents": "Tk9URVMudHh0Cg=="
        },
        {
          "filePath": "Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogaXN0aW8KdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjItMCIKZGVzY3JpcHRpb246IEhlbG0gY2hhcnQgZm9yIGFsbCBpc3RpbyBjb21wb25lbnRzCmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHNlY3VyaXR5CiAgLSBzaWRlY2FySW5qZWN0b3JXZWJob29rCiAgLSBtaXhlcgogIC0gcGlsb3QKICAtIGdhbGxleQpzb3VyY2VzOgogIC0gaHR0cDovL2dpdGh1Yi5jb20vaXN0aW8vaXN0aW8KZW5naW5lOiBnb3RwbAppY29uOiBodHRwczovL2lzdGlvLmlvL2Zhdmljb25zL2FuZHJvaWQtMTkyeDE5Mi5wbmcK"
        },
        {
          "filePath": "LICENSE",
          "fileContents": ""
        },
        {
          "filePath": "README.md",
          "fileContents": ""
        },
        {
          "filePath": "charts/certmanager/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBjZXJ0bWFuYWdlcgp2ZXJzaW9uOiAxLjAuMwphcHBWZXJzaW9uOiAwLjMuMQp0aWxsZXJWZXJzaW9uOiAiPj0yLjcuMiIK"
        },
        {
          "filePath": "charts/certmanager/templates/NOTES.txt",
          "fileContents": "Y2VydG1hbmFnZXIgaGFzIGJlZW4gZGVwbG95ZWQgc3VjY2Vzc2Z1bGx5IQoKTW9yZSBpbmZvcm1hdGlvbiBvbiB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGlzc3VlcnMgYW5kIGhvdyB0byBjb25maWd1cmUgdGhlbQpjYW4gYmUgZm91bmQgaW4gb3VyIGRvY3VtZW50YXRpb246CgpodHRwczovL2NlcnQtbWFuYWdlci5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvcmVmZXJlbmNlL2lzc3VlcnMuaHRtbA=="
        },
        {
          "filePath": "charts/certmanager/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiY2VydG1hbmFnZXIubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgoqL319Cnt7LSBkZWZpbmUgImNlcnRtYW5hZ2VyLmZ1bGxuYW1lIiAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSAkZnVsbG5hbWUgOj0gcHJpbnRmICIlcy0lcyIgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIGRlZmF1bHQgJGZ1bGxuYW1lIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBjaGFydCBuYW1lIGFuZCB2ZXJzaW9uIGFzIHVzZWQgYnkgdGhlIGNoYXJ0IGxhYmVsLgoqL319Cnt7LSBkZWZpbmUgImNlcnRtYW5hZ2VyLmNoYXJ0IiAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5DaGFydC5OYW1lIC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/certmanager/templates/crds.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogY2x1c3Rlcmlzc3VlcnMuY2VydG1hbmFnZXIuazhzLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCnNwZWM6CiAgZ3JvdXA6IGNlcnRtYW5hZ2VyLms4cy5pbwogIHZlcnNpb246IHYxYWxwaGExCiAgbmFtZXM6CiAgICBraW5kOiBDbHVzdGVySXNzdWVyCiAgICBwbHVyYWw6IGNsdXN0ZXJpc3N1ZXJzCiAgc2NvcGU6IENsdXN0ZXIKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGlzc3VlcnMuY2VydG1hbmFnZXIuazhzLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCnNwZWM6CiAgZ3JvdXA6IGNlcnRtYW5hZ2VyLms4cy5pbwogIHZlcnNpb246IHYxYWxwaGExCiAgbmFtZXM6CiAgICBraW5kOiBJc3N1ZXIKICAgIHBsdXJhbDogaXNzdWVycwogIHNjb3BlOiBOYW1lc3BhY2VkCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBjZXJ0aWZpY2F0ZXMuY2VydG1hbmFnZXIuazhzLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCnNwZWM6CiAgZ3JvdXA6IGNlcnRtYW5hZ2VyLms4cy5pbwogIHZlcnNpb246IHYxYWxwaGExCiAgc2NvcGU6IE5hbWVzcGFjZWQKICBuYW1lczoKICAgIGtpbmQ6IENlcnRpZmljYXRlCiAgICBwbHVyYWw6IGNlcnRpZmljYXRlcwogICAgc2hvcnROYW1lczoKICAgICAgLSBjZXJ0CiAgICAgIC0gY2VydHMK"
        },
        {
          "filePath": "charts/certmanager/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY2VydG1hbmFnZXIKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNlcnRtYW5hZ2VyLm5hbWUiIC4gfX0Kc3BlYzoKICByZXBsaWNhczogMQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogY2VydG1hbmFnZXIKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBjZXJ0bWFuYWdlcgp7ey0gaWYgLlZhbHVlcy5wb2RMYWJlbHMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMucG9kTGFiZWxzIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgICAge3stIGlmIC5WYWx1ZXMucG9kQW5ub3RhdGlvbnMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMucG9kQW5ub3RhdGlvbnMgfCBpbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGNlcnRtYW5hZ2VyCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBjZXJ0bWFuYWdlcgogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmh1YiB9fS9jZXJ0LW1hbmFnZXItY29udHJvbGxlcjp7eyAuVmFsdWVzLnRhZyB9fSIKICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19CiAgICAgICAgICBhcmdzOgogICAgICAgICAgLSAtLWNsdXN0ZXItcmVzb3VyY2UtbmFtZXNwYWNlPSQoUE9EX05BTUVTUEFDRSkKICAgICAgICAgIC0gLS1sZWFkZXItZWxlY3Rpb24tbmFtZXNwYWNlPSQoUE9EX05BTUVTUEFDRSkKICAgICAgICB7ey0gaWYgLlZhbHVlcy5leHRyYUFyZ3MgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZXh0cmFBcmdzIHwgaW5kZW50IDEwIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgZW52OgogICAgICAgICAgLSBuYW1lOiBQT0RfTkFNRVNQQUNFCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgICByZXNvdXJjZXM6Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQogICAge3stIHdpdGggLlZhbHVlcy5ub2RlU2VsZWN0b3IgfX0KICAgICAgbm9kZVNlbGVjdG9yOgp7eyB0b1lhbWwgLiB8IGluZGVudCA4IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gd2l0aCAuVmFsdWVzLmFmZmluaXR5IH19CiAgICAgIGFmZmluaXR5Ogp7eyB0b1lhbWwgLiB8IGluZGVudCA4IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gd2l0aCAuVmFsdWVzLnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOgp7eyB0b1lhbWwgLiB8IGluZGVudCA4IH19CiAgICB7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLnBvZERuc1BvbGljeSB9fQogICAgICBkbnNQb2xpY3k6IHt7IC5WYWx1ZXMucG9kRG5zUG9saWN5IH19Cnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMucG9kRG5zQ29uZmlnIH19CiAgICAgIGRuc0NvbmZpZzoKe3sgdG9ZYW1sIC5WYWx1ZXMucG9kRG5zQ29uZmlnIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/certmanager/templates/issuer.yaml",
          "fileContents": "LS0tCmFwaVZlcnNpb246IGNlcnRtYW5hZ2VyLms4cy5pby92MWFscGhhMQpraW5kOiBDbHVzdGVySXNzdWVyCm1ldGFkYXRhOgogIG5hbWU6IGxldHNlbmNyeXB0LXN0YWdpbmcKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogIGFjbWU6CiAgICBzZXJ2ZXI6IGh0dHBzOi8vYWNtZS1zdGFnaW5nLXYwMi5hcGkubGV0c2VuY3J5cHQub3JnL2RpcmVjdG9yeQogICAgZW1haWw6IHt7IC5WYWx1ZXMuZW1haWwgfX0KICAgICMgTmFtZSBvZiBhIHNlY3JldCB1c2VkIHRvIHN0b3JlIHRoZSBBQ01FIGFjY291bnQgcHJpdmF0ZSBrZXkKICAgIHByaXZhdGVLZXlTZWNyZXRSZWY6CiAgICAgIG5hbWU6IGxldHNlbmNyeXB0LXN0YWdpbmcKICAgIGh0dHAwMToge30KLS0tCmFwaVZlcnNpb246IGNlcnRtYW5hZ2VyLms4cy5pby92MWFscGhhMQpraW5kOiBDbHVzdGVySXNzdWVyCm1ldGFkYXRhOgogIG5hbWU6IGxldHNlbmNyeXB0CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3BlYzoKICBhY21lOgogICAgc2VydmVyOiBodHRwczovL2FjbWUtdjAyLmFwaS5sZXRzZW5jcnlwdC5vcmcvZGlyZWN0b3J5CiAgICBlbWFpbDoge3sgLlZhbHVlcy5lbWFpbCB9fQogICAgcHJpdmF0ZUtleVNlY3JldFJlZjoKICAgICAgbmFtZTogbGV0c2VuY3J5cHQKICAgIGh0dHAwMToge30K"
        },
        {
          "filePath": "charts/certmanager/templates/rbac.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGNlcnRtYW5hZ2VyCiAgbGFiZWxzOgogICAgYXBwOiBjZXJ0bWFuYWdlcgpydWxlczoKICAtIGFwaUdyb3VwczogWyJjZXJ0bWFuYWdlci5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImNlcnRpZmljYXRlcyIsICJpc3N1ZXJzIiwgImNsdXN0ZXJpc3N1ZXJzIl0KICAgIHZlcmJzOiBbIioiXQogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICAjIFRPRE86IHJlbW92ZSBlbmRwb2ludHMgb25jZSAwLjQgaXMgcmVsZWFzZWQuIFdlIGluY2x1ZGUgaXQgaGVyZSBpbiBjYXNlCiAgICAjIHVzZXJzIHVzZSB0aGUgJ21hc3RlcicgdmVyc2lvbiBvZiB0aGUgSGVsbSBjaGFydCB3aXRoIGEgMC4yLnggcmVsZWFzZSBvZgogICAgIyBjZXJ0TWFuYWdlciB0aGF0IHN0aWxsIHBlcmZvcm1zIGxlYWRlciBlbGVjdGlvbiB3aXRoIEVuZHBvaW50IHJlc291cmNlcy4KICAgICMgV2UgYWR2aXNlIHVzZXJzIGRvbid0IGRvIHRoaXMsIGJ1dCBzb21lIHdpbGwgYW55d2F5IGFuZCB0aGlzIHdpbGwgcmVkdWNlCiAgICAjIGZyaWN0aW9uLgogICAgcmVzb3VyY2VzOiBbImVuZHBvaW50cyIsICJjb25maWdtYXBzIiwgInNlY3JldHMiLCAiZXZlbnRzIiwgInNlcnZpY2VzIiwgInBvZHMiXQogICAgdmVyYnM6IFsiKiJdCiAgLSBhcGlHcm91cHM6IFsiZXh0ZW5zaW9ucyJdCiAgICByZXNvdXJjZXM6IFsiaW5ncmVzc2VzIl0KICAgIHZlcmJzOiBbIioiXQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjZXJ0bWFuYWdlcgogIGxhYmVsczoKICAgIGFwcDogY2VydG1hbmFnZXIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2VydG1hbmFnZXIKc3ViamVjdHM6CiAgLSBuYW1lOiBjZXJ0bWFuYWdlcgogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgIGtpbmQ6IFNlcnZpY2VBY2NvdW50Cg=="
        },
        {
          "filePath": "charts/certmanager/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGNlcnRtYW5hZ2VyCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCg=="
        },
        {
          "filePath": "charts/galley/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogZ2FsbGV5CnZlcnNpb246IDEuMC4zCmFwcFZlcnNpb246IDEuMC4zCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgpkZXNjcmlwdGlvbjogSGVsbSBjaGFydCBmb3IgZ2FsbGV5IGRlcGxveW1lbnQKa2V5d29yZHM6CiAgLSBpc3RpbwogIC0gZ2FsbGV5CnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/galley/OWNERS",
          "fileContents": "YXBwcm92ZXJzOgogIC0gY21sdWNpYW5vCiAgLSBnZWVrbm9pZAogIC0gb3pldnJlbgogIC0gYXlqCg=="
        },
        {
          "filePath": "charts/galley/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZ2FsbGV5Lm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJnYWxsZXkuZnVsbG5hbWUiIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/galley/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdhbGxleS17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLWdhbGxleQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pbyJdCiAgcmVzb3VyY2VzOiBbInZhbGlkYXRpbmd3ZWJob29rY29uZmlndXJhdGlvbnMiXQogIHZlcmJzOiBbIioiXQotIGFwaUdyb3VwczogWyJjb25maWcuaXN0aW8uaW8iXSAjIGlzdGlvIG1peGVyIENSRCB3YXRjaGVyCiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiKiJdCiAgcmVzb3VyY2VzOiBbImRlcGxveW1lbnRzIl0KICByZXNvdXJjZU5hbWVzOiBbImlzdGlvLWdhbGxleSJdCiAgdmVyYnM6IFsiZ2V0Il0KLSBhcGlHcm91cHM6IFsiKiJdCiAgcmVzb3VyY2VzOiBbImVuZHBvaW50cyJdCiAgcmVzb3VyY2VOYW1lczogWyJpc3Rpby1nYWxsZXkiXQogIHZlcmJzOiBbImdldCJdCg=="
        },
        {
          "filePath": "charts/galley/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1nYWxsZXktYWRtaW4tcm9sZS1iaW5kaW5nLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tZ2FsbGV5CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGlzdGlvLWdhbGxleS17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tZ2FsbGV5LXNlcnZpY2UtYWNjb3VudAogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/galley/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdhbGxleS1jb25maWd1cmF0aW9uCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLWdhbGxleQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IG1peGVyCmRhdGE6CiAgdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uLnlhbWw6IHwtCiAgICB7ey0gaW5jbHVkZSAidmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uLnlhbWwudHBsIiAuIHwgaW5kZW50IDR9fQoK"
        },
        {
          "filePath": "charts/galley/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ2FsbGV5CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJnYWxsZXkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IGdhbGxleQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDEKICAgICAgbWF4VW5hdmFpbGFibGU6IDAKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgaXN0aW86IGdhbGxleQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tZ2FsbGV5LXNlcnZpY2UtYWNjb3VudAp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICAgICAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogdmFsaWRhdG9yCiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuZ2xvYmFsLmh1YiB9fS97eyAuVmFsdWVzLmltYWdlIH19Ont7IC5WYWx1ZXMuZ2xvYmFsLnRhZyB9fSIKICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19CiAgICAgICAgICBwb3J0czoKICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogNDQzCiAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkwOTMKICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAtIC91c3IvbG9jYWwvYmluL2dhbGxleQogICAgICAgICAgLSB2YWxpZGF0b3IKICAgICAgICAgIC0gLS1kZXBsb3ltZW50LW5hbWVzcGFjZT17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgICAgICAgIC0gLS1jYUNlcnRGaWxlPS9ldGMvaXN0aW8vY2VydHMvcm9vdC1jZXJ0LnBlbQogICAgICAgICAgLSAtLXRsc0NlcnRGaWxlPS9ldGMvaXN0aW8vY2VydHMvY2VydC1jaGFpbi5wZW0KICAgICAgICAgIC0gLS10bHNLZXlGaWxlPS9ldGMvaXN0aW8vY2VydHMva2V5LnBlbQogICAgICAgICAgLSAtLWhlYWx0aENoZWNrSW50ZXJ2YWw9MXMKICAgICAgICAgIC0gLS1oZWFsdGhDaGVja0ZpbGU9L2hlYWx0aAogICAgICAgICAgLSAtLXdlYmhvb2stY29uZmlnLWZpbGUKICAgICAgICAgIC0gL2V0Yy9pc3Rpby9jb25maWcvdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uLnlhbWwKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgIC0gbmFtZTogY2VydHMKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL2lzdGlvL2NlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAtIG5hbWU6IGNvbmZpZwogICAgICAgICAgICBtb3VudFBhdGg6IC9ldGMvaXN0aW8vY29uZmlnCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgICAtIC91c3IvbG9jYWwvYmluL2dhbGxleQogICAgICAgICAgICAgICAgLSBwcm9iZQogICAgICAgICAgICAgICAgLSAtLXByb2JlLXBhdGg9L2hlYWx0aAogICAgICAgICAgICAgICAgLSAtLWludGVydmFsPTEwcwogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA1CiAgICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDUKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgICAtIC91c3IvbG9jYWwvYmluL2dhbGxleQogICAgICAgICAgICAgICAgLSBwcm9iZQogICAgICAgICAgICAgICAgLSAtLXByb2JlLXBhdGg9L2hlYWx0aAogICAgICAgICAgICAgICAgLSAtLWludGVydmFsPTEwcwogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA1CiAgICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDUKICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY2VydHMKICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiBpc3Rpby5pc3Rpby1nYWxsZXktc2VydmljZS1hY2NvdW50CiAgICAgIC0gbmFtZTogY29uZmlnCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogaXN0aW8tZ2FsbGV5LWNvbmZpZ3VyYXRpb24KICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQo="
        },
        {
          "filePath": "charts/galley/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1nYWxsZXkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGlzdGlvOiBnYWxsZXkKc3BlYzoKICBwb3J0czoKICAtIHBvcnQ6IDQ0MwogICAgbmFtZTogaHR0cHMtdmFsaWRhdGlvbgogIC0gcG9ydDogOTA5MwogICAgbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgc2VsZWN0b3I6CiAgICBpc3RpbzogZ2FsbGV5Cg=="
        },
        {
          "filePath": "charts/galley/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdhbGxleS1zZXJ2aWNlLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tZ2FsbGV5CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cg=="
        },
        {
          "filePath": "charts/galley/templates/validatingwehookconfiguration.yaml.tpl",
          "fileContents": "e3sgZGVmaW5lICJ2YWxpZGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb24ueWFtbC50cGwiIH19CmFwaVZlcnNpb246IGFkbWlzc2lvbnJlZ2lzdHJhdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBWYWxpZGF0aW5nV2ViaG9va0NvbmZpZ3VyYXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ2FsbGV5CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLWdhbGxleQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQp3ZWJob29rczoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmNvbmZpZ1ZhbGlkYXRpb24gfX0KICAtIG5hbWU6IHBpbG90LnZhbGlkYXRpb24uaXN0aW8uaW8KICAgIGNsaWVudENvbmZpZzoKICAgICAgc2VydmljZToKICAgICAgICBuYW1lOiBpc3Rpby1nYWxsZXkKICAgICAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgICAgIHBhdGg6ICIvYWRtaXRwaWxvdCIKICAgICAgY2FCdW5kbGU6ICIiCiAgICBydWxlczoKICAgICAgLSBvcGVyYXRpb25zOgogICAgICAgIC0gQ1JFQVRFCiAgICAgICAgLSBVUERBVEUKICAgICAgICBhcGlHcm91cHM6CiAgICAgICAgLSBjb25maWcuaXN0aW8uaW8KICAgICAgICBhcGlWZXJzaW9uczoKICAgICAgICAtIHYxYWxwaGEyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgIC0gaHR0cGFwaXNwZWNzCiAgICAgICAgLSBodHRwYXBpc3BlY2JpbmRpbmdzCiAgICAgICAgLSBxdW90YXNwZWNzCiAgICAgICAgLSBxdW90YXNwZWNiaW5kaW5ncwogICAgICAtIG9wZXJhdGlvbnM6CiAgICAgICAgLSBDUkVBVEUKICAgICAgICAtIFVQREFURQogICAgICAgIGFwaUdyb3VwczoKICAgICAgICAtIHJiYWMuaXN0aW8uaW8KICAgICAgICBhcGlWZXJzaW9uczoKICAgICAgICAtICIqIgogICAgICAgIHJlc291cmNlczoKICAgICAgICAtICIqIgogICAgICAtIG9wZXJhdGlvbnM6CiAgICAgICAgLSBDUkVBVEUKICAgICAgICAtIFVQREFURQogICAgICAgIGFwaUdyb3VwczoKICAgICAgICAtIGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvCiAgICAgICAgYXBpVmVyc2lvbnM6CiAgICAgICAgLSAiKiIKICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgLSAiKiIKICAgICAgLSBvcGVyYXRpb25zOgogICAgICAgIC0gQ1JFQVRFCiAgICAgICAgLSBVUERBVEUKICAgICAgICBhcGlHcm91cHM6CiAgICAgICAgLSBuZXR3b3JraW5nLmlzdGlvLmlvCiAgICAgICAgYXBpVmVyc2lvbnM6CiAgICAgICAgLSAiKiIKICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgLSBkZXN0aW5hdGlvbnJ1bGVzCiAgICAgICAgLSBlbnZveWZpbHRlcnMKICAgICAgICAtIGdhdGV3YXlzCiAgICAgICAgLSBzZXJ2aWNlZW50cmllcwogICAgICAgIC0gdmlydHVhbHNlcnZpY2VzCiAgICBmYWlsdXJlUG9saWN5OiBGYWlsCiAgLSBuYW1lOiBtaXhlci52YWxpZGF0aW9uLmlzdGlvLmlvCiAgICBjbGllbnRDb25maWc6CiAgICAgIHNlcnZpY2U6CiAgICAgICAgbmFtZTogaXN0aW8tZ2FsbGV5CiAgICAgICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgICAgICBwYXRoOiAiL2FkbWl0bWl4ZXIiCiAgICAgIGNhQnVuZGxlOiAiIgogICAgcnVsZXM6CiAgICAgIC0gb3BlcmF0aW9uczoKICAgICAgICAtIENSRUFURQogICAgICAgIC0gVVBEQVRFCiAgICAgICAgYXBpR3JvdXBzOgogICAgICAgIC0gY29uZmlnLmlzdGlvLmlvCiAgICAgICAgYXBpVmVyc2lvbnM6CiAgICAgICAgLSB2MWFscGhhMgogICAgICAgIHJlc291cmNlczoKICAgICAgICAtIHJ1bGVzCiAgICAgICAgLSBhdHRyaWJ1dGVtYW5pZmVzdHMKICAgICAgICAtIGNpcmNvbnVzZXMKICAgICAgICAtIGRlbmllcnMKICAgICAgICAtIGZsdWVudGRzCiAgICAgICAgLSBrdWJlcm5ldGVzZW52cwogICAgICAgIC0gbGlzdGNoZWNrZXJzCiAgICAgICAgLSBtZW1xdW90YXMKICAgICAgICAtIG5vb3BzCiAgICAgICAgLSBvcGFzCiAgICAgICAgLSBwcm9tZXRoZXVzZXMKICAgICAgICAtIHJiYWNzCiAgICAgICAgLSBzZXJ2aWNlY29udHJvbHMKICAgICAgICAtIHNvbGFyd2luZHNlcwogICAgICAgIC0gc3RhY2tkcml2ZXJzCiAgICAgICAgLSBjbG91ZHdhdGNoZXMKICAgICAgICAtIGRvZ3N0YXRzZHMKICAgICAgICAtIHN0YXRzZHMKICAgICAgICAtIHN0ZGlvcwogICAgICAgIC0gYXBpa2V5cwogICAgICAgIC0gYXV0aG9yaXphdGlvbnMKICAgICAgICAtIGNoZWNrbm90aGluZ3MKICAgICAgICAjIC0ga3ViZXJuZXRlc2VzCiAgICAgICAgLSBsaXN0ZW50cmllcwogICAgICAgIC0gbG9nZW50cmllcwogICAgICAgIC0gbWV0cmljcwogICAgICAgIC0gcXVvdGFzCiAgICAgICAgLSByZXBvcnRub3RoaW5ncwogICAgICAgIC0gc2VydmljZWNvbnRyb2xyZXBvcnRzCiAgICAgICAgLSB0cmFjZXNwYW5zCiAgICBmYWlsdXJlUG9saWN5OiBGYWlsCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/gateways/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogZ2F0ZXdheXMKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBkZXBsb3lpbmcgSXN0aW8gZ2F0ZXdheXMKa2V5d29yZHM6CiAgLSBpc3RpbwogIC0gaW5ncmVzc2dhdGV3YXkKICAtIGVncmVzc2dhdGV3YXkKICAtIGdhdGV3YXlzCnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/gateways/templates/autoscale.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZ2xvYmFsIikgKG5lICRrZXkgImVuYWJsZWQiKSB9fQp7ey0gaWYgYW5kICRzcGVjLmVuYWJsZWQgJHNwZWMuYXV0b3NjYWxlTWluIH19CmFwaVZlcnNpb246IGF1dG9zY2FsaW5nL3YyYmV0YTEKa2luZDogSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIKbWV0YWRhdGE6CiAgICBuYW1lOiB7eyAka2V5IH19CiAgICBuYW1lc3BhY2U6IHt7ICRzcGVjLm5hbWVzcGFjZSB8IGRlZmF1bHQgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogICAgbWF4UmVwbGljYXM6IHt7ICRzcGVjLmF1dG9zY2FsZU1heCB9fQogICAgbWluUmVwbGljYXM6IHt7ICRzcGVjLmF1dG9zY2FsZU1pbiB9fQogICAgc2NhbGVUYXJnZXRSZWY6CiAgICAgIGFwaVZlcnNpb246IGFwcHMvdjFiZXRhMQogICAgICBraW5kOiBEZXBsb3ltZW50CiAgICAgIG5hbWU6IHt7ICRrZXkgfX0KICAgIG1ldHJpY3M6CiAgICAtIHR5cGU6IFJlc291cmNlCiAgICAgIHJlc291cmNlOgogICAgICAgIG5hbWU6IGNwdQogICAgICAgIHRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbjoge3sgJHNwZWMuY3B1LnRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbiB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/gateways/templates/clusterrole.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZ2xvYmFsIikgKG5lICRrZXkgImVuYWJsZWQiKSB9fQp7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiaXN0aW8ubmFtZSIgJCB9fQogICAgY2hhcnQ6IHt7ICQuQ2hhcnQuTmFtZSB9fS17eyAkLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAkLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgJC5SZWxlYXNlLk5hbWUgfX0KICBuYW1lOiB7eyAka2V5IH19LXt7ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0KcnVsZXM6Ci0gYXBpR3JvdXBzOiBbImV4dGVuc2lvbnMiXQogIHJlc291cmNlczogWyJ0aGlyZHBhcnR5cmVzb3VyY2VzIiwgInZpcnR1YWxzZXJ2aWNlcyIsICJkZXN0aW5hdGlvbnJ1bGVzIiwgImdhdGV3YXlzIl0KICB2ZXJiczogWyJnZXQiLCAid2F0Y2giLCAibGlzdCIsICJ1cGRhdGUiXQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/gateways/templates/clusterrolebindings.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZ2xvYmFsIikgKG5lICRrZXkgImVuYWJsZWQiKSB9fQp7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRrZXkgfX0te3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiB7eyAka2V5IH19LXt7ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZToge3sgJGtleSB9fS1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/gateways/templates/deployment.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZ2xvYmFsIikgKG5lICRrZXkgImVuYWJsZWQiKSB9fQp7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiB7eyAka2V5IH19CiAgbmFtZXNwYWNlOiB7eyAkc3BlYy5uYW1lc3BhY2UgfCBkZWZhdWx0ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBjaGFydDoge3sgJC5DaGFydC5OYW1lIH19LXt7ICQuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgJC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAkLlJlbGVhc2UuU2VydmljZSB9fQogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgcmVwbGljYXM6IHt7ICRzcGVjLnJlcGxpY2FDb3VudCB9fQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAkc3BlYy5sYWJlbHMgfX0KICAgICAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZToge3sgJGtleSB9fS1zZXJ2aWNlLWFjY291bnQKe3stIGlmICQuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7ICQuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQp7ey0gaWYgJC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVuYWJsZUNvcmVEdW1wIH19CiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgIC0gbmFtZTogZW5hYmxlLWNvcmUtZHVtcAp7ey0gaWYgY29udGFpbnMgIi8iICQuVmFsdWVzLmdsb2JhbC5wcm94eV9pbml0LmltYWdlIH19CiAgICAgICAgICBpbWFnZTogInt7ICQuVmFsdWVzLmdsb2JhbC5wcm94eV9pbml0LmltYWdlIH19Igp7ey0gZWxzZSB9fQogICAgICAgICAgaW1hZ2U6ICJ7eyAkLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7ICQuVmFsdWVzLmdsb2JhbC5wcm94eV9pbml0LmltYWdlIH19Ont7ICQuVmFsdWVzLmdsb2JhbC50YWcgfX0iCnt7LSBlbmQgfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAtIC9iaW4vc2gKICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAgIC0gLWMKICAgICAgICAgICAgLSBzeXNjdGwgLXcga2VybmVsLmNvcmVfcGF0dGVybj0vdmFyL2xpYi9pc3Rpby9jb3JlLnByb3h5ICYmIHVsaW1pdCAtYyB1bmxpbWl0ZWQKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBpc3Rpby1wcm94eQp7ey0gaWYgY29udGFpbnMgIi8iICQuVmFsdWVzLmdsb2JhbC5wcm94eS5pbWFnZSB9fQogICAgICAgICAgaW1hZ2U6ICJ7eyAkLlZhbHVlcy5nbG9iYWwucHJveHkuaW1hZ2UgfX0iCnt7LSBlbHNlIH19CiAgICAgICAgICBpbWFnZTogInt7ICQuVmFsdWVzLmdsb2JhbC5odWIgfX0ve3sgJC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmltYWdlIH19Ont7ICQuVmFsdWVzLmdsb2JhbC50YWcgfX0iCnt7LSBlbmQgfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgJC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLnBvcnRzIH19CiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgJHZhbC5wb3J0IH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0Ke3sgaWYgbmUgJC5WYWx1ZXMuZ2xvYmFsLnByb3h5LnN0YXRzLnByb21ldGhldXNQb3J0IDAuIH19CiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgJC5WYWx1ZXMuZ2xvYmFsLnByb3h5LnN0YXRzLnByb21ldGhldXNQb3J0IH19CiAgICAgICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgICAgICAgIG5hbWU6IGh0dHAtZW52b3ktcHJvbQp7eyBlbmQgfX0KICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAtIHByb3h5CiAgICAgICAgICAtIHJvdXRlcgogICAgICAgICAgLSAtdgogICAgICAgICAgLSAiMiIKICAgICAgICAgIC0gLS1kaXNjb3ZlcnlSZWZyZXNoRGVsYXkKICAgICAgICAgIC0gJzFzJyAjZGlzY292ZXJ5UmVmcmVzaERlbGF5CiAgICAgICAgICAtIC0tZHJhaW5EdXJhdGlvbgogICAgICAgICAgLSAnNDVzJyAjZHJhaW5EdXJhdGlvbgogICAgICAgICAgLSAtLXBhcmVudFNodXRkb3duRHVyYXRpb24KICAgICAgICAgIC0gJzFtMHMnICNwYXJlbnRTaHV0ZG93bkR1cmF0aW9uCiAgICAgICAgICAtIC0tY29ubmVjdFRpbWVvdXQKICAgICAgICAgIC0gJzEwcycgI2Nvbm5lY3RUaW1lb3V0CiAgICAgICAgICAtIC0tc2VydmljZUNsdXN0ZXIKICAgICAgICAgIC0ge3sgJGtleSB9fQogICAgICAgICAgLSAtLXppcGtpbkFkZHJlc3MKICAgICAgICB7ey0gaWYgJC5WYWx1ZXMuZ2xvYmFsLmlzdGlvTmFtZXNwYWNlIH19CiAgICAgICAgICAtIHppcGtpbi57eyAkLlZhbHVlcy5nbG9iYWwuaXN0aW9OYW1lc3BhY2UgfX06OTQxMQogICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAtIHppcGtpbjo5NDExCiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiAkLlZhbHVlcy5nbG9iYWwucHJveHkuZW52b3lTdGF0c2QuZW5hYmxlZCB9fQogICAgICAgICAgLSAtLXN0YXRzZFVkcEFkZHJlc3MKICAgICAgICAgIC0ge3sgJC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVudm95U3RhdHNkLmhvc3QgfX06e3sgJC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVudm95U3RhdHNkLnBvcnQgfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAtIC0tcHJveHlBZG1pblBvcnQKICAgICAgICAgIC0gIjE1MDAwIgogICAgICAgIHt7LSBpZiAkLlZhbHVlcy5nbG9iYWwuY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkIH19CiAgICAgICAgICAtIC0tY29udHJvbFBsYW5lQXV0aFBvbGljeQogICAgICAgICAgLSBNVVRVQUxfVExTCiAgICAgICAgICAtIC0tZGlzY292ZXJ5QWRkcmVzcwogICAgICAgICAge3stIGlmICQuVmFsdWVzLmdsb2JhbC5pc3Rpb05hbWVzcGFjZSB9fQogICAgICAgICAgLSBpc3Rpby1waWxvdC57eyAkLlZhbHVlcy5nbG9iYWwuaXN0aW9OYW1lc3BhY2UgfX06MTUwMDUKICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAtIGlzdGlvLXBpbG90OjE1MDA1CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGVsc2UgfX0KICAgICAgICAgIC0gLS1jb250cm9sUGxhbmVBdXRoUG9saWN5CiAgICAgICAgICAtIE5PTkUKICAgICAgICAgIC0gLS1kaXNjb3ZlcnlBZGRyZXNzCiAgICAgICAgICB7ey0gaWYgJC5WYWx1ZXMuZ2xvYmFsLmlzdGlvTmFtZXNwYWNlIH19CiAgICAgICAgICAtIGlzdGlvLXBpbG90Lnt7ICQuVmFsdWVzLmdsb2JhbC5pc3Rpb05hbWVzcGFjZSB9fTo4MDgwCiAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgLSBpc3Rpby1waWxvdDo4MDgwCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgcmVzb3VyY2VzOgp7ey0gaWYgJHNwZWMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAkc3BlYy5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sICQuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbmQgfX0KICAgICAgICAgIGVudjoKICAgICAgICAgIC0gbmFtZTogUE9EX05BTUUKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZQogICAgICAgICAgLSBuYW1lOiBQT0RfTkFNRVNQQUNFCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVzcGFjZQogICAgICAgICAgLSBuYW1lOiBJTlNUQU5DRV9JUAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBzdGF0dXMucG9kSVAKICAgICAgICAgIC0gbmFtZTogSVNUSU9fTUVUQV9QT0RfTkFNRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWUKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgIC0gbmFtZTogaXN0aW8tY2VydHMKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL2NlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICB7ey0gcmFuZ2UgJHNwZWMuc2VjcmV0Vm9sdW1lcyB9fQogICAgICAgICAgLSBuYW1lOiB7eyAubmFtZSB9fQogICAgICAgICAgICBtb3VudFBhdGg6IHt7IC5tb3VudFBhdGggfCBxdW90ZSB9fQogICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAge3stIGVuZCB9fQp7ey0gaWYgJHNwZWMuYWRkaXRpb25hbENvbnRhaW5lcnMgfX0Ke3sgdG9ZYW1sICRzcGVjLmFkZGl0aW9uYWxDb250YWluZXJzIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQogICAgICB2b2x1bWVzOgogICAgICAtIG5hbWU6IGlzdGlvLWNlcnRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZTogaXN0aW8ue3sgJGtleSB9fS1zZXJ2aWNlLWFjY291bnQKICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgIHt7LSByYW5nZSAkc3BlYy5zZWNyZXRWb2x1bWVzIH19CiAgICAgIC0gbmFtZToge3sgLm5hbWUgfX0KICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiB7eyAuc2VjcmV0TmFtZSB8IHF1b3RlIH19CiAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSByYW5nZSAkc3BlYy5jb25maWdWb2x1bWVzIH19CiAgICAgIC0gbmFtZToge3sgLm5hbWUgfX0KICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiB7eyAuY29uZmlnTWFwTmFtZSB8IHF1b3RlIH19CiAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICB7ey0gZW5kIH19CiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAkIHwgaW5kZW50IDYgfX0KLS0tCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/gateways/templates/service.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZ2xvYmFsIikgKG5lICRrZXkgImVuYWJsZWQiKSB9fQp7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRrZXkgfX0KICBuYW1lc3BhY2U6IHt7ICRzcGVjLm5hbWVzcGFjZSB8IGRlZmF1bHQgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGFubm90YXRpb25zOgogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMuc2VydmljZUFubm90YXRpb25zIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CiAgbGFiZWxzOgogICAgY2hhcnQ6IHt7ICQuQ2hhcnQuTmFtZSB9fS17eyAkLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7ICQuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgJC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLmxhYmVscyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQpzcGVjOgp7ey0gaWYgJHNwZWMubG9hZEJhbGFuY2VySVAgfX0KICBsb2FkQmFsYW5jZXJJUDogInt7ICRzcGVjLmxvYWRCYWxhbmNlcklQIH19Igp7ey0gZW5kIH19CiAgdHlwZToge3sgLnR5cGUgfX0Ke3stIGlmICRzcGVjLmV4dGVybmFsVHJhZmZpY1BvbGljeSB9fQogIGV4dGVybmFsVHJhZmZpY1BvbGljeToge3sgJHNwZWMuZXh0ZXJuYWxUcmFmZmljUG9saWN5IH19Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLmxhYmVscyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQogIHBvcnRzOgogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMucG9ydHMgfX0KICAgIC0KICAgICAge3stIHJhbmdlICRwa2V5LCAkcHZhbCA6PSAkdmFsIH19CiAgICAgIHt7ICRwa2V5fX06IHt7ICRwdmFsIH19CiAgICAgIHt7LSBlbmQgfX0KICAgIHt7LSBlbmQgfX0KLS0tCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/gateways/templates/serviceaccount.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZ2xvYmFsIikgKG5lICRrZXkgImVuYWJsZWQiKSB9fQp7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAp7ey0gaWYgJC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlICQuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxTZWNyZXRzIH19CiAgLSBuYW1lOiB7eyAuIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQptZXRhZGF0YToKICBuYW1lOiB7eyAka2V5IH19LXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgJHNwZWMubmFtZXNwYWNlIHwgZGVmYXVsdCAkLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyAkc3BlYy5sYWJlbHMuaXN0aW8gfX0KICAgIGNoYXJ0OiB7eyAkLkNoYXJ0Lk5hbWUgfX0te3sgJC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgJC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7ICQuUmVsZWFzZS5OYW1lIH19Ci0tLQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/grafana/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBncmFmYW5hCnZlcnNpb246IDEuMC4zCmFwcFZlcnNpb246IDEuMC4zCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/grafana/dashboards/galley-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-mesh-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-performance-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-service-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-workload-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/mixer-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/pilot-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/fix_datasources.sh",
          "fileContents": "IyEvYmluL2Jhc2gKCnNldCAtZQoKVEhJU19ESVI9IiQoIGNkICIkKCBkaXJuYW1lICIke0JBU0hfU09VUkNFWzBdfSIgKSIgJiYgcHdkICkiClVYPSQodW5hbWUpCgpmb3IgZGIgaW4gJHtUSElTX0RJUn0vZGFzaGJvYXJkcy8qLmpzb247IGRvCiAgICBpZiBbWyAke1VYfSA9PSAiRGFyd2luIiBdXTsgdGhlbgogICAgICBzZWQgLWkgJycgJ3MvJHtEU19QUk9NRVRIRVVTfS9Qcm9tZXRoZXVzL2cnICRkYgogICAgZWxzZQogICAgICBzZWQgLWkgJ3MvJHtEU19QUk9NRVRIRVVTfS9Qcm9tZXRoZXVzL2cnICRkYgogICAgZmkKZG9uZQo="
        },
        {
          "filePath": "charts/grafana/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZ3JhZmFuYS5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAiZ3JhZmFuYS5mdWxsbmFtZSIgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/grafana/templates/configmap-custom-resources.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdyYWZhbmEtY3VzdG9tLXJlc291cmNlcwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1ncmFmYW5hCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3RpbzogZ3JhZmFuYQpkYXRhOgogIGN1c3RvbS1yZXNvdXJjZXMueWFtbDogfC0KICAgIHt7LSBpbmNsdWRlICJncmFmYW5hLWRlZmF1bHQueWFtbC50cGwiIC4gfCBpbmRlbnQgNH19CiAgcnVuLnNoOiB8LQogICAge3stIGluY2x1ZGUgImluc3RhbGwtY3VzdG9tLXJlc291cmNlcy5zaC50cGwiIC4gfCBpbmRlbnQgNH19Cg=="
        },
        {
          "filePath": "charts/grafana/templates/configmap-dashboards.yaml",
          "fileContents": "LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1ncmFmYW5hLWNvbmZpZ3VyYXRpb24tZGFzaGJvYXJkcwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1ncmFmYW5hCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3RpbzogZ3JhZmFuYQoKZGF0YToKICB7ey0gJGZpbGVzIDo9IC5GaWxlcyB9fQogIHt7IHJhbmdlICRwYXRoLCAkYnl0ZXMgOj0gLkZpbGVzLkdsb2IgImRhc2hib2FyZHMvKi5qc29uIiB9fQogIHt7IGJhc2UgJHBhdGggfX06ICd7eyAkZmlsZXMuR2V0ICRwYXRoIH19JwogIHt7IGVuZCB9fQo="
        },
        {
          "filePath": "charts/grafana/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdyYWZhbmEKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tZ3JhZmFuYQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IGdyYWZhbmEKZGF0YToKe3stIGlmIC5WYWx1ZXMuZGF0YXNvdXJjZXMgfX0KICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuZGF0YXNvdXJjZXMgfX0KICB7eyAka2V5IH19OiB8Cnt7IHRvWWFtbCAkdmFsdWUgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey0gaWYgLlZhbHVlcy5kYXNoYm9hcmRQcm92aWRlcnMgfX0KICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuZGFzaGJvYXJkUHJvdmlkZXJzIH19CiAge3sgJGtleSB9fTogfAp7eyB0b1lhbWwgJHZhbHVlIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/grafana/templates/create-custom-resources-job.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1ncmFmYW5hCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Ci0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1ncmFmYW5hCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyJhdXRoZW50aWNhdGlvbi5pc3Rpby5pbyJdICMgbmVlZGVkIHRvIGNyZWF0ZSBkZWZhdWx0IGF1dGhuIHBvbGljeQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyIqIl0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwtcm9sZS1iaW5kaW5nLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tZ3JhZmFuYQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1ncmFmYW5hLXBvc3QtaW5zdGFsbC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwtYWNjb3VudAogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KLS0tCmFwaVZlcnNpb246IGJhdGNoL3YxCmtpbmQ6IEpvYgptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1ncmFmYW5hLXBvc3QtaW5zdGFsbAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1pbnN0YWxsCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tZ3JhZmFuYQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQpzcGVjOgogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIG5hbWU6IGlzdGlvLWdyYWZhbmEtcG9zdC1pbnN0YWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IGlzdGlvLWdyYWZhbmEKICAgICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGlzdGlvLWdyYWZhbmEtcG9zdC1pbnN0YWxsLWFjY291bnQKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGh5cGVya3ViZQogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmdsb2JhbC5oeXBlcmt1YmUuaHViIH19L2h5cGVya3ViZTp7eyAuVmFsdWVzLmdsb2JhbC5oeXBlcmt1YmUudGFnIH19IgogICAgICAgICAgY29tbWFuZDogWyAiL2Jpbi9iYXNoIiwgIi90bXAvZ3JhZmFuYS9ydW4uc2giLCAiL3RtcC9ncmFmYW5hL2N1c3RvbS1yZXNvdXJjZXMueWFtbCIgXQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG1vdW50UGF0aDogIi90bXAvZ3JhZmFuYSIKICAgICAgICAgICAgICBuYW1lOiB0bXAtY29uZmlnbWFwLWdyYWZhbmEKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IHRtcC1jb25maWdtYXAtZ3JhZmFuYQogICAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgICBuYW1lOiBpc3Rpby1ncmFmYW5hLWN1c3RvbS1yZXNvdXJjZXMKICAgICAgcmVzdGFydFBvbGljeTogT25GYWlsdXJlCg=="
        },
        {
          "filePath": "charts/grafana/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogZ3JhZmFuYQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1ncmFmYW5hCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CnNwZWM6CiAgcmVwbGljYXM6IHt7IC5WYWx1ZXMucmVwbGljYUNvdW50IH19CiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogZ3JhZmFuYQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiB7eyAuQ2hhcnQuTmFtZSB9fQogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmltYWdlLnJlcG9zaXRvcnkgfX06e3sgLlZhbHVlcy5pbWFnZS50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLmludGVybmFsUG9ydCB9fQogICAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogL2xvZ2luCiAgICAgICAgICAgICAgcG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLmludGVybmFsUG9ydCB9fQogICAgICAgICAgZW52OgogICAgICAgICAgLSBuYW1lOiBHUkFGQU5BX1BPUlQKICAgICAgICAgICAgdmFsdWU6IHt7IC5WYWx1ZXMuc2VydmljZS5pbnRlcm5hbFBvcnQgfCBxdW90ZSB9fQp7ey0gaWYgLlZhbHVlcy5zZWN1cml0eS5lbmFibGVkIH19CiAgICAgICAgICAtIG5hbWU6IEdGX1NFQ1VSSVRZX0FETUlOX1VTRVIKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIHNlY3JldEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IGdyYWZhbmEKICAgICAgICAgICAgICAgIGtleTogdXNlcm5hbWUKICAgICAgICAgIC0gbmFtZTogR0ZfU0VDVVJJVFlfQURNSU5fUEFTU1dPUkQKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIHNlY3JldEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IGdyYWZhbmEKICAgICAgICAgICAgICAgIGtleTogcGFzc3dvcmQKICAgICAgICAgIC0gbmFtZTogR0ZfQVVUSF9CQVNJQ19FTkFCTEVECiAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIC0gbmFtZTogR0ZfQVVUSF9BTk9OWU1PVVNfRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgICAgLSBuYW1lOiBHRl9BVVRIX0RJU0FCTEVfTE9HSU5fRk9STQogICAgICAgICAgICB2YWx1ZTogImZhbHNlIgp7ey0gZWxzZSB9fQogICAgICAgICAgLSBuYW1lOiBHRl9BVVRIX0JBU0lDX0VOQUJMRUQKICAgICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAgIC0gbmFtZTogR0ZfQVVUSF9BTk9OWU1PVVNfRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAtIG5hbWU6IEdGX0FVVEhfQU5PTllNT1VTX09SR19ST0xFCiAgICAgICAgICAgIHZhbHVlOiBBZG1pbgp7ey0gZW5kIH19CiAgICAgICAgICAtIG5hbWU6IEdGX1BBVEhTX0RBVEEKICAgICAgICAgICAgdmFsdWU6IC9kYXRhL2dyYWZhbmEKICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG5hbWU6IGRhdGEKICAgICAgICAgICAgbW91bnRQYXRoOiAvZGF0YS9ncmFmYW5hCiAgICAgICAgICAtIG5hbWU6IGRhc2hib2FyZHMtaXN0aW8KICAgICAgICAgICAgbW91bnRQYXRoOiAiL3Zhci9saWIvZ3JhZmFuYS9kYXNoYm9hcmRzL2lzdGlvIgogICAgICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICAgICAgbW91bnRQYXRoOiAiL2V0Yy9ncmFmYW5hL3Byb3Zpc2lvbmluZy9kYXRhc291cmNlcy9kYXRhc291cmNlcy55YW1sIgogICAgICAgICAgICBzdWJQYXRoOiBkYXRhc291cmNlcy55YW1sCiAgICAgICAgICAtIG5hbWU6IGNvbmZpZwogICAgICAgICAgICBtb3VudFBhdGg6ICIvZXRjL2dyYWZhbmEvcHJvdmlzaW9uaW5nL2Rhc2hib2FyZHMvZGFzaGJvYXJkcHJvdmlkZXJzLnlhbWwiCiAgICAgICAgICAgIHN1YlBhdGg6IGRhc2hib2FyZHByb3ZpZGVycy55YW1sCiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiBpc3Rpby1ncmFmYW5hCiAgICAgIC0gbmFtZTogZGF0YQp7ey0gaWYgLlZhbHVlcy5wZXJzaXN0IH19CiAgICAgICAgcGVyc2lzdGVudFZvbHVtZUNsYWltOgogICAgICAgICAgY2xhaW1OYW1lOiBpc3Rpby1ncmFmYW5hLXB2Ywp7ey0gZWxzZSB9fQogICAgICAgIGVtcHR5RGlyOiB7fQogICAgICAtIG5hbWU6IGRhc2hib2FyZHMtaXN0aW8KICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiAgaXN0aW8tZ3JhZmFuYS1jb25maWd1cmF0aW9uLWRhc2hib2FyZHMKe3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/grafana/templates/grafana-ports-mtls.yaml",
          "fileContents": "e3sgZGVmaW5lICJncmFmYW5hLWRlZmF1bHQueWFtbC50cGwiIH19CmFwaVZlcnNpb246IGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExCmtpbmQ6IFBvbGljeQptZXRhZGF0YToKICBuYW1lOiBncmFmYW5hLXBvcnRzLW10bHMtZGlzYWJsZWQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogIHRhcmdldHM6CiAgLSBuYW1lOiBncmFmYW5hCiAgICBwb3J0czoKICAgIC0gbnVtYmVyOiB7eyAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxQb3J0IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/grafana/templates/pvc.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucGVyc2lzdCB9fQpraW5kOiBQZXJzaXN0ZW50Vm9sdW1lQ2xhaW0KYXBpVmVyc2lvbjogdjEKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wdmMKICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLWdyYWZhbmEKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICBzdG9yYWdlQ2xhc3NOYW1lOiB7eyAuVmFsdWVzLnN0b3JhZ2VDbGFzc05hbWUgfX0KICBhY2Nlc3NNb2RlczoKICAgIC0gUmVhZFdyaXRlT25jZQogIHJlc291cmNlczoKICAgIHJlcXVlc3RzOgogICAgICBzdG9yYWdlOiA1R2kKe3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/grafana/templates/secret.yaml",
          "fileContents": "Cnt7LSBpZiAuVmFsdWVzLnNlY3VyaXR5LmVuYWJsZWQgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiBncmFmYW5hCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGdyYWZhbmEKdHlwZTogT3BhcXVlCmRhdGE6CiAgdXNlcm5hbWU6IHt7IC5WYWx1ZXMuc2VjdXJpdHkuYWRtaW5Vc2VyIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICBwYXNzd29yZDoge3sgLlZhbHVlcy5zZWN1cml0eS5hZG1pblBhc3N3b3JkIHwgYjY0ZW5jIHwgcXVvdGUgfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/grafana/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBncmFmYW5hCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tZ3JhZmFuYQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQpzcGVjOgogIHR5cGU6IHt7IC5WYWx1ZXMuc2VydmljZS50eXBlIH19CiAgcG9ydHM6CiAgICAtIHBvcnQ6IHt7IC5WYWx1ZXMuc2VydmljZS5leHRlcm5hbFBvcnQgfX0KICAgICAgdGFyZ2V0UG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLmludGVybmFsUG9ydCB9fQogICAgICBwcm90b2NvbDogVENQCiAgICAgIG5hbWU6IHt7IC5WYWx1ZXMuc2VydmljZS5uYW1lIH19CiAgc2VsZWN0b3I6CiAgICBhcHA6IGdyYWZhbmEK"
        },
        {
          "filePath": "charts/grafana/values.yaml",
          "fileContents": "ZGF0YXNvdXJjZXM6CiAgZGF0YXNvdXJjZXMueWFtbDoKICAgIGFwaVZlcnNpb246IDEKICAgIGRhdGFzb3VyY2VzOgogICAgLSBuYW1lOiBQcm9tZXRoZXVzCiAgICAgIHR5cGU6IHByb21ldGhldXMKICAgICAgb3JnSWQ6IDEKICAgICAgdXJsOiBodHRwOi8vcHJvbWV0aGV1czo5MDkwCiAgICAgIGFjY2VzczogcHJveHkKICAgICAgaXNEZWZhdWx0OiB0cnVlCiAgICAgIGpzb25EYXRhOgogICAgICAgIHRpbWVJbnRlcnZhbDogNXMKICAgICAgZWRpdGFibGU6IHRydWUKCmRhc2hib2FyZFByb3ZpZGVyczoKICBkYXNoYm9hcmRwcm92aWRlcnMueWFtbDoKICAgIGFwaVZlcnNpb246IDEKICAgIHByb3ZpZGVyczoKICAgIC0gbmFtZTogJ2lzdGlvJwogICAgICBvcmdJZDogMQogICAgICBmb2xkZXI6ICdpc3RpbycKICAgICAgdHlwZTogZmlsZQogICAgICBkaXNhYmxlRGVsZXRpb246IGZhbHNlCiAgICAgIG9wdGlvbnM6CiAgICAgICAgcGF0aDogL3Zhci9saWIvZ3JhZmFuYS9kYXNoYm9hcmRzL2lzdGlvCg=="
        },
        {
          "filePath": "charts/ingress/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogaW5ncmVzcwp2ZXJzaW9uOiAxLjAuMwphcHBWZXJzaW9uOiAxLjAuMwp0aWxsZXJWZXJzaW9uOiAiPj0yLjcuMiIKZGVzY3JpcHRpb246IEhlbG0gY2hhcnQgZm9yIGluZ3Jlc3MgZGVwbG95bWVudAprZXl3b3JkczoKICAtIGlzdGlvCiAgLSBpbmdyZXNzCnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/ingress/templates/autoscale.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuYXV0b3NjYWxlTWluIH19CmFwaVZlcnNpb246IGF1dG9zY2FsaW5nL3YyYmV0YTEKa2luZDogSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIKbWV0YWRhdGE6CiAgICBuYW1lOiBpc3Rpby1pbmdyZXNzCiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogICAgbWF4UmVwbGljYXM6IHt7IC5WYWx1ZXMuYXV0b3NjYWxlTWF4IH19CiAgICBtaW5SZXBsaWNhczoge3sgLlZhbHVlcy5hdXRvc2NhbGVNaW4gfX0KICAgIHNjYWxlVGFyZ2V0UmVmOgogICAgICBhcGlWZXJzaW9uOiBhcHBzL3YxYmV0YTEKICAgICAga2luZDogRGVwbG95bWVudAogICAgICBuYW1lOiBpc3Rpby1pbmdyZXNzCiAgICBtZXRyaWNzOgogICAgICAtIHR5cGU6IFJlc291cmNlCiAgICAgICAgcmVzb3VyY2U6CiAgICAgICAgICBuYW1lOiBjcHUKICAgICAgICAgIHRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbjogODAKe3sgZW5kIH19Cg=="
        },
        {
          "filePath": "charts/ingress/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImlzdGlvLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBuYW1lOiBpc3Rpby1pbmdyZXNzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiZXh0ZW5zaW9ucyJdCiAgcmVzb3VyY2VzOiBbInRoaXJkcGFydHlyZXNvdXJjZXMiLCAiaW5ncmVzc2VzIl0KICB2ZXJiczogWyJnZXQiLCAid2F0Y2giLCAibGlzdCIsICJ1cGRhdGUiXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJjb25maWdtYXBzIiwgInBvZHMiLCAiZW5kcG9pbnRzIiwgInNlcnZpY2VzIl0KICB2ZXJiczogWyJnZXQiLCAid2F0Y2giLCAibGlzdCJdCg=="
        },
        {
          "filePath": "charts/ingress/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1pbmdyZXNzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1waWxvdC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8taW5ncmVzcy1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cg=="
        },
        {
          "filePath": "charts/ingress/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8taW5ncmVzcwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiaXN0aW8ubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IGluZ3Jlc3MKc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5yZXBsaWNhQ291bnQgfX0KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgaXN0aW86IGluZ3Jlc3MKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICIiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGlzdGlvLWluZ3Jlc3Mtc2VydmljZS1hY2NvdW50Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiB7eyB0ZW1wbGF0ZSAiaXN0aW8ubmFtZSIgLiB9fQogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0vcHJveHl2Mjp7eyAuVmFsdWVzLmdsb2JhbC50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogODAKICAgICAgICAgICAgLSBjb250YWluZXJQb3J0OiA0NDMKICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAtIHByb3h5CiAgICAgICAgICAtIGluZ3Jlc3MKICAgICAgICAgIC0gLXYKICAgICAgICAgIC0gIjIiCiAgICAgICAgICAtIC0tZGlzY292ZXJ5UmVmcmVzaERlbGF5CiAgICAgICAgICAtICcxcycgI2Rpc2NvdmVyeVJlZnJlc2hEZWxheQogICAgICAgICAgLSAtLWRyYWluRHVyYXRpb24KICAgICAgICAgIC0gJzQ1cycgI2RyYWluRHVyYXRpb24KICAgICAgICAgIC0gLS1wYXJlbnRTaHV0ZG93bkR1cmF0aW9uCiAgICAgICAgICAtICcxbTBzJyAjcGFyZW50U2h1dGRvd25EdXJhdGlvbgogICAgICAgICAgLSAtLWNvbm5lY3RUaW1lb3V0CiAgICAgICAgICAtICcxMHMnICNjb25uZWN0VGltZW91dAogICAgICAgICAgLSAtLXNlcnZpY2VDbHVzdGVyCiAgICAgICAgICAtIGlzdGlvLWluZ3Jlc3MKICAgICAgICAgIC0gLS16aXBraW5BZGRyZXNzCiAgICAgICAgICAtIHppcGtpbjo5NDExCiAgICAgICAge3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVudm95U3RhdHNkLmVuYWJsZWQgfX0KICAgICAgICAgIC0gLS1zdGF0c2RVZHBBZGRyZXNzCiAgICAgICAgICAtIHt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVudm95U3RhdHNkLmhvc3QgfX06e3sgLlZhbHVlcy5nbG9iYWwucHJveHkuZW52b3lTdGF0c2QucG9ydCB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIC0gLS1wcm94eUFkbWluUG9ydAogICAgICAgICAgLSAiMTUwMDAiCiAgICAgICAge3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCB9fQogICAgICAgICAgLSAtLWNvbnRyb2xQbGFuZUF1dGhQb2xpY3kKICAgICAgICAgIC0gTVVUVUFMX1RMUwogICAgICAgICAgLSAtLWRpc2NvdmVyeUFkZHJlc3MKICAgICAgICAgIC0gaXN0aW8tcGlsb3Q6MTUwMDUKICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgLSAtLWNvbnRyb2xQbGFuZUF1dGhQb2xpY3kKICAgICAgICAgIC0gTk9ORQogICAgICAgICAgLSAtLWRpc2NvdmVyeUFkZHJlc3MKICAgICAgICAgIC0gaXN0aW8tcGlsb3Q6ODA4MAogICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFBPRF9OQU1FCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWUKICAgICAgICAgIC0gbmFtZTogUE9EX05BTUVTUEFDRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lc3BhY2UKICAgICAgICAgIC0gbmFtZTogSU5TVEFOQ0VfSVAKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3RhdHVzLnBvZElQCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG5hbWU6IGlzdGlvLWNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jZXJ0cwogICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgLSBuYW1lOiBpbmdyZXNzLWNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9pbmdyZXNzLWNlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogaXN0aW8tY2VydHMKICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiBpc3Rpby5pc3Rpby1pbmdyZXNzLXNlcnZpY2UtYWNjb3VudAogICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgLSBuYW1lOiBpbmdyZXNzLWNlcnRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZTogaXN0aW8taW5ncmVzcy1jZXJ0cwogICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQo="
        },
        {
          "filePath": "charts/ingress/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1pbmdyZXNzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3RpbzogaW5ncmVzcwogIGFubm90YXRpb25zOgogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5zZXJ2aWNlLmFubm90YXRpb25zIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CnNwZWM6Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2UubG9hZEJhbGFuY2VySVAgfX0KICBsb2FkQmFsYW5jZXJJUDogInt7IC5WYWx1ZXMuc2VydmljZS5sb2FkQmFsYW5jZXJJUCB9fSIKe3stIGVuZCB9fQogIHR5cGU6IHt7IC5WYWx1ZXMuc2VydmljZS50eXBlIH19Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxUcmFmZmljUG9saWN5IH19CiAgZXh0ZXJuYWxUcmFmZmljUG9saWN5OiB7eyAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxUcmFmZmljUG9saWN5IH19Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIGlzdGlvOiBpbmdyZXNzCiAgcG9ydHM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAuVmFsdWVzLnNlcnZpY2UucG9ydHMgfX0KICAgIC0KICAgICAge3stIHJhbmdlICRwa2V5LCAkcHZhbCA6PSAkdmFsIH19CiAgICAgIHt7ICRwa2V5fX06IHt7ICRwdmFsIH19CiAgICAgIHt7LSBlbmQgfX0KICAgIHt7LSBlbmQgfX0KLS0tCg=="
        },
        {
          "filePath": "charts/ingress/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWluZ3Jlc3Mtc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJpc3Rpby5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cg=="
        },
        {
          "filePath": "charts/kiali/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEtpYWxpIGlzIGFuIG9wZW4gc291cmNlIHByb2plY3QgZm9yIHNlcnZpY2UgbWVzaCBvYnNlcnZhYmlsaXR5LCByZWZlciB0byBodHRwczovL2dpdGh1Yi5jb20va2lhbGkva2lhbGkgZm9yIGRldGFpbC4KbmFtZToga2lhbGkKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMC45CnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/kiali/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBraWFsaQogIGxhYmVsczoKICAgIGFwcDoga2lhbGkKICAgIHZlcnNpb246IG1hc3RlcgpydWxlczoKLSBhcGlHcm91cHM6IFsiIiwiYXBwcyIsICJhdXRvc2NhbGluZyJdCiAgcmVzb3VyY2VzOgogIC0gY29uZmlnbWFwcwogIC0gbmFtZXNwYWNlcwogIC0gbm9kZXMKICAtIHBvZHMKICAtIHByb2plY3RzCiAgLSBzZXJ2aWNlcwogIC0gZW5kcG9pbnRzCiAgLSBkZXBsb3ltZW50cwogIC0gaG9yaXpvbnRhbHBvZGF1dG9zY2FsZXJzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbImNvbmZpZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gcnVsZXMKICAtIGNpcmNvbnVzZXMKICAtIGRlbmllcnMKICAtIGZsdWVudGRzCiAgLSBrdWJlcm5ldGVzZW52cwogIC0gbGlzdGNoZWNrZXJzCiAgLSBtZW1xdW90YXMKICAtIG9wYXMKICAtIHByb21ldGhldXNlcwogIC0gcmJhY3MKICAtIHNlcnZpY2Vjb250cm9scwogIC0gc29sYXJ3aW5kc2VzCiAgLSBzdGFja2RyaXZlcnMKICAtIHN0YXRzZHMKICAtIHN0ZGlvcwogIC0gYXBpa2V5cwogIC0gYXV0aG9yaXphdGlvbnMKICAtIGNoZWNrbm90aGluZ3MKICAtIGt1YmVybmV0ZXNlcwogIC0gbGlzdGVudHJpZXMKICAtIGxvZ2VudHJpZXMKICAtIG1ldHJpY3MKICAtIHF1b3RhcwogIC0gcmVwb3J0bm90aGluZ3MKICAtIHNlcnZpY2Vjb250cm9scmVwb3J0cwogIC0gcXVvdGFzcGVjcwogIC0gcXVvdGFzcGVjYmluZGluZ3MKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsibmV0d29ya2luZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gdmlydHVhbHNlcnZpY2VzCiAgLSBkZXN0aW5hdGlvbnJ1bGVzCiAgLSBzZXJ2aWNlZW50cmllcwogIC0gZ2F0ZXdheXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gK"
        },
        {
          "filePath": "charts/kiali/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8ta2lhbGktYWRtaW4tcm9sZS1iaW5kaW5nLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoga2lhbGkKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZToga2lhbGkKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBraWFsaS1zZXJ2aWNlLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "charts/kiali/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGtpYWxpCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGtpYWxpCmRhdGE6CiAgY29uZmlnLnlhbWw6IHwKICAgIHNlcnZlcjoKICAgICAgcG9ydDogMjAwMDEKICAgIGV4dGVybmFsX3NlcnZpY2VzOgogICAgICBqYWVnZXI6CiAgICAgICAgdXJsOiB7eyAuVmFsdWVzLmRhc2hib2FyZC5qYWVnZXJVUkwgfX0KICAgICAgZ3JhZmFuYToKICAgICAgICB1cmw6IHt7IC5WYWx1ZXMuZGFzaGJvYXJkLmdyYWZhbmFVUkwgfX0K"
        },
        {
          "filePath": "charts/kiali/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZToga2lhbGkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoga2lhbGkKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5yZXBsaWNhQ291bnQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IGtpYWxpCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZToga2lhbGkKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDoga2lhbGkKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICIiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGtpYWxpLXNlcnZpY2UtYWNjb3VudAp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICAgICAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQogICAgICBjb250YWluZXJzOgogICAgICAtIGltYWdlOiAie3sgLlZhbHVlcy5odWIgfX0va2lhbGk6e3sgLlZhbHVlcy50YWcgfX0iCiAgICAgICAgbmFtZToga2lhbGkKICAgICAgICBjb21tYW5kOgogICAgICAgIC0gIi9vcHQva2lhbGkva2lhbGkiCiAgICAgICAgLSAiLWNvbmZpZyIKICAgICAgICAtICIva2lhbGktY29uZmlndXJhdGlvbi9jb25maWcueWFtbCIKICAgICAgICAtICItdiIKICAgICAgICAtICI0IgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IEFDVElWRV9OQU1FU1BBQ0UKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lc3BhY2UKICAgICAgICAtIG5hbWU6IFNFUlZFUl9DUkVERU5USUFMU19VU0VSTkFNRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBzZWNyZXRLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZToga2lhbGkKICAgICAgICAgICAgICBrZXk6IHVzZXJuYW1lCiAgICAgICAgLSBuYW1lOiBTRVJWRVJfQ1JFREVOVElBTFNfUEFTU1dPUkQKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgc2VjcmV0S2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IGtpYWxpCiAgICAgICAgICAgICAga2V5OiBwYXNzcGhyYXNlCiAgICAgICAgLSBuYW1lOiBQUk9NRVRIRVVTX1NFUlZJQ0VfVVJMCiAgICAgICAgICB2YWx1ZTogaHR0cDovL3Byb21ldGhldXM6OTA5MAogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGtpYWxpLWNvbmZpZ3VyYXRpb24KICAgICAgICAgIG1vdW50UGF0aDogIi9raWFsaS1jb25maWd1cmF0aW9uIgogICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMCB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMCB9fQp7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZToga2lhbGktY29uZmlndXJhdGlvbgogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGtpYWxpCg=="
        },
        {
          "filePath": "charts/kiali/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiBraWFsaQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBraWFsaQogIGFubm90YXRpb25zOgogICAge3stIHJhbmdlICRrZXksICR2YWx1ZSA6PSAuVmFsdWVzLmluZ3Jlc3MuYW5ub3RhdGlvbnMgfX0KICAgICAge3sgJGtleSB9fToge3sgJHZhbHVlIHwgcXVvdGUgfX0KICAgIHt7LSBlbmQgfX0Kc3BlYzoKICBydWxlczoKICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIC0gaG9zdDoge3sgJGhvc3QgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDogLwogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBraWFsaQogICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiAyMDAwMQogICAge3stIGVuZCAtfX0KICB7ey0gaWYgLlZhbHVlcy5pbmdyZXNzLnRscyB9fQogIHRsczoKe3sgdG9ZYW1sIC5WYWx1ZXMuaW5ncmVzcy50bHMgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/kiali/templates/secrets.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IGtpYWxpCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGtpYWxpCgp0eXBlOiBPcGFxdWUKZGF0YToKICB1c2VybmFtZToge3sgLlZhbHVlcy5kYXNoYm9hcmQudXNlcm5hbWUgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHBhc3NwaHJhc2U6IHt7IC5WYWx1ZXMuZGFzaGJvYXJkLnBhc3NwaHJhc2UgfCBiNjRlbmMgfCBxdW90ZSB9fQo="
        },
        {
          "filePath": "charts/kiali/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBraWFsaQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBraWFsaQpzcGVjOgogIHBvcnRzOgogIC0gbmFtZTogdGNwCiAgICBwcm90b2NvbDogVENQCiAgICBwb3J0OiAyMDAwMQogICAgbmFtZTogaHR0cC1raWFsaQogIHNlbGVjdG9yOgogICAgYXBwOiBraWFsaQo="
        },
        {
          "filePath": "charts/kiali/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGtpYWxpLXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBraWFsaQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQo="
        },
        {
          "filePath": "charts/mixer/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogbWl4ZXIKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBtaXhlciBkZXBsb3ltZW50CmtleXdvcmRzOgogIC0gaXN0aW8KICAtIG1peGVyCnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/mixer/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAibWl4ZXIubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgoqL319Cnt7LSBkZWZpbmUgIm1peGVyLmZ1bGxuYW1lIiAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/mixer/templates/autoscale.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG9yIChlcSAka2V5ICJpc3Rpby1wb2xpY3kiKSAoZXEgJGtleSAiaXN0aW8tdGVsZW1ldHJ5IikgfX0Ke3stIGlmIGFuZCAkc3BlYy5hdXRvc2NhbGVFbmFibGVkICRzcGVjLmF1dG9zY2FsZU1pbiB9fQphcGlWZXJzaW9uOiBhdXRvc2NhbGluZy92MmJldGExCmtpbmQ6IEhvcml6b250YWxQb2RBdXRvc2NhbGVyCm1ldGFkYXRhOgogICAgbmFtZToge3sgJGtleSB9fQogICAgbmFtZXNwYWNlOiB7eyAkLlJlbGVhc2UuTmFtZXNwYWNlIH19CnNwZWM6CiAgICBtYXhSZXBsaWNhczoge3sgJHNwZWMuYXV0b3NjYWxlTWF4IH19CiAgICBtaW5SZXBsaWNhczoge3sgJHNwZWMuYXV0b3NjYWxlTWluIH19CiAgICBzY2FsZVRhcmdldFJlZjoKICAgICAgYXBpVmVyc2lvbjogYXBwcy92MWJldGExCiAgICAgIGtpbmQ6IERlcGxveW1lbnQKICAgICAgbmFtZToge3sgJGtleSB9fQogICAgbWV0cmljczoKICAgIC0gdHlwZTogUmVzb3VyY2UKICAgICAgcmVzb3VyY2U6CiAgICAgICAgbmFtZTogY3B1CiAgICAgICAgdGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uOiB7eyAkc3BlYy5jcHUudGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uIH19Ci0tLQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/mixer/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLW1peGVyLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgIm1peGVyLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KcnVsZXM6Ci0gYXBpR3JvdXBzOiBbImNvbmZpZy5pc3Rpby5pbyJdICMgaXN0aW8gQ1JEIHdhdGNoZXIKICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiY3JlYXRlIiwgImdldCIsICJsaXN0IiwgIndhdGNoIiwgInBhdGNoIl0KLSBhcGlHcm91cHM6IFsicmJhYy5pc3Rpby5pbyJdICMgaXN0aW8gUkJBQyB3YXRjaGVyCiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiYXBpZXh0ZW5zaW9ucy5rOHMuaW8iXQogIHJlc291cmNlczogWyJjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbImNvbmZpZ21hcHMiLCAiZW5kcG9pbnRzIiwgInBvZHMiLCAic2VydmljZXMiLCAibmFtZXNwYWNlcyIsICJzZWNyZXRzIiwgInJlcGxpY2F0aW9uY29udHJvbGxlcnMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiZXh0ZW5zaW9ucyJdCiAgcmVzb3VyY2VzOiBbInJlcGxpY2FzZXRzIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0gYXBpR3JvdXBzOiBbImFwcHMiXQogIHJlc291cmNlczogWyJyZXBsaWNhc2V0cyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQo="
        },
        {
          "filePath": "charts/mixer/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1taXhlci1hZG1pbi1yb2xlLWJpbmRpbmcte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAibWl4ZXIubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1taXhlci17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tbWl4ZXItc2VydmljZS1hY2NvdW50CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "charts/mixer/templates/config.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/mixer/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXN0YXRzZC1wcm9tLWJyaWRnZQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1zdGF0c2QtcHJvbS1icmlkZ2UKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIGlzdGlvOiBtaXhlcgpkYXRhOgogIG1hcHBpbmcuY29uZjogfC0K"
        },
        {
          "filePath": "charts/mixer/templates/deployment.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/mixer/templates/service.yaml",
          "fileContents": "e3sgJG1peGVycyA6PSBsaXN0ICJwb2xpY3kiICJ0ZWxlbWV0cnkiIH19Cnt7LSByYW5nZSAkaWR4LCAkbW5hbWUgOj0gJG1peGVycyB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXt7ICRtbmFtZSB9fQogIG5hbWVzcGFjZToge3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGNoYXJ0OiB7eyAkLkNoYXJ0Lk5hbWUgfX0te3sgJC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IG1peGVyCnNwZWM6CiAgcG9ydHM6CiAgLSBuYW1lOiBncnBjLW1peGVyCiAgICBwb3J0OiA5MDkxCiAgLSBuYW1lOiBncnBjLW1peGVyLW10bHMKICAgIHBvcnQ6IDE1MDA0CiAgLSBuYW1lOiBodHRwLW1vbml0b3JpbmcKICAgIHBvcnQ6IDkwOTMKe3stIGlmIGVxICRtbmFtZSAidGVsZW1ldHJ5IiB9fQogIC0gbmFtZTogcHJvbWV0aGV1cwogICAgcG9ydDogNDI0MjIKe3stIGVuZCB9fQogIHNlbGVjdG9yOgogICAgaXN0aW86IG1peGVyCiAgICBpc3Rpby1taXhlci10eXBlOiB7eyAkbW5hbWUgfX0KLS0tCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/mixer/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLW1peGVyLXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAibWl4ZXIubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQo="
        },
        {
          "filePath": "charts/pilot/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogcGlsb3QKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBwaWxvdCBkZXBsb3ltZW50CmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHBpbG90CnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/pilot/templates/autoscale.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuYXV0b3NjYWxlTWluIH19CmFwaVZlcnNpb246IGF1dG9zY2FsaW5nL3YyYmV0YTEKa2luZDogSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIKbWV0YWRhdGE6CiAgICBuYW1lOiBpc3Rpby1waWxvdAogICAgbmFtZXNwYWNlOiB7eyAkLlJlbGVhc2UuTmFtZXNwYWNlIH19CnNwZWM6CiAgICBtYXhSZXBsaWNhczoge3sgLlZhbHVlcy5hdXRvc2NhbGVNYXggfX0KICAgIG1pblJlcGxpY2FzOiB7eyAuVmFsdWVzLmF1dG9zY2FsZU1pbiB9fQogICAgc2NhbGVUYXJnZXRSZWY6CiAgICAgIGFwaVZlcnNpb246IGFwcHMvdjFiZXRhMQogICAgICBraW5kOiBEZXBsb3ltZW50CiAgICAgIG5hbWU6IGlzdGlvLXBpbG90CiAgICBtZXRyaWNzOgogICAgLSB0eXBlOiBSZXNvdXJjZQogICAgICByZXNvdXJjZToKICAgICAgICBuYW1lOiBjcHUKICAgICAgICB0YXJnZXRBdmVyYWdlVXRpbGl6YXRpb246IHt7IC5WYWx1ZXMuY3B1LnRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbiB9fQotLS0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/pilot/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXBpbG90LXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tcGlsb3QKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KcnVsZXM6Ci0gYXBpR3JvdXBzOiBbImNvbmZpZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbIioiXQotIGFwaUdyb3VwczogWyJyYmFjLmlzdGlvLmlvIl0KICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiZ2V0IiwgIndhdGNoIiwgImxpc3QiXQotIGFwaUdyb3VwczogWyJuZXR3b3JraW5nLmlzdGlvLmlvIl0KICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbImF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvIl0KICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbImFwaWV4dGVuc2lvbnMuazhzLmlvIl0KICByZXNvdXJjZXM6IFsiY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucyJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbImV4dGVuc2lvbnMiXQogIHJlc291cmNlczogWyJ0aGlyZHBhcnR5cmVzb3VyY2VzIiwgInRoaXJkcGFydHlyZXNvdXJjZXMuZXh0ZW5zaW9ucyIsICJpbmdyZXNzZXMiLCAiaW5ncmVzc2VzL3N0YXR1cyJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbImNvbmZpZ21hcHMiXQogIHZlcmJzOiBbImNyZWF0ZSIsICJnZXQiLCAibGlzdCIsICJ3YXRjaCIsICJ1cGRhdGUiXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJlbmRwb2ludHMiLCAicG9kcyIsICJzZXJ2aWNlcyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJuYW1lc3BhY2VzIiwgIm5vZGVzIiwgInNlY3JldHMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0K"
        },
        {
          "filePath": "charts/pilot/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXBpbG90CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGlzdGlvLXBpbG90LXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBpc3Rpby1waWxvdC1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cg=="
        },
        {
          "filePath": "charts/pilot/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tcGlsb3QKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICMgVE9ETzogZGVmYXVsdCB0ZW1wbGF0ZSBkb2Vzbid0IGhhdmUgdGhpcywgd2hpY2ggb25lIGlzIHJpZ2h0ID8KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXBpbG90CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3RpbzogcGlsb3QKICBhbm5vdGF0aW9uczoKICAgIGNoZWNrc3VtL2NvbmZpZy12b2x1bWU6IHt7IHRlbXBsYXRlICJpc3Rpby5jb25maWdtYXAuY2hlY2tzdW0iIC4gfX0Kc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5yZXBsaWNhQ291bnQgfX0KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgaXN0aW86IHBpbG90CiAgICAgICAgYXBwOiBwaWxvdAogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tcGlsb3Qtc2VydmljZS1hY2NvdW50Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBkaXNjb3ZlcnkKe3stIGlmIGNvbnRhaW5zICIvIiAuVmFsdWVzLmltYWdlIH19CiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuaW1hZ2UgfX0iCnt7LSBlbHNlIH19CiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuZ2xvYmFsLmh1YiB9fS97eyAuVmFsdWVzLmltYWdlIH19Ont7IC5WYWx1ZXMuZ2xvYmFsLnRhZyB9fSIKe3stIGVuZCB9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxQb2xpY3kgfX0KICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAtICJkaXNjb3ZlcnkiCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5vbmVOYW1lc3BhY2UgfX0KICAgICAgICAgIC0gIi1hIgogICAgICAgICAgLSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Ke3stIGVuZCB9fQp7ey0gaWYgbm90IC5WYWx1ZXMuc2lkZWNhciB9fQogICAgICAgICAgLSAtLXNlY3VyZUdycGNBZGRyCiAgICAgICAgICAtICI6MTUwMTEiCnt7LSBlbmQgfX0KICAgICAgICAgIHBvcnRzOgogICAgICAgICAgLSBjb250YWluZXJQb3J0OiA4MDgwCiAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDE1MDEwCnt7LSBpZiBub3QgLlZhbHVlcy5zaWRlY2FyIH19CiAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDE1MDExCnt7LSBlbmQgfX0KICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC9yZWFkeQogICAgICAgICAgICAgIHBvcnQ6IDgwODAKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAzMAogICAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgICAgZW52OgogICAgICAgICAgLSBuYW1lOiBQT0RfTkFNRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lCiAgICAgICAgICAtIG5hbWU6IFBPRF9OQU1FU1BBQ0UKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgICAtIG5hbWU6IFBJTE9UX0NBQ0hFX1NRVUFTSAogICAgICAgICAgICB2YWx1ZTogIjUiCiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5lbnYgfX0KICAgICAgICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5WYWx1ZXMuZW52IH19CiAgICAgICAgICAtIG5hbWU6IHt7ICRrZXkgfX0KICAgICAgICAgICAgdmFsdWU6ICJ7eyAkdmFsIH19IgogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGVuZCB9fQp7ey0gaWYgLlZhbHVlcy50cmFjZVNhbXBsaW5nIH19CiAgICAgICAgICAtIG5hbWU6IFBJTE9UX1RSQUNFX1NBTVBMSU5HCiAgICAgICAgICAgIHZhbHVlOiAie3sgLlZhbHVlcy50cmFjZVNhbXBsaW5nIH19Igp7ey0gZW5kIH19CiAgICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVuZCB9fQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9jb25maWcKICAgICAgICAgIC0gbmFtZTogaXN0aW8tY2VydHMKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL2NlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCnt7LSBpZiAuVmFsdWVzLnNpZGVjYXIgfX0KICAgICAgICAtIG5hbWU6IGlzdGlvLXByb3h5CiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuZ2xvYmFsLmh1YiB9fS9wcm94eXYyOnt7IC5WYWx1ZXMuZ2xvYmFsLnRhZyB9fSIKICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19CiAgICAgICAgICBwb3J0czoKICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTUwMDMKICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTUwMDUKICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTUwMDcKICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTUwMTEKICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAtIHByb3h5CiAgICAgICAgICAtIC0tc2VydmljZUNsdXN0ZXIKICAgICAgICAgIC0gaXN0aW8tcGlsb3QKICAgICAgICAgIC0gLS10ZW1wbGF0ZUZpbGUKICAgICAgICAgIC0gL2V0Yy9pc3Rpby9wcm94eS9lbnZveV9waWxvdC55YW1sLnRtcGwKICAgICAgICB7ey0gaWYgJC5WYWx1ZXMuZ2xvYmFsLmNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZH19CiAgICAgICAgICAtIC0tY29udHJvbFBsYW5lQXV0aFBvbGljeQogICAgICAgICAgLSBNVVRVQUxfVExTCiAgICAgICAge3stIGVsc2UgfX0KICAgICAgICAgIC0gLS1jb250cm9sUGxhbmVBdXRoUG9saWN5CiAgICAgICAgICAtIE5PTkUKICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFBPRF9OQU1FCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWUKICAgICAgICAgIC0gbmFtZTogUE9EX05BTUVTUEFDRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lc3BhY2UKICAgICAgICAgIC0gbmFtZTogSU5TVEFOQ0VfSVAKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3RhdHVzLnBvZElQCiAgICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcm94eS5yZXNvdXJjZXMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLnByb3h5LnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG5hbWU6IGlzdGlvLWNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jZXJ0cwogICAgICAgICAgICByZWFkT25seTogdHJ1ZQp7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY29uZmlnLXZvbHVtZQogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGlzdGlvCiAgICAgIC0gbmFtZTogaXN0aW8tY2VydHMKICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiBpc3Rpby5pc3Rpby1waWxvdC1zZXJ2aWNlLWFjY291bnQKICAgICAgICAgIG9wdGlvbmFsOiB0cnVlICAgCiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/pilot/templates/gateway.yaml",
          "fileContents": "YXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBHYXRld2F5Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWF1dG9nZW5lcmF0ZWQtazhzLWluZ3Jlc3MKICBuYW1lc3BhY2U6IGlzdGlvLXN5c3RlbQpzcGVjOgogIHNlbGVjdG9yOgogICAgaXN0aW86IHt7IC5WYWx1ZXMuZ2xvYmFsLms4c0luZ3Jlc3NTZWxlY3RvciB9fQogIHNlcnZlcnM6CiAgLSBwb3J0OgogICAgICBudW1iZXI6IDgwCiAgICAgIHByb3RvY29sOiBIVFRQMgogICAgICBuYW1lOiBodHRwCiAgICBob3N0czoKICAgIC0gIioiCnt7IGlmIC5WYWx1ZXMuZ2xvYmFsLms4c0luZ3Jlc3NIdHRwcyB9fQogIC0gcG9ydDoKICAgICAgbnVtYmVyOiA0NDMKICAgICAgcHJvdG9jb2w6IEhUVFBTCiAgICAgIG5hbWU6IGh0dHBzLWRlZmF1bHQKICAgIHRsczoKICAgICAgbW9kZTogU0lNUExFCiAgICAgIHNlcnZlckNlcnRpZmljYXRlOiAvZXRjL2lzdGlvL2luZ3Jlc3MtY2VydHMvdGxzLmNydAogICAgICBwcml2YXRlS2V5OiAvZXRjL2lzdGlvL2luZ3Jlc3MtY2VydHMvdGxzLmtleQogICAgaG9zdHM6CiAgICAtICIqIgp7eyBlbmQgfX0KLS0tCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5tZXNoRXhwYW5zaW9uIH19CmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogR2F0ZXdheQptZXRhZGF0YToKICBuYW1lOiBtZXNoZXhwYW5zaW9uLWdhdGV3YXkKc3BlYzoKICBzZWxlY3RvcjoKICAgIGlzdGlvOiBpbmdyZXNzZ2F0ZXdheQogIHNlcnZlcnM6CiAgLSBwb3J0OgogICAgICBudW1iZXI6IDE1MDExCiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgbmFtZTogdGNwLXBpbG90CiAgICBob3N0czoKICAgIC0gIioiCiAgLSBwb3J0OgogICAgICBudW1iZXI6IDgwNjAKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiB0Y3AtY2l0YWRlbAogICAgaG9zdHM6CiAgICAtICIqIgotLS0Ke3stIGVuZCB9fQoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLm1lc2hFeHBhbnNpb25JTEIgfX0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBHYXRld2F5Cm1ldGFkYXRhOgogIG5hbWU6IG1lc2hleHBhbnNpb24taWxiLWdhdGV3YXkKc3BlYzoKICBzZWxlY3RvcjoKICAgIGlzdGlvOiBpbGJnYXRld2F5CiAgc2VydmVyczoKICAtIHBvcnQ6CiAgICAgIG51bWJlcjogMTUwMTEKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiB0Y3AtcGlsb3QKICAgIGhvc3RzOgogICAgLSAiKiIKICAtIHBvcnQ6CiAgICAgIG51bWJlcjogODA2MAogICAgICBwcm90b2NvbDogVENQCiAgICAgIG5hbWU6IHRjcC1jaXRhZGVsCiAgICBob3N0czoKICAgIC0gIioiCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/pilot/templates/meshexpansion.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLm1lc2hFeHBhbnNpb24gfX0KCmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogVmlydHVhbFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogbWVzaGV4cGFuc2lvbi1waWxvdApzcGVjOgogIGhvc3RzOgogIC0gInBpbG90LmlzdGlvLXN5c3RlbSIKICBnYXRld2F5czoKICAtIG1lc2hleHBhbnNpb24tZ2F0ZXdheQogIHRjcDoKICAtIG1hdGNoOgogICAgLSBwb3J0OiAxNTAxMQogICAgcm91dGU6CiAgICAtIGRlc3RpbmF0aW9uOgogICAgICAgIGhvc3Q6IGlzdGlvLXBpbG90LmlzdGlvLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbAogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDE1MDExCgoKe3stIGVuZCB9fQoKCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5tZXNoRXhwYW5zaW9uSUxCIH19Ci0tLQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IFZpcnR1YWxTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IGlsYi1tZXNoZXhwYW5zaW9uLXBpbG90CnNwZWM6CiAgaG9zdHM6CiAgLSAibWVzaGV4cGFuc2lvbmlsYi5pc3Rpby1zeXN0ZW0iCiAgZ2F0ZXdheXM6CiAgLSBtZXNoZXhwYW5zaW9uLWlsYi1nYXRld2F5CiAgdGNwOgogIC0gbWF0Y2g6CiAgICAtIHBvcnQ6IDE1MDExCiAgICByb3V0ZToKICAgIC0gZGVzdGluYXRpb246CiAgICAgICAgaG9zdDogaXN0aW8tcGlsb3QuaXN0aW8tc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2FsCiAgICAgICAgcG9ydDoKICAgICAgICAgIG51bWJlcjogMTUwMTEKICAtIG1hdGNoOgogICAgLSBwb3J0OiAxNTAxMAogICAgcm91dGU6CiAgICAtIGRlc3RpbmF0aW9uOgogICAgICAgIGhvc3Q6IGlzdGlvLXBpbG90LmlzdGlvLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbAogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDE1MDEwCiAgLSBtYXRjaDoKICAgIC0gcG9ydDogNTM1MwogICAgcm91dGU6CiAgICAtIGRlc3RpbmF0aW9uOgogICAgICAgIGhvc3Q6IGt1YmUtZG5zLmt1YmUtc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2FsCiAgICAgICAgcG9ydDoKICAgICAgICAgIG51bWJlcjogNTMKCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/pilot/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1waWxvdAogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQpzcGVjOgogIHBvcnRzOgogIC0gcG9ydDogMTUwMTAKICAgIG5hbWU6IGdycGMteGRzICMgZGlyZWN0CiAgLSBwb3J0OiAxNTAxMQogICAgbmFtZTogaHR0cHMteGRzICMgbVRMUwogIC0gcG9ydDogODA4MAogICAgbmFtZTogaHR0cC1sZWdhY3ktZGlzY292ZXJ5ICMgZGlyZWN0CiAgLSBwb3J0OiA5MDkzCiAgICBuYW1lOiBodHRwLW1vbml0b3JpbmcKICBzZWxlY3RvcjoKICAgIGlzdGlvOiBwaWxvdAo="
        },
        {
          "filePath": "charts/pilot/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXBpbG90LXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1waWxvdAogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQo="
        },
        {
          "filePath": "charts/prometheus/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBwcm9tZXRoZXVzCnZlcnNpb246IDEuMC4zCmFwcFZlcnNpb246IDIuMy4xCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/prometheus/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAicHJvbWV0aGV1cy5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAicHJvbWV0aGV1cy5mdWxsbmFtZSIgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/prometheus/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IHByb21ldGhldXMte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczoKICAtIG5vZGVzCiAgLSBzZXJ2aWNlcwogIC0gZW5kcG9pbnRzCiAgLSBwb2RzCiAgLSBub2Rlcy9wcm94eQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6CiAgLSBjb25maWdtYXBzCiAgdmVyYnM6IFsiZ2V0Il0KLSBub25SZXNvdXJjZVVSTHM6IFsiL21ldHJpY3MiXQogIHZlcmJzOiBbImdldCJdCg=="
        },
        {
          "filePath": "charts/prometheus/templates/clusterrolebindings.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBwcm9tZXRoZXVzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IHByb21ldGhldXMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "charts/prometheus/templates/configmap.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/prometheus/templates/deployment.yaml",
          "fileContents": "IyBUT0RPOiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgaGFzIHNlcnZpY2UgYWNjb3VudCwgcm9sZXMsIGV0YwphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHByb21ldGhldXMKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5yZXBsaWNhQ291bnQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHByb21ldGhldXMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBwcm9tZXRoZXVzCiAgICAgIGFubm90YXRpb25zOgogICAgICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICAgICAgc2NoZWR1bGVyLmFscGhhLmt1YmVybmV0ZXMuaW8vY3JpdGljYWwtcG9kOiAiIgogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBwcm9tZXRoZXVzCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBwcm9tZXRoZXVzCiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuaHViIH19L3Byb21ldGhldXM6e3sgLlZhbHVlcy50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgYXJnczoKICAgICAgICAgICAgLSAnLS1zdG9yYWdlLnRzZGIucmV0ZW50aW9uPTZoJwogICAgICAgICAgICAtICctLWNvbmZpZy5maWxlPS9ldGMvcHJvbWV0aGV1cy9wcm9tZXRoZXVzLnltbCcKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkwOTAKICAgICAgICAgICAgICBuYW1lOiBodHRwCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC8tL2hlYWx0aHkKICAgICAgICAgICAgICBwb3J0OiA5MDkwCiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvLS9yZWFkeQogICAgICAgICAgICAgIHBvcnQ6IDkwOTAKICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL3Byb21ldGhldXMKICAgICAgICAgIC0gbW91bnRQYXRoOiAvZXRjL2lzdGlvLWNlcnRzCiAgICAgICAgICAgIG5hbWU6IGlzdGlvLWNlcnRzCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY29uZmlnLXZvbHVtZQogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IHByb21ldGhldXMKICAgICAgLSBuYW1lOiBpc3Rpby1jZXJ0cwogICAgICAgIHNlY3JldDoKICAgICAgICAgIGRlZmF1bHRNb2RlOiA0MjAKICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgICBzZWNyZXROYW1lOiBpc3Rpby5kZWZhdWx0CiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/prometheus/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBhbm5vdGF0aW9uczoKICAgIHByb21ldGhldXMuaW8vc2NyYXBlOiAndHJ1ZScKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQogIGxhYmVsczoKICAgIG5hbWU6IHByb21ldGhldXMKc3BlYzoKICBzZWxlY3RvcjoKICAgIGFwcDogcHJvbWV0aGV1cwogIHBvcnRzOgogIC0gbmFtZTogaHR0cC1wcm9tZXRoZXVzCiAgICBwcm90b2NvbDogVENQCiAgICBwb3J0OiA5MDkwCgp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlLm5vZGVQb3J0LmVuYWJsZWQgfX0KIyBVc2luZyBzZXBhcmF0ZSBpbmdyZXNzIGZvciBub2RlcG9ydCwgdG8gYXZvaWQgY29uZmxpY3Qgd2l0aCBwaWxvdCBlMmUgdGVzdCBjb25maWdzLgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzLW5vZGVwb3J0CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBuYW1lOiBwcm9tZXRoZXVzCnNwZWM6CiAgdHlwZTogTm9kZVBvcnQKICBwb3J0czoKICAtIHBvcnQ6IDkwOTAKICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2Uubm9kZVBvcnQucG9ydCB9fQogICAgbmFtZTogaHR0cC1wcm9tZXRoZXVzCiAgc2VsZWN0b3I6CiAgICBhcHA6IHByb21ldGhldXMKe3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/prometheus/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IHByb21ldGhldXMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "charts/security/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogc2VjdXJpdHkKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBpc3RpbyBhdXRoZW50aWNhdGlvbgprZXl3b3JkczoKICAtIGlzdGlvCiAgLSBzZWN1cml0eQpzb3VyY2VzOgogIC0gaHR0cDovL2dpdGh1Yi5jb20vaXN0aW8vaXN0aW8KZW5naW5lOiBnb3RwbAppY29uOiBodHRwczovL2lzdGlvLmlvL2Zhdmljb25zL2FuZHJvaWQtMTkyeDE5Mi5wbmcK"
        },
        {
          "filePath": "charts/security/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAic2VjdXJpdHkubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgoqL319Cnt7LSBkZWZpbmUgInNlY3VyaXR5LmZ1bGxuYW1lIiAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/security/templates/cleanup-secrets.yaml",
          "fileContents": "IyBUaGUgcmVhc29uIGZvciBjcmVhdGluZyBhIFNlcnZpY2VBY2NvdW50IGFuZCBDbHVzdGVyUm9sZSBzcGVjaWZpY2FsbHkgZm9yIHRoaXMKIyBwb3N0LWRlbGV0ZSBob29rZWQgam9iIGlzIGJlY2F1c2UgdGhlIGNpdGFkZWwgU2VydmljZUFjY291bnQgaXMgYmVpbmcgZGVsZXRlZAojIGJlZm9yZSB0aGlzIGhvb2sgaXMgbGF1bmNoZWQuIE9uIHRoZSBvdGhlciBoYW5kLCBydW5uaW5nIHRoaXMgaG9vayBiZWZvcmUgdGhlCiMgZGVsZXRpb24gb2YgdGhlIGNpdGFkZWwgKGUuZy4gcHJlLWRlbGV0ZSkgd29uJ3QgZGVsZXRlIHRoZSBzZWNyZXRzIGJlY2F1c2UgdGhleQojIHdpbGwgYmUgcmUtY3JlYXRlZCBpbW1lZGlhdGVseSBieSB0aGUgdG8tYmUtZGVsZXRlZCBjaXRhZGVsLgojCiMgSXQncyBhbHNvIGltcG9ydGFudCB0aGF0IHRoZSBTZXJ2aWNlQWNjb3VudCwgQ2x1c3RlclJvbGUgYW5kIENsdXN0ZXJSb2xlQmluZGluZwojIHdpbGwgYmUgcmVhZHkgYmVmb3JlIHJ1bm5pbmcgdGhlIGhvb2tlZCBKb2IgdGhlcmVmb3JlIHRoZSBob29rIHdlaWdodHMuCgphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1jbGVhbnVwLXNlY3JldHMtc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBwb3N0LWRlbGV0ZQogICAgImhlbG0uc2gvaG9vay1kZWxldGUtcG9saWN5IjogaG9vay1zdWNjZWVkZWQKICAgICJoZWxtLnNoL2hvb2std2VpZ2h0IjogIjEiCiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWNsZWFudXAtc2VjcmV0cy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBwb3N0LWRlbGV0ZQogICAgImhlbG0uc2gvaG9vay1kZWxldGUtcG9saWN5IjogaG9vay1zdWNjZWVkZWQKICAgICJoZWxtLnNoL2hvb2std2VpZ2h0IjogIjEiCiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VjcmV0cyJdCiAgdmVyYnM6IFsibGlzdCIsICJkZWxldGUiXQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1jbGVhbnVwLXNlY3JldHMte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1kZWxldGUKICAgICJoZWxtLnNoL2hvb2stZGVsZXRlLXBvbGljeSI6IGhvb2stc3VjY2VlZGVkCiAgICAiaGVsbS5zaC9ob29rLXdlaWdodCI6ICIyIgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tY2xlYW51cC1zZWNyZXRzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBpc3Rpby1jbGVhbnVwLXNlY3JldHMtc2VydmljZS1hY2NvdW50CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQotLS0KYXBpVmVyc2lvbjogYmF0Y2gvdjEKa2luZDogSm9iCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWNsZWFudXAtc2VjcmV0cwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1kZWxldGUKICAgICJoZWxtLnNoL2hvb2stZGVsZXRlLXBvbGljeSI6IGhvb2stc3VjY2VlZGVkCiAgICAiaGVsbS5zaC9ob29rLXdlaWdodCI6ICIzIgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBuYW1lOiBpc3Rpby1jbGVhbnVwLXNlY3JldHMKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGlzdGlvLWNsZWFudXAtc2VjcmV0cy1zZXJ2aWNlLWFjY291bnQKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGh5cGVya3ViZQogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmdsb2JhbC5oeXBlcmt1YmUuaHViIH19L2h5cGVya3ViZTp7eyAuVmFsdWVzLmdsb2JhbC5oeXBlcmt1YmUudGFnIH19IgogICAgICAgICAgY29tbWFuZDoKICAgICAgICAgIC0gL2Jpbi9iYXNoCiAgICAgICAgICAtIC1jCiAgICAgICAgICAtID4KICAgICAgICAgICAgICBrdWJlY3RsIGdldCBzZWNyZXQgLS1hbGwtbmFtZXNwYWNlcyB8IGdyZXAgImlzdGlvLmlvL2tleS1hbmQtY2VydCIgfCAgd2hpbGUgcmVhZCAtciBlbnRyeTsgZG8KICAgICAgICAgICAgICAgIG5zPSQoZWNobyAkZW50cnkgfCBhd2sgJ3twcmludCAkMX0nKTsKICAgICAgICAgICAgICAgIG5hbWU9JChlY2hvICRlbnRyeSB8IGF3ayAne3ByaW50ICQyfScpOwogICAgICAgICAgICAgICAga3ViZWN0bCBkZWxldGUgc2VjcmV0ICRuYW1lIC1uICRuczsKICAgICAgICAgICAgICBkb25lCiAgICAgIHJlc3RhcnRQb2xpY3k6IE9uRmFpbHVyZQo="
        },
        {
          "filePath": "charts/security/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWNpdGFkZWwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VjcmV0cyJdCiAgdmVyYnM6IFsiY3JlYXRlIiwgImdldCIsICJ3YXRjaCIsICJsaXN0IiwgInVwZGF0ZSIsICJkZWxldGUiXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJzZXJ2aWNlYWNjb3VudHMiXQogIHZlcmJzOiBbImdldCIsICJ3YXRjaCIsICJsaXN0Il0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VydmljZXMiXQogIHZlcmJzOiBbImdldCIsICJ3YXRjaCIsICJsaXN0Il0K"
        },
        {
          "filePath": "charts/security/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1jaXRhZGVsLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tY2l0YWRlbC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tY2l0YWRlbC1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cg=="
        },
        {
          "filePath": "charts/security/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNlY3VyaXR5LWN1c3RvbS1yZXNvdXJjZXMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tc2VjdXJpdHkKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIGlzdGlvOiBzZWN1cml0eQpkYXRhOgogIGN1c3RvbS1yZXNvdXJjZXMueWFtbDogfC0KICAgIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC5tdGxzLmVuYWJsZWQgfX0KICAgICAge3stIGluY2x1ZGUgInNlY3VyaXR5LWRlZmF1bHQueWFtbC50cGwiIC4gfCBpbmRlbnQgNH19CiAgICB7ey0gZWxzZSB9fQogICAgICB7ey0gaW5jbHVkZSAic2VjdXJpdHktcGVybWlzc2l2ZS55YW1sLnRwbCIgLiB8IGluZGVudCA0fX0KICAgIHt7LSBlbmQgfX0KICBydW4uc2g6IHwtCiAgICB7ey0gaW5jbHVkZSAiaW5zdGFsbC1jdXN0b20tcmVzb3VyY2VzLnNoLnRwbCIgLiB8IGluZGVudCA0fX0K"
        },
        {
          "filePath": "charts/security/templates/create-custom-resources-job.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2VjdXJpdHktcG9zdC1pbnN0YWxsLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tc2VjdXJpdHkKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zZWN1cml0eS1wb3N0LWluc3RhbGwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1zZWN1cml0eQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiYXV0aGVudGljYXRpb24uaXN0aW8uaW8iXSAjIG5lZWRlZCB0byBjcmVhdGUgZGVmYXVsdCBhdXRobiBwb2xpY3kKICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbIm5ldHdvcmtpbmcuaXN0aW8uaW8iXSAjIG5lZWRlZCB0byBjcmVhdGUgc2VjdXJpdHkgZGVzdGluYXRpb24gcnVsZXMKICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbImFkbWlzc2lvbnJlZ2lzdHJhdGlvbi5rOHMuaW8iXQogIHJlc291cmNlczogWyJ2YWxpZGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb25zIl0KICB2ZXJiczogWyJnZXQiXQotIGFwaUdyb3VwczogWyJleHRlbnNpb25zIl0KICByZXNvdXJjZXM6IFsiZGVwbG95bWVudHMiLCAicmVwbGljYXNldHMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2VjdXJpdHktcG9zdC1pbnN0YWxsLXJvbGUtYmluZGluZy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXNlY3VyaXR5CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGlzdGlvLXNlY3VyaXR5LXBvc3QtaW5zdGFsbC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tc2VjdXJpdHktcG9zdC1pbnN0YWxsLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Ci0tLQoKYXBpVmVyc2lvbjogYmF0Y2gvdjEKa2luZDogSm9iCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNlY3VyaXR5LXBvc3QtaW5zdGFsbAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1pbnN0YWxsCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tc2VjdXJpdHkKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBuYW1lOiBpc3Rpby1zZWN1cml0eS1wb3N0LWluc3RhbGwKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogaXN0aW8tc2VjdXJpdHkKICAgICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGlzdGlvLXNlY3VyaXR5LXBvc3QtaW5zdGFsbC1hY2NvdW50CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBoeXBlcmt1YmUKICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHlwZXJrdWJlLmh1YiB9fS9oeXBlcmt1YmU6e3sgLlZhbHVlcy5nbG9iYWwuaHlwZXJrdWJlLnRhZyB9fSIKICAgICAgICAgIGNvbW1hbmQ6IFsgIi9iaW4vYmFzaCIsICIvdG1wL3NlY3VyaXR5L3J1bi5zaCIsICIvdG1wL3NlY3VyaXR5L2N1c3RvbS1yZXNvdXJjZXMueWFtbCIgXQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG1vdW50UGF0aDogIi90bXAvc2VjdXJpdHkiCiAgICAgICAgICAgICAgbmFtZTogdG1wLWNvbmZpZ21hcC1zZWN1cml0eQogICAgICB2b2x1bWVzOgogICAgICAgIC0gbmFtZTogdG1wLWNvbmZpZ21hcC1zZWN1cml0eQogICAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgICBuYW1lOiBpc3Rpby1zZWN1cml0eS1jdXN0b20tcmVzb3VyY2VzCiAgICAgIHJlc3RhcnRQb2xpY3k6IE9uRmFpbHVyZQo="
        },
        {
          "filePath": "charts/security/templates/deployment.yaml",
          "fileContents": "IyBpc3RpbyBDQSB3YXRjaGluZyBhbGwgbmFtZXNwYWNlcwphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1jaXRhZGVsCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3RpbzogY2l0YWRlbApzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBpc3RpbzogY2l0YWRlbAogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tY2l0YWRlbC1zZXJ2aWNlLWFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGNpdGFkZWwKICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7IC5WYWx1ZXMuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19IgogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxQb2xpY3kgfX0KICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAgIC0gLS1hcHBlbmQtZG5zLW5hbWVzPXRydWUKICAgICAgICAgICAgLSAtLWdycGMtcG9ydD04MDYwCiAgICAgICAgICAgIC0gLS1ncnBjLWhvc3RuYW1lPWNpdGFkZWwKICAgICAgICAgICAgLSAtLWNpdGFkZWwtc3RvcmFnZS1uYW1lc3BhY2U9e3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICAgICAgICAgIC0gLS1jdXN0b20tZG5zLW5hbWVzPWlzdGlvLXBpbG90LXNlcnZpY2UtYWNjb3VudC57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX06aXN0aW8tcGlsb3Que3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LGlzdGlvLWluZ3Jlc3NnYXRld2F5LXNlcnZpY2UtYWNjb3VudC57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX06aXN0aW8taW5ncmVzc2dhdGV3YXkue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWxmU2lnbmVkIH19CiAgICAgICAgICAgIC0gLS1zZWxmLXNpZ25lZC1jYT10cnVlCiAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAtIC0tc2VsZi1zaWduZWQtY2E9ZmFsc2UKICAgICAgICAgICAgLSAtLXNpZ25pbmctY2VydD0vZXRjL2NhY2VydHMvY2EtY2VydC5wZW0KICAgICAgICAgICAgLSAtLXNpZ25pbmcta2V5PS9ldGMvY2FjZXJ0cy9jYS1rZXkucGVtCiAgICAgICAgICAgIC0gLS1yb290LWNlcnQ9L2V0Yy9jYWNlcnRzL3Jvb3QtY2VydC5wZW0KICAgICAgICAgICAgLSAtLWNlcnQtY2hhaW49L2V0Yy9jYWNlcnRzL2NlcnQtY2hhaW4ucGVtCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVuZCB9fQp7ey0gaWYgbm90IC5WYWx1ZXMuc2VsZlNpZ25lZCB9fQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBuYW1lOiBjYWNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jYWNlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY2FjZXJ0cwogICAgICAgIHNlY3JldDoKICAgICAgICAgc2VjcmV0TmFtZTogY2FjZXJ0cwogICAgICAgICBvcHRpb25hbDogdHJ1ZQp7ey0gZW5kIH19CiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/security/templates/enable-mesh-mtls.yaml",
          "fileContents": "e3sgZGVmaW5lICJzZWN1cml0eS1kZWZhdWx0LnlhbWwudHBsIiB9fQojIFRoZXNlIHBvbGljeSBhbmQgZGVzdGluYXRpb24gcnVsZXMgZWZmZWN0aXZlbHkgZW5hYmxlIG1UTFMgZm9yIGFsbCBzZXJ2aWNlcyBpbiB0aGUgbWVzaC4gRm9yIG5vdywKIyB0aGV5IGFyZSBhZGRlZCB0byBJc3RpbyBpbnN0YWxsYXRpb24geWFtbCBmb3IgYmFja3dhcmQgY29tcGF0aWJsZS4gSW4gZnV0dXJlLCB0aGV5IHNob3VsZCBiZSBpbgojIGEgc2VwYXJhdGVkIHlhbWwgZmlsZSBzbyB0aGF0IGN1c3RvbWVyIGNhbiBlbmFibGUgbVRMUyBpbmRlcGVuZGVudCBmcm9tIGluc3RhbGxhdGlvbi4KCiMgQXV0aGVudGljYXRpb24gcG9saWN5IHRvIGVuYWJsZSBtdXR1YWwgVExTIGZvciBhbGwgc2VydmljZXMgKHRoYXQgaGF2ZSBzaWRlY2FyKSBpbiB0aGUgbWVzaC4KYXBpVmVyc2lvbjogImF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExIgpraW5kOiAiTWVzaFBvbGljeSIKbWV0YWRhdGE6CiAgbmFtZTogImRlZmF1bHQiCiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1zZWN1cml0eQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQpzcGVjOgogIHBlZXJzOgogIC0gbXRsczoge30KLS0tCiMgQ29ycmVzcG9uZGluZyBkZXN0aW5hdGlvbiBydWxlIHRvIGNvbmZpZ3VyZSBjbGllbnQgc2lkZSB0byB1c2UgbXV0dWFsIFRMUyB3aGVuIHRhbGtpbmcgdG8KIyBhbnkgc2VydmljZSAoaG9zdCkgaW4gdGhlIG1lc2guCmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogRGVzdGluYXRpb25SdWxlCm1ldGFkYXRhOgogIG5hbWU6ICJkZWZhdWx0IgogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tc2VjdXJpdHkKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICBob3N0OiAiKi5sb2NhbCIKICB0cmFmZmljUG9saWN5OgogICAgdGxzOgogICAgICBtb2RlOiBJU1RJT19NVVRVQUwKLS0tCiMgRGVzdGluYXRpb24gcnVsZSB0byBkaXNsYWJlIChtKVRMUyB3aGVuIHRhbGtpbmcgdG8gQVBJIHNlcnZlciwgYXMgQVBJIHNlcnZlciBkb2Vzbid0IGhhdmUgc2lkZWNhci4KIyBDdXN0b21lciBzaG91bGQgYWRkIHNpbWlsYXIgZGVzdGluYXRpb24gcnVsZXMgZm9yIG90aGVyIHNlcnZpY2VzIHRoYXQgZG9udCcgaGF2ZSBzaWRlY2FyLgphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IERlc3RpbmF0aW9uUnVsZQptZXRhZGF0YToKICBuYW1lOiAiYXBpLXNlcnZlciIKICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXNlY3VyaXR5CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CnNwZWM6CiAgaG9zdDogImt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbCIKICB0cmFmZmljUG9saWN5OgogICAgdGxzOgogICAgICBtb2RlOiBESVNBQkxFCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/security/templates/enable-mesh-permissive.yaml",
          "fileContents": "e3sgZGVmaW5lICJzZWN1cml0eS1wZXJtaXNzaXZlLnlhbWwudHBsIiB9fQojIEF1dGhlbnRpY2F0aW9uIHBvbGljeSB0byBlbmFibGUgcGVybWlzc2l2ZSBtb2RlIGZvciBhbGwgc2VydmljZXMgKHRoYXQgaGF2ZSBzaWRlY2FyKSBpbiB0aGUgbWVzaC4KYXBpVmVyc2lvbjogImF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExIgpraW5kOiAiTWVzaFBvbGljeSIKbWV0YWRhdGE6CiAgbmFtZTogImRlZmF1bHQiCiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1zZWN1cml0eQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQpzcGVjOgogIHBlZXJzOgogIC0gbXRsczoKICAgICAgbW9kZTogUEVSTUlTU0lWRQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/security/templates/meshexpansion.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLm1lc2hFeHBhbnNpb24gfX0KCmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogVmlydHVhbFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogbWVzaGV4cGFuc2lvbi1jaXRhZGVsCnNwZWM6CiAgaG9zdHM6CiAgLSAiaXN0aW8tY2l0YWRlbC5pc3Rpby1zeXN0ZW0iCiAgZ2F0ZXdheXM6CiAgLSBtZXNoZXhwYW5zaW9uLWdhdGV3YXkKICB0Y3A6CiAgLSBtYXRjaDoKICAgIC0gcG9ydDogODA2MAogICAgcm91dGU6CiAgICAtIGRlc3RpbmF0aW9uOgogICAgICAgIGhvc3Q6IGlzdGlvLWNpdGFkZWwuaXN0aW8tc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2FsCiAgICAgICAgcG9ydDoKICAgICAgICAgIG51bWJlcjogODA2MAoKe3stIGVuZCB9fQoKLS0tCgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwubWVzaEV4cGFuc2lvbklMQiB9fQoKYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBWaXJ0dWFsU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBtZXNoZXhwYW5zaW9uLWlsYi1jaXRhZGVsCnNwZWM6CiAgaG9zdHM6CiAgLSAiaXN0aW8tY2l0YWRlbC5pc3Rpby1zeXN0ZW0iCiAgZ2F0ZXdheXM6CiAgLSBtZXNoZXhwYW5zaW9uLWlsYi1nYXRld2F5CiAgdGNwOgogIC0gbWF0Y2g6CiAgICAtIHBvcnQ6IDgwNjAKICAgIHJvdXRlOgogICAgLSBkZXN0aW5hdGlvbjoKICAgICAgICBob3N0OiBpc3Rpby1jaXRhZGVsLmlzdGlvLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbAogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDgwNjAKCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/security/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICAjIHdlIHVzZSB0aGUgbm9ybWFsIG5hbWUgaGVyZSAoZS5nLiAncHJvbWV0aGV1cycpCiAgIyBhcyBncmFmYW5hIGlzIGNvbmZpZ3VyZWQgdG8gdXNlIHRoaXMgYXMgYSBkYXRhIHNvdXJjZQogIG5hbWU6IGlzdGlvLWNpdGFkZWwKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tY2l0YWRlbApzcGVjOgogIHBvcnRzOgogICAgLSBuYW1lOiBncnBjLWNpdGFkZWwKICAgICAgcG9ydDogODA2MAogICAgICB0YXJnZXRQb3J0OiA4MDYwCiAgICAgIHByb3RvY29sOiBUQ1AKICAgIC0gbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgICAgIHBvcnQ6IDkwOTMKICBzZWxlY3RvcjoKICAgIGlzdGlvOiBjaXRhZGVsCg=="
        },
        {
          "filePath": "charts/security/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWNpdGFkZWwtc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cg=="
        },
        {
          "filePath": "charts/servicegraph/.helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "charts/servicegraph/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBzZXJ2aWNlZ3JhcGgKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCg=="
        },
        {
          "filePath": "charts/servicegraph/templates/NOTES.txt",
          "fileContents": "MS4gR2V0IHRoZSBhcHBsaWNhdGlvbiBVUkwgYnkgcnVubmluZyB0aGVzZSBjb21tYW5kczoKe3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIH19Cnt7LSByYW5nZSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICBodHRwOi8ve3sgLiB9fQp7ey0gZW5kIH19Cnt7LSBlbHNlIGlmIGNvbnRhaW5zICJOb2RlUG9ydCIgLlZhbHVlcy5zZXJ2aWNlLnR5cGUgfX0KICBleHBvcnQgTk9ERV9QT1JUPSQoa3ViZWN0bCBnZXQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7LnNwZWMucG9ydHNbMF0ubm9kZVBvcnR9IiBzZXJ2aWNlcyB7eyB0ZW1wbGF0ZSAic2VydmljZWdyYXBoLmZ1bGxuYW1lIiAuIH19KQogIGV4cG9ydCBOT0RFX0lQPSQoa3ViZWN0bCBnZXQgbm9kZXMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7Lml0ZW1zWzBdLnN0YXR1cy5hZGRyZXNzZXNbMF0uYWRkcmVzc30iKQogIGVjaG8gaHR0cDovLyROT0RFX0lQOiROT0RFX1BPUlQKe3stIGVsc2UgaWYgY29udGFpbnMgIkxvYWRCYWxhbmNlciIgLlZhbHVlcy5zZXJ2aWNlLnR5cGUgfX0KICAgICBOT1RFOiBJdCBtYXkgdGFrZSBhIGZldyBtaW51dGVzIGZvciB0aGUgTG9hZEJhbGFuY2VyIElQIHRvIGJlIGF2YWlsYWJsZS4KICAgICAgICAgICBZb3UgY2FuIHdhdGNoIHRoZSBzdGF0dXMgb2YgYnkgcnVubmluZyAna3ViZWN0bCBnZXQgc3ZjIC13IHt7IHRlbXBsYXRlICJzZXJ2aWNlZ3JhcGguZnVsbG5hbWUiIC4gfX0nCiAgZXhwb3J0IFNFUlZJQ0VfSVA9JChrdWJlY3RsIGdldCBzdmMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IHt7IHRlbXBsYXRlICJzZXJ2aWNlZ3JhcGguZnVsbG5hbWUiIC4gfX0gLW8ganNvbnBhdGg9J3suc3RhdHVzLmxvYWRCYWxhbmNlci5pbmdyZXNzWzBdLmlwfScpCiAgZWNobyBodHRwOi8vJFNFUlZJQ0VfSVA6e3sgLlZhbHVlcy5zZXJ2aWNlLmV4dGVybmFsUG9ydCB9fQp7ey0gZWxzZSBpZiBjb250YWlucyAiQ2x1c3RlcklQIiAuVmFsdWVzLnNlcnZpY2UudHlwZSB9fQogIGV4cG9ydCBQT0RfTkFNRT0kKGt1YmVjdGwgZ2V0IHBvZHMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1sICJhcHA9e3sgdGVtcGxhdGUgInNlcnZpY2VncmFwaC5uYW1lIiAuIH19LHJlbGVhc2U9e3sgLlJlbGVhc2UuTmFtZSB9fSIgLW8ganNvbnBhdGg9InsuaXRlbXNbMF0ubWV0YWRhdGEubmFtZX0iKQogIGVjaG8gIlZpc2l0IGh0dHA6Ly8xMjcuMC4wLjE6ODA4MCB0byB1c2UgeW91ciBhcHBsaWNhdGlvbiIKICBrdWJlY3RsIHBvcnQtZm9yd2FyZCAkUE9EX05BTUUgODA4MDp7eyAuVmFsdWVzLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/servicegraph/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAic2VydmljZWdyYXBoLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJzZXJ2aWNlZ3JhcGguZnVsbG5hbWUiIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/servicegraph/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogc2VydmljZWdyYXBoCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZXJ2aWNlZ3JhcGgubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHNlcnZpY2VncmFwaAogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBzZXJ2aWNlZ3JhcGgKICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7IC5WYWx1ZXMuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19IgogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxQb2xpY3kgfX0KICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IHt7IC5WYWx1ZXMuc2VydmljZS5pbnRlcm5hbFBvcnQgfX0KICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAtIC0tcHJvbWV0aGV1c0FkZHI9aHR0cDovL3Byb21ldGhldXM6OTA5MAogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvZ3JhcGgKICAgICAgICAgICAgICBwb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19CiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvZ3JhcGgKICAgICAgICAgICAgICBwb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19CiAgICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVuZCB9fQogICAgICBhZmZpbml0eToKICAgICAge3stIGluY2x1ZGUgIm5vZGVhZmZpbml0eSIgLiB8IGluZGVudCA2IH19Cg=="
        },
        {
          "filePath": "charts/servicegraph/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQp7ey0gJHNlcnZpY2VOYW1lIDo9IGluY2x1ZGUgInNlcnZpY2VncmFwaC5mdWxsbmFtZSIgLiAtfX0Ke3stICRzZXJ2aWNlUG9ydCA6PSAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxQb3J0IC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAic2VydmljZWdyYXBoLmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZXJ2aWNlZ3JhcGgubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogIGFubm90YXRpb25zOgogICAge3stIHJhbmdlICRrZXksICR2YWx1ZSA6PSAuVmFsdWVzLmluZ3Jlc3MuYW5ub3RhdGlvbnMgfX0KICAgICAge3sgJGtleSB9fToge3sgJHZhbHVlIHwgcXVvdGUgfX0KICAgIHt7LSBlbmQgfX0Kc3BlYzoKICBydWxlczoKICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIC0gaG9zdDoge3sgJGhvc3QgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDogLwogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB7eyAkc2VydmljZU5hbWUgfX0KICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDoge3sgJHNlcnZpY2VQb3J0IH19CiAgICB7ey0gZW5kIC19fQogIHt7LSBpZiAuVmFsdWVzLmluZ3Jlc3MudGxzIH19CiAgdGxzOgp7eyB0b1lhbWwgLlZhbHVlcy5pbmdyZXNzLnRscyB8IGluZGVudCA0IH19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/servicegraph/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBzZXJ2aWNlZ3JhcGgKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGFubm90YXRpb25zOgogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5zZXJ2aWNlLmFubm90YXRpb25zIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CiAgbGFiZWxzOgogICAgYXBwOiBzZXJ2aWNlZ3JhcGgKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Kc3BlYzoKICB0eXBlOiB7eyAuVmFsdWVzLnNlcnZpY2UudHlwZSB9fQogIHBvcnRzOgogICAgLSBwb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxQb3J0IH19CiAgICAgIHRhcmdldFBvcnQ6IHt7IC5WYWx1ZXMuc2VydmljZS5pbnRlcm5hbFBvcnQgfX0KICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiB7eyAuVmFsdWVzLnNlcnZpY2UubmFtZSB9fQogIHNlbGVjdG9yOgogICAgYXBwOiBzZXJ2aWNlZ3JhcGgK"
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogc2lkZWNhckluamVjdG9yV2ViaG9vawp2ZXJzaW9uOiAxLjAuMwphcHBWZXJzaW9uOiAxLjAuMwp0aWxsZXJWZXJzaW9uOiAiPj0yLjcuMiIKZGVzY3JpcHRpb246IEhlbG0gY2hhcnQgZm9yIHNpZGVjYXIgaW5qZWN0b3Igd2ViaG9vayBkZXBsb3ltZW50CmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHNpZGVjYXJJbmplY3RvcldlYmhvb2sKc291cmNlczoKICAtIGh0dHA6Ly9naXRodWIuY29tL2lzdGlvL2lzdGlvCmVuZ2luZTogZ290cGwKaWNvbjogaHR0cHM6Ly9pc3Rpby5pby9mYXZpY29ucy9hbmRyb2lkLTE5MngxOTIucG5nCg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/OWNERS",
          "fileContents": "YXBwcm92ZXJzOgogIC0gYXlqCiAgLSBvc3Ryb21hcnQK"
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAic2lkZWNhci1pbmplY3Rvci5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAic2lkZWNhci1pbmplY3Rvci5mdWxsbmFtZSIgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3Ite3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyIqIl0KICByZXNvdXJjZXM6IFsiY29uZmlnbWFwcyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQotIGFwaUdyb3VwczogWyJhZG1pc3Npb25yZWdpc3RyYXRpb24uazhzLmlvIl0KICByZXNvdXJjZXM6IFsibXV0YXRpbmd3ZWJob29rY29uZmlndXJhdGlvbnMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIiwgInBhdGNoIl0K"
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yLWFkbWluLXJvbGUtYmluZGluZy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3IKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3Rvci17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3Rvci1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3RvcgogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2lkZWNhci1pbmplY3Rvci5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3Rpbzogc2lkZWNhci1pbmplY3RvcgpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBpc3Rpbzogc2lkZWNhci1pbmplY3RvcgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogIiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3Rvci1zZXJ2aWNlLWFjY291bnQKIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBzaWRlY2FyLWluamVjdG9yLXdlYmhvb2sKICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7IC5WYWx1ZXMuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19IgogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxQb2xpY3kgfX0KICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAgIC0gLS1jYUNlcnRGaWxlPS9ldGMvaXN0aW8vY2VydHMvcm9vdC1jZXJ0LnBlbQogICAgICAgICAgICAtIC0tdGxzQ2VydEZpbGU9L2V0Yy9pc3Rpby9jZXJ0cy9jZXJ0LWNoYWluLnBlbQogICAgICAgICAgICAtIC0tdGxzS2V5RmlsZT0vZXRjL2lzdGlvL2NlcnRzL2tleS5wZW0KICAgICAgICAgICAgLSAtLWluamVjdENvbmZpZz0vZXRjL2lzdGlvL2luamVjdC9jb25maWcKICAgICAgICAgICAgLSAtLW1lc2hDb25maWc9L2V0Yy9pc3Rpby9jb25maWcvbWVzaAogICAgICAgICAgICAtIC0taGVhbHRoQ2hlY2tJbnRlcnZhbD0ycwogICAgICAgICAgICAtIC0taGVhbHRoQ2hlY2tGaWxlPS9oZWFsdGgKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgIC0gbmFtZTogY29uZmlnLXZvbHVtZQogICAgICAgICAgICBtb3VudFBhdGg6IC9ldGMvaXN0aW8vY29uZmlnCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAtIG5hbWU6IGNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9jZXJ0cwogICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgLSBuYW1lOiBpbmplY3QtY29uZmlnCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9pbmplY3QKICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc2lkZWNhci1pbmplY3RvcgogICAgICAgICAgICAgICAgLSBwcm9iZQogICAgICAgICAgICAgICAgLSAtLXByb2JlLXBhdGg9L2hlYWx0aAogICAgICAgICAgICAgICAgLSAtLWludGVydmFsPTRzCiAgICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDQKICAgICAgICAgICAgcGVyaW9kU2Vjb25kczogNAogICAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc2lkZWNhci1pbmplY3RvcgogICAgICAgICAgICAgICAgLSBwcm9iZQogICAgICAgICAgICAgICAgLSAtLXByb2JlLXBhdGg9L2hlYWx0aAogICAgICAgICAgICAgICAgLSAtLWludGVydmFsPTRzCiAgICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDQKICAgICAgICAgICAgcGVyaW9kU2Vjb25kczogNAogICAgICAgICAgcmVzb3VyY2VzOgp7ey0gaWYgLlZhbHVlcy5yZXNvdXJjZXMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMucmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbHNlIH19Cnt7IHRvWWFtbCAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbmQgfX0KICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogaXN0aW8KICAgICAgLSBuYW1lOiBjZXJ0cwogICAgICAgIHNlY3JldDoKICAgICAgICAgIHNlY3JldE5hbWU6IGlzdGlvLmlzdGlvLXNpZGVjYXItaW5qZWN0b3Itc2VydmljZS1hY2NvdW50CiAgICAgIC0gbmFtZTogaW5qZWN0LWNvbmZpZwogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3IKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgLSBrZXk6IGNvbmZpZwogICAgICAgICAgICBwYXRoOiBjb25maWcKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQo="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/mutatingwebhook.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IE11dGF0aW5nV2ViaG9va0NvbmZpZ3VyYXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3RvcgogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CndlYmhvb2tzOgogIC0gbmFtZTogc2lkZWNhci1pbmplY3Rvci5pc3Rpby5pbwogICAgY2xpZW50Q29uZmlnOgogICAgICBzZXJ2aWNlOgogICAgICAgIG5hbWU6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3IKICAgICAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgICAgIHBhdGg6ICIvaW5qZWN0IgogICAgICBjYUJ1bmRsZTogIiIKICAgIHJ1bGVzOgogICAgICAtIG9wZXJhdGlvbnM6IFsgIkNSRUFURSIgXQogICAgICAgIGFwaUdyb3VwczogWyIiXQogICAgICAgIGFwaVZlcnNpb25zOiBbInYxIl0KICAgICAgICByZXNvdXJjZXM6IFsicG9kcyJdCiAgICBmYWlsdXJlUG9saWN5OiBGYWlsCiAgICBuYW1lc3BhY2VTZWxlY3RvcjoKe3stIGlmIC5WYWx1ZXMuZW5hYmxlTmFtZXNwYWNlc0J5RGVmYXVsdCB9fQogICAgICBtYXRjaEV4cHJlc3Npb25zOgogICAgICAtIGtleTogaXN0aW8taW5qZWN0aW9uCiAgICAgICAgb3BlcmF0b3I6IE5vdEluCiAgICAgICAgdmFsdWVzOgogICAgICAgIC0gZGlzYWJsZWQKe3stIGVsc2UgfX0KICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgaXN0aW8taW5qZWN0aW9uOiBlbmFibGVkCnt7LSBlbmQgfX0KCg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBpc3Rpbzogc2lkZWNhci1pbmplY3RvcgpzcGVjOgogIHBvcnRzOgogIC0gcG9ydDogNDQzCiAgc2VsZWN0b3I6CiAgICBpc3Rpbzogc2lkZWNhci1pbmplY3Rvcgo="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3Itc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3IKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0K"
        },
        {
          "filePath": "charts/telemetry-gateway/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogdGVsZW1ldHJ5LWdhdGV3YXkKdmVyc2lvbjogMS4wLjMKYXBwVmVyc2lvbjogMS4wLjMKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBjb25maWd1cmluZyBhIGdhdGV3YXkgZm9yIElzdGlvIHRlbGVtZXRyeSBhZGRvbnMKaWNvbjogaHR0cHM6Ly9pc3Rpby5pby9mYXZpY29ucy9hbmRyb2lkLTE5MngxOTIucG5nCg=="
        },
        {
          "filePath": "charts/telemetry-gateway/templates/gateway.yaml",
          "fileContents": "e3stIGlmIG9yICguVmFsdWVzLnByb21ldGhldXNFbmFibGVkKSAoLlZhbHVlcy5ncmFmYW5hRW5hYmxlZCkgfX0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBHYXRld2F5Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXRlbGVtZXRyeS1nYXRld2F5CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIGlzdGlvOiB7eyAuVmFsdWVzLmdhdGV3YXlOYW1lIH19CiAgc2VydmVyczoKICB7ey0gaWYgLlZhbHVlcy5wcm9tZXRoZXVzRW5hYmxlZCB9fQogIC0gcG9ydDoKICAgICAgbnVtYmVyOiAxNTAzMAogICAgICBuYW1lOiBodHRwMi1wcm9tZXRoZXVzCiAgICAgIHByb3RvY29sOiBIVFRQMgogICAgaG9zdHM6CiAgICAtICIqIgogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5ncmFmYW5hRW5hYmxlZCB9fQogIC0gcG9ydDoKICAgICAgbnVtYmVyOiAxNTAzMQogICAgICBuYW1lOiBodHRwMi1ncmFmYW5hCiAgICAgIHByb3RvY29sOiBIVFRQMgogICAgaG9zdHM6CiAgICAtICIqIgogIHt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuZ3JhZmFuYUVuYWJsZWQgfX0KLS0tCmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogRGVzdGluYXRpb25SdWxlCm1ldGFkYXRhOgogIG5hbWU6IGdyYWZhbmEKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogIGhvc3Q6IGdyYWZhbmEue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsCiAgdHJhZmZpY1BvbGljeToKICAgIHRsczoKICAgICAgbW9kZTogRElTQUJMRQp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLnByb21ldGhldXNFbmFibGVkIH19Ci0tLQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IERlc3RpbmF0aW9uUnVsZQptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3BlYzoKICBob3N0OiBwcm9tZXRoZXVzLnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMuY2x1c3Rlci5sb2NhbAogIHRyYWZmaWNQb2xpY3k6CiAgICB0bHM6CiAgICAgIG1vZGU6IERJU0FCTEUKe3stIGVuZCB9fSAgICAgIAotLS0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBWaXJ0dWFsU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB0ZWxlbWV0cnktdmlydHVhbC1zZXJ2aWNlCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3BlYzoKICBob3N0czoKICAtICIqIgogIGdhdGV3YXlzOgogIC0gaXN0aW8tdGVsZW1ldHJ5LWdhdGV3YXkKICBodHRwOgogIHt7LSBpZiAuVmFsdWVzLnByb21ldGhldXNFbmFibGVkIH19CiAgLSBtYXRjaDoKICAgIC0gcG9ydDogMTUwMzAKICAgIHJvdXRlOgogICAgLSBkZXN0aW5hdGlvbjoKICAgICAgICBob3N0OiBwcm9tZXRoZXVzLnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMuY2x1c3Rlci5sb2NhbAogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDkwOTAKICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuZ3JhZmFuYUVuYWJsZWQgfX0KICAtIG1hdGNoOgogICAgLSBwb3J0OiAxNTAzMQogICAgcm91dGU6CiAgICAtIGRlc3RpbmF0aW9uOgogICAgICAgIGhvc3Q6IGdyYWZhbmEue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsCiAgICAgICAgcG9ydDoKICAgICAgICAgIG51bWJlcjogMzAwMAogIHt7LSBlbmQgfX0KLS0tCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/tracing/.helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "charts/tracing/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiB0cmFjaW5nCnZlcnNpb246IDEuMC4zCmFwcFZlcnNpb246IDEuNS4xCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/tracing/templates/NOTES.txt",
          "fileContents": "MS4gR2V0IHRoZSBhcHBsaWNhdGlvbiBVUkwgYnkgcnVubmluZyB0aGVzZSBjb21tYW5kczoKe3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIH19Cnt7LSByYW5nZSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICBodHRwOi8ve3sgLiB9fQp7ey0gZW5kIH19Cnt7LSBlbHNlIGlmIGNvbnRhaW5zICJOb2RlUG9ydCIgLlZhbHVlcy5zZXJ2aWNlLnR5cGUgfX0KICBleHBvcnQgTk9ERV9QT1JUPSQoa3ViZWN0bCBnZXQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7LnNwZWMucG9ydHNbMF0ubm9kZVBvcnR9IiBzZXJ2aWNlcyB6aXBraW4pCiAgZXhwb3J0IE5PREVfSVA9JChrdWJlY3RsIGdldCBub2RlcyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gLW8ganNvbnBhdGg9InsuaXRlbXNbMF0uc3RhdHVzLmFkZHJlc3Nlc1swXS5hZGRyZXNzfSIpCiAgZWNobyBodHRwOi8vJE5PREVfSVA6JE5PREVfUE9SVAp7ey0gZWxzZSBpZiBjb250YWlucyAiTG9hZEJhbGFuY2VyIiAuVmFsdWVzLnNlcnZpY2UudHlwZSB9fQogICAgIE5PVEU6IEl0IG1heSB0YWtlIGEgZmV3IG1pbnV0ZXMgZm9yIHRoZSBMb2FkQmFsYW5jZXIgSVAgdG8gYmUgYXZhaWxhYmxlLgogICAgICAgICAgIFlvdSBjYW4gd2F0Y2ggdGhlIHN0YXR1cyBvZiBieSBydW5uaW5nICdrdWJlY3RsIGdldCBzZXJ2aWNlcyAtdyB6aXBraW4nCiAgZXhwb3J0IFNFUlZJQ0VfSVA9JChrdWJlY3RsIGdldCBzZXJ2aWNlcyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gemlwa2luIC1vIGpzb25wYXRoPSd7LnN0YXR1cy5sb2FkQmFsYW5jZXIuaW5ncmVzc1swXS5pcH0nKQogIGVjaG8gaHR0cDovLyRTRVJWSUNFX0lQOnt7IC5WYWx1ZXMuc2VydmljZS5leHRlcm5hbFBvcnQgfX0Ke3stIGVsc2UgaWYgY29udGFpbnMgIkNsdXN0ZXJJUCIgLlZhbHVlcy5zZXJ2aWNlLnR5cGUgfX0KICBleHBvcnQgUE9EX05BTUU9JChrdWJlY3RsIGdldCBwb2RzIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSAtbCAiYXBwPXt7IHRlbXBsYXRlICJ6aXBraW4ubmFtZSIgLiB9fSxyZWxlYXNlPXt7IC5SZWxlYXNlLk5hbWUgfX0iIC1vIGpzb25wYXRoPSJ7Lml0ZW1zWzBdLm1ldGFkYXRhLm5hbWV9IikKICBlY2hvICJWaXNpdCBodHRwOi8vMTI3LjAuMC4xOjgwODAgdG8gdXNlIHlvdXIgYXBwbGljYXRpb24iCiAga3ViZWN0bCBwb3J0LWZvcndhcmQgJFBPRF9OQU1FIDgwODA6e3sgLlZhbHVlcy5zZXJ2aWNlLmludGVybmFsUG9ydCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/tracing/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiemlwa2luLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJ6aXBraW4uZnVsbG5hbWUiIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/tracing/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tdHJhY2luZwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby10cmFjaW5nCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CnNwZWM6CiAgcmVwbGljYXM6IHt7IC5WYWx1ZXMucmVwbGljYUNvdW50IH19CiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogamFlZ2VyCiAgICAgIGFubm90YXRpb25zOgogICAgICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICAgICAgc2NoZWR1bGVyLmFscGhhLmt1YmVybmV0ZXMuaW8vY3JpdGljYWwtcG9kOiAiIgogICAgc3BlYzoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGphZWdlcgogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmphZWdlci5odWIgfX0vYWxsLWluLW9uZTp7eyAuVmFsdWVzLmphZWdlci50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLmludGVybmFsUG9ydCB9fQogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IHt7IC5WYWx1ZXMuamFlZ2VyLnVpLnBvcnQgfX0KICAgICAgICAgICAgLSBjb250YWluZXJQb3J0OiA1Nzc1CiAgICAgICAgICAgICAgcHJvdG9jb2w6IFVEUAogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDY4MzEKICAgICAgICAgICAgICBwcm90b2NvbDogVURQCiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogNjgzMgogICAgICAgICAgICAgIHByb3RvY29sOiBVRFAKICAgICAgICAgIGVudjoKICAgICAgICAgIC0gbmFtZTogUE9EX05BTUVTUEFDRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lc3BhY2UKICAgICAgICAgIC0gbmFtZTogQ09MTEVDVE9SX1pJUEtJTl9IVFRQX1BPUlQKICAgICAgICAgICAgdmFsdWU6ICJ7eyAuVmFsdWVzLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19IgogICAgICAgICAgLSBuYW1lOiBNRU1PUllfTUFYX1RSQUNFUwogICAgICAgICAgICB2YWx1ZTogInt7IC5WYWx1ZXMuamFlZ2VyLm1lbW9yeS5tYXhfdHJhY2VzIH19IgogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvCiAgICAgICAgICAgICAgcG9ydDoge3sgLlZhbHVlcy5qYWVnZXIudWkucG9ydCB9fQogICAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuamFlZ2VyLnVpLnBvcnQgfX0KICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/tracing/templates/ingress-jaeger.yaml",
          "fileContents": "e3sgaWYgKC5WYWx1ZXMuamFlZ2VyLmluZ3Jlc3MuZW5hYmxlZCkgYW5kIGVxIC5WYWx1ZXMucHJvdmlkZXIgImphZWdlciIgfX0Ke3stICRzZXJ2aWNlUG9ydCA6PSAuVmFsdWVzLmphZWdlci51aS5wb3J0IC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiBqYWVnZXItcXVlcnkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogamFlZ2VyCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuamFlZ2VyLmluZ3Jlc3MuYW5ub3RhdGlvbnMgfX0KICAgICAge3sgJGtleSB9fToge3sgJHZhbHVlIHwgcXVvdGUgfX0KICAgIHt7LSBlbmQgfX0Kc3BlYzoKICBydWxlczoKICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmphZWdlci5pbmdyZXNzLmhvc3RzIH19CiAgICAtIGhvc3Q6IHt7ICRob3N0IH19CiAgICAgIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIHBhdGg6IC8KICAgICAgICAgICAgYmFja2VuZDoKICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogamFlZ2VyLXF1ZXJ5CiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IHt7ICRzZXJ2aWNlUG9ydCB9fQogICAge3stIGVuZCAtfX0KICB7ey0gaWYgLlZhbHVlcy5qYWVnZXIuaW5ncmVzcy50bHMgfX0KICB0bHM6Cnt7IHRvWWFtbCAuVmFsdWVzLmphZWdlci5pbmdyZXNzLnRscyB8IGluZGVudCA0IH19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/tracing/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQp7ey0gJHNlcnZpY2VOYW1lIDo9ICJ6aXBraW4iIC19fQp7ey0gJHNlcnZpY2VQb3J0IDo9IC5WYWx1ZXMuc2VydmljZS5leHRlcm5hbFBvcnQgLX19CmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJ6aXBraW4uZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInppcGtpbi5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucyB9fQogICAgICB7eyAka2V5IH19OiB7eyAkdmFsdWUgfCBxdW90ZSB9fQogICAge3stIGVuZCB9fQpzcGVjOgogIHJ1bGVzOgogICAge3stIHJhbmdlICRob3N0IDo9IC5WYWx1ZXMuaW5ncmVzcy5ob3N0cyB9fQogICAgLSBob3N0OiB7eyAkaG9zdCB9fQogICAgICBodHRwOgogICAgICAgIHBhdGhzOgogICAgICAgICAgLSBwYXRoOiAvCiAgICAgICAgICAgIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHt7ICRzZXJ2aWNlTmFtZSB9fQogICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiB7eyAkc2VydmljZVBvcnQgfX0KICAgIHt7LSBlbmQgLX19CiAge3stIGlmIC5WYWx1ZXMuaW5ncmVzcy50bHMgfX0KICB0bHM6Cnt7IHRvWWFtbCAuVmFsdWVzLmluZ3Jlc3MudGxzIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/tracing/templates/service-jaeger.yaml",
          "fileContents": "e3sgaWYgZXEgLlZhbHVlcy5wcm92aWRlciAiamFlZ2VyIiB9fQoKYXBpVmVyc2lvbjogdjEKa2luZDogTGlzdAppdGVtczoKLSBhcGlWZXJzaW9uOiB2MQogIGtpbmQ6IFNlcnZpY2UKICBtZXRhZGF0YToKICAgIG5hbWU6IGphZWdlci1xdWVyeQogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgIGFubm90YXRpb25zOgogICAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAuVmFsdWVzLnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICAgICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAgICB7ey0gZW5kIH19CiAgICBsYWJlbHM6CiAgICAgIGFwcDogamFlZ2VyCiAgICAgIGphZWdlci1pbmZyYTogamFlZ2VyLXNlcnZpY2UKICAgICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICBzcGVjOgogICAgcG9ydHM6CiAgICAgIC0gbmFtZTogcXVlcnktaHR0cAogICAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuamFlZ2VyLnVpLnBvcnQgfX0KICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgdGFyZ2V0UG9ydDoge3sgLlZhbHVlcy5qYWVnZXIudWkucG9ydCB9fQogICAgc2VsZWN0b3I6CiAgICAgIGFwcDogamFlZ2VyCi0gYXBpVmVyc2lvbjogdjEKICBraW5kOiBTZXJ2aWNlCiAgbWV0YWRhdGE6CiAgICBuYW1lOiBqYWVnZXItY29sbGVjdG9yCiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgbGFiZWxzOgogICAgICBhcHA6IGphZWdlcgogICAgICBqYWVnZXItaW5mcmE6IGNvbGxlY3Rvci1zZXJ2aWNlCiAgICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgc3BlYzoKICAgIHBvcnRzOgogICAgLSBuYW1lOiBqYWVnZXItY29sbGVjdG9yLXRjaGFubmVsCiAgICAgIHBvcnQ6IDE0MjY3CiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgdGFyZ2V0UG9ydDogMTQyNjcKICAgIC0gbmFtZTogamFlZ2VyLWNvbGxlY3Rvci1odHRwCiAgICAgIHBvcnQ6IDE0MjY4CiAgICAgIHRhcmdldFBvcnQ6IDE0MjY4CiAgICAgIHByb3RvY29sOiBUQ1AKICAgIHNlbGVjdG9yOgogICAgICBhcHA6IGphZWdlcgogICAgdHlwZTogQ2x1c3RlcklQCi0gYXBpVmVyc2lvbjogdjEKICBraW5kOiBTZXJ2aWNlCiAgbWV0YWRhdGE6CiAgICBuYW1lOiBqYWVnZXItYWdlbnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICBsYWJlbHM6CiAgICAgIGFwcDogamFlZ2VyCiAgICAgIGphZWdlci1pbmZyYTogYWdlbnQtc2VydmljZQogICAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogIHNwZWM6CiAgICBwb3J0czoKICAgIC0gbmFtZTogYWdlbnQtemlwa2luLXRocmlmdAogICAgICBwb3J0OiA1Nzc1CiAgICAgIHByb3RvY29sOiBVRFAKICAgICAgdGFyZ2V0UG9ydDogNTc3NQogICAgLSBuYW1lOiBhZ2VudC1jb21wYWN0CiAgICAgIHBvcnQ6IDY4MzEKICAgICAgcHJvdG9jb2w6IFVEUAogICAgICB0YXJnZXRQb3J0OiA2ODMxCiAgICAtIG5hbWU6IGFnZW50LWJpbmFyeQogICAgICBwb3J0OiA2ODMyCiAgICAgIHByb3RvY29sOiBVRFAKICAgICAgdGFyZ2V0UG9ydDogNjgzMgogICAgY2x1c3RlcklQOiBOb25lCiAgICBzZWxlY3RvcjoKICAgICAgYXBwOiBqYWVnZXIKe3sgZW5kIH19Cgo="
        },
        {
          "filePath": "charts/tracing/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogTGlzdAppdGVtczoKLSBhcGlWZXJzaW9uOiB2MQogIGtpbmQ6IFNlcnZpY2UKICBtZXRhZGF0YToKICAgIG5hbWU6IHppcGtpbgogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgIGxhYmVsczoKICAgICAgYXBwOiBqYWVnZXIKICAgICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICBzcGVjOgogICAgdHlwZToge3sgLlZhbHVlcy5zZXJ2aWNlLnR5cGUgfX0KICAgIHBvcnRzOgogICAgICAtIHBvcnQ6IHt7IC5WYWx1ZXMuc2VydmljZS5leHRlcm5hbFBvcnQgfX0KICAgICAgICB0YXJnZXRQb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19CiAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgIG5hbWU6IHt7IC5WYWx1ZXMuc2VydmljZS5uYW1lIH19CiAgICBzZWxlY3RvcjoKICAgICAgYXBwOiBqYWVnZXIKLSBhcGlWZXJzaW9uOiB2MQogIGtpbmQ6IFNlcnZpY2UKICBtZXRhZGF0YToKICAgIG5hbWU6IHRyYWNpbmcKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICBhbm5vdGF0aW9uczoKICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5zZXJ2aWNlLmFubm90YXRpb25zIH19CiAgICAgIHt7ICRrZXkgfX06IHt7ICR2YWwgfX0KICAgICAge3stIGVuZCB9fQogICAgbGFiZWxzOgogICAgICBhcHA6IGphZWdlcgogICAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogIHNwZWM6CiAgICBwb3J0czoKICAgICAgLSBuYW1lOiBodHRwLXF1ZXJ5CiAgICAgICAgcG9ydDogODAKICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgdGFyZ2V0UG9ydDoge3sgLlZhbHVlcy5qYWVnZXIudWkucG9ydCB9fQogICAgc2VsZWN0b3I6CiAgICAgIGFwcDogamFlZ2VyCg=="
        },
        {
          "filePath": "requirements.yaml",
          "fileContents": "ZGVwZW5kZW5jaWVzOgogIC0gbmFtZTogc2lkZWNhckluamVjdG9yV2ViaG9vawogICAgdmVyc2lvbjogMS4wLjMKICAgIGNvbmRpdGlvbjogc2lkZWNhckluamVjdG9yV2ViaG9vay5lbmFibGVkCiAgLSBuYW1lOiBzZWN1cml0eQogICAgdmVyc2lvbjogMS4wLjMKICAgIGNvbmRpdGlvbjogc2VjdXJpdHkuZW5hYmxlZAogIC0gbmFtZTogaW5ncmVzcwogICAgdmVyc2lvbjogMS4wLjMKICAgIGNvbmRpdGlvbjogaW5ncmVzcy5lbmFibGVkCiAgLSBuYW1lOiBnYXRld2F5cwogICAgdmVyc2lvbjogMS4wLjMKICAgIGNvbmRpdGlvbjogZ2F0ZXdheXMuZW5hYmxlZAogIC0gbmFtZTogbWl4ZXIKICAgIHZlcnNpb246IDEuMC4zCiAgICBjb25kaXRpb246IG1peGVyLmVuYWJsZWQKICAtIG5hbWU6IHBpbG90CiAgICB2ZXJzaW9uOiAxLjAuMwogICAgY29uZGl0aW9uOiBwaWxvdC5lbmFibGVkCiAgLSBuYW1lOiBncmFmYW5hCiAgICB2ZXJzaW9uOiAxLjAuMwogICAgY29uZGl0aW9uOiBncmFmYW5hLmVuYWJsZWQKICAtIG5hbWU6IHByb21ldGhldXMKICAgIHZlcnNpb246IDEuMC4zCiAgICBjb25kaXRpb246IHByb21ldGhldXMuZW5hYmxlZAogIC0gbmFtZTogc2VydmljZWdyYXBoCiAgICB2ZXJzaW9uOiAxLjAuMwogICAgY29uZGl0aW9uOiBzZXJ2aWNlZ3JhcGguZW5hYmxlZAogIC0gbmFtZTogdHJhY2luZwogICAgdmVyc2lvbjogMS4wLjMKICAgIGNvbmRpdGlvbjogdHJhY2luZy5lbmFibGVkCiAgLSBuYW1lOiBnYWxsZXkKICAgIHZlcnNpb246IDEuMC4zCiAgICBjb25kaXRpb246IGdhbGxleS5lbmFibGVkCiAgLSBuYW1lOiBraWFsaQogICAgdmVyc2lvbjogMS4wLjMKICAgIGNvbmRpdGlvbjoga2lhbGkuZW5hYmxlZAogIC0gbmFtZTogY2VydG1hbmFnZXIKICAgIHZlcnNpb246IDEuMC4zCiAgICBjb25kaXRpb246IGNlcnRtYW5hZ2VyLmVuYWJsZWQK"
        },
        {
          "filePath": "templates/NOTES.txt",
          "fileContents": "VGhhbmsgeW91IGZvciBpbnN0YWxsaW5nIHt7IC5DaGFydC5OYW1lIH19LgoKWW91ciByZWxlYXNlIGlzIG5hbWVkIHt7IC5SZWxlYXNlLk5hbWUgfX0uCgpUbyBnZXQgc3RhcnRlZCBydW5uaW5nIGFwcGxpY2F0aW9uIHdpdGggSXN0aW8sIGV4ZWN1dGUgdGhlIGZvbGxvd2luZyBzdGVwczoKCnt7LSBpZiBpbmRleCAuVmFsdWVzICJzaWRlY2FySW5qZWN0b3JXZWJob29rIiAiZW5hYmxlZCIgfX0KMS4gTGFiZWwgbmFtZXNwYWNlIHRoYXQgYXBwbGljYXRpb24gb2JqZWN0IHdpbGwgYmUgZGVwbG95ZWQgdG8gYnkgdGhlIGZvbGxvd2luZyBjb21tYW5kICh0YWtlIGRlZmF1bHQgbmFtZXNwYWNlIGFzIGFuIGV4YW1wbGUpCgokIGt1YmVjdGwgbGFiZWwgbmFtZXNwYWNlIGRlZmF1bHQgaXN0aW8taW5qZWN0aW9uPWVuYWJsZWQKJCBrdWJlY3RsIGdldCBuYW1lc3BhY2UgLUwgaXN0aW8taW5qZWN0aW9uCgoyLiBEZXBsb3kgeW91ciBhcHBsaWNhdGlvbnMKCiQga3ViZWN0bCBhcHBseSAtZiA8eW91ci1hcHBsaWNhdGlvbj4ueWFtbAp7ey0gZWxzZSB9fQoxLiBEb3dubG9hZCB0aGUgbGF0ZXN0IHJlbGVhc2UgcGFja2FnZSB0byBnZXQgc2lkZWNhciBpbmplY3Rpb24gdG9vbAoKJCBjdXJsIC1MIGh0dHBzOi8vZ2l0LmlvL2dldExhdGVzdElzdGlvIHwgc2ggLQokIG12IGlzdGlvLSogaXN0aW8tbGF0ZXN0CiQgZXhwb3J0IFBBVEg9IiRQQVRIOiRQV0QvaXN0aW8tbGF0ZXN0L2JpbiIKCjIuIERlcGxveSB5b3VyIGFwcGxpY2F0aW9uIGJ5IG1hbnVhbGx5IGluamVjdGluZyBlbnZveSBzaWRlY2FyIHdpdGggYGlzdGlvY3RsIGt1YmUtaW5qZWN0YAoKJCBrdWJlY3RsIGFwcGx5IC1mIDwoaXN0aW9jdGwga3ViZS1pbmplY3QgLWYgPHlvdXItYXBwbGljYXRpb24+LnlhbWwpCnt7LSBlbmQgfX0KCkZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHJ1bm5pbmcgSXN0aW8sIHZpc2l0OgpodHRwczovL2lzdGlvLmlvLw=="
        },
        {
          "filePath": "templates/_affinity.tpl",
          "fileContents": "e3svKiBhZmZpbml0eSAtIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vYXNzaWduLXBvZC1ub2RlLyAqL319Cgp7ey0gZGVmaW5lICJub2RlYWZmaW5pdHkiIH19CiAgbm9kZUFmZmluaXR5OgogICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSBpbmNsdWRlICJub2RlQWZmaW5pdHlSZXF1aXJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0KICAgIHByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAge3stIGluY2x1ZGUgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAibm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIiB9fQogICAgICBub2RlU2VsZWN0b3JUZXJtczoKICAgICAgLSBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgIC0ga2V5OiBiZXRhLmt1YmVybmV0ZXMuaW8vYXJjaAogICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICB2YWx1ZXM6CiAgICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAgICAgICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAgICAgICAtIHt7ICRrZXkgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBkZWZpbmUgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIH19CiAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAtIHdlaWdodDoge3sgJHZhbCB8IGludCB9fQogICAgICBwcmVmZXJlbmNlOgogICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgLSBrZXk6IGJldGEua3ViZXJuZXRlcy5pby9hcmNoCiAgICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICAgIHZhbHVlczoKICAgICAgICAgIC0ge3sgJGtleSB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQ=="
        },
        {
          "filePath": "templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiaXN0aW8ubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgoqL319Cnt7LSBkZWZpbmUgImlzdGlvLmZ1bGxuYW1lIiAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZnVsbHkgcXVhbGlmaWVkIGNvbmZpZ21hcCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgImlzdGlvLmNvbmZpZ21hcC5mdWxsbmFtZSIgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICJpc3Rpby1tZXNoLWNvbmZpZyIgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDb25maWdtYXAgY2hlY2tzdW0uCiovfX0Ke3stIGRlZmluZSAiaXN0aW8uY29uZmlnbWFwLmNoZWNrc3VtIiAtfX0Ke3stIHByaW50ICQuVGVtcGxhdGUuQmFzZVBhdGggIi9jb25maWdtYXAueWFtbCIgfCBzaGEyNTZzdW0gLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/configmap.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucGlsb3QuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImlzdGlvLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KZGF0YToKICBtZXNoOiB8LQogICAgIyBTZXQgdGhlIGZvbGxvd2luZyB2YXJpYWJsZSB0byB0cnVlIHRvIGRpc2FibGUgcG9saWN5IGNoZWNrcyBieSB0aGUgTWl4ZXIuCiAgICAjIE5vdGUgdGhhdCBtZXRyaWNzIHdpbGwgc3RpbGwgYmUgcmVwb3J0ZWQgdG8gdGhlIE1peGVyLgogICAgZGlzYWJsZVBvbGljeUNoZWNrczoge3sgLlZhbHVlcy5nbG9iYWwuZGlzYWJsZVBvbGljeUNoZWNrcyB9fQoKICAgICMgU2V0IGVuYWJsZVRyYWNpbmcgdG8gZmFsc2UgdG8gZGlzYWJsZSByZXF1ZXN0IHRyYWNpbmcuCiAgICBlbmFibGVUcmFjaW5nOiB7eyAuVmFsdWVzLmdsb2JhbC5lbmFibGVUcmFjaW5nIH19CgogICAgIyBTZXQgYWNjZXNzTG9nRmlsZSB0byBlbXB0eSBzdHJpbmcgdG8gZGlzYWJsZSBhY2Nlc3MgbG9nLgogICAgYWNjZXNzTG9nRmlsZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmFjY2Vzc0xvZ0ZpbGUgfX0iCiAgICAjCiAgICAjIERlcHJlY2F0ZWQ6IG1peGVyIGlzIHVzaW5nIEVEUwogICAge3stIGlmIC5WYWx1ZXMubWl4ZXIuZW5hYmxlZCB9fQogICAge3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCB9fQogICAgbWl4ZXJDaGVja1NlcnZlcjogaXN0aW8tcG9saWN5Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMuY2x1c3Rlci5sb2NhbDoxNTAwNAogICAgbWl4ZXJSZXBvcnRTZXJ2ZXI6IGlzdGlvLXRlbGVtZXRyeS57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0uc3ZjLmNsdXN0ZXIubG9jYWw6MTUwMDQKICAgIHt7LSBlbHNlIH19CiAgICBtaXhlckNoZWNrU2VydmVyOiBpc3Rpby1wb2xpY3kue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsOjkwOTEKICAgIG1peGVyUmVwb3J0U2VydmVyOiBpc3Rpby10ZWxlbWV0cnkue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsOjkwOTEKICAgIHt7LSBlbmQgfX0KCiAgICAjIHBvbGljeUNoZWNrRmFpbE9wZW4gYWxsb3dzIHRyYWZmaWMgaW4gY2FzZXMgd2hlbiB0aGUgbWl4ZXIgcG9saWN5IHNlcnZpY2UgY2Fubm90IGJlIHJlYWNoZWQuCiAgICAjIERlZmF1bHQgaXMgZmFsc2Ugd2hpY2ggbWVhbnMgdGhlIHRyYWZmaWMgaXMgZGVuaWVkIHdoZW4gdGhlIGNsaWVudCBpcyB1bmFibGUgdG8gY29ubmVjdCB0byBNaXhlci4KICAgIHBvbGljeUNoZWNrRmFpbE9wZW46IHt7IC5WYWx1ZXMuZ2xvYmFsLnBvbGljeUNoZWNrRmFpbE9wZW4gfX0KICAgIHt7LSBlbmQgfX0KCiAgICB7ey0gaWYgLlZhbHVlcy5pbmdyZXNzLmVuYWJsZWQgfX0KICAgICMgVGhpcyBpcyB0aGUgazhzIGluZ3Jlc3Mgc2VydmljZSBuYW1lLCB1cGRhdGUgaWYgeW91IHVzZWQgYSBkaWZmZXJlbnQgbmFtZQogICAgaW5ncmVzc1NlcnZpY2U6IGlzdGlvLXt7IC5WYWx1ZXMuZ2xvYmFsLms4c0luZ3Jlc3NTZWxlY3RvciB9fQogICAge3stIGVuZCB9fQoKICAgICMgVW5peCBEb21haW4gU29ja2V0IHRocm91Z2ggd2hpY2ggZW52b3kgY29tbXVuaWNhdGVzIHdpdGggTm9kZUFnZW50IFNEUyB0byBnZXQKICAgICMga2V5L2NlcnQgZm9yIG1UTFMuIFVzZSBzZWNyZXQtbW91bnQgZmlsZXMgaW5zdGVhZCBvZiBTRFMgaWYgc2V0IHRvIGVtcHR5LiAKICAgIHNkc1Vkc1BhdGg6ICIiCiAgICAKICAgICMgSG93IGZyZXF1ZW50bHkgc2hvdWxkIEVudm95IGZldGNoIGtleS9jZXJ0IGZyb20gTm9kZUFnZW50LgogICAgc2RzUmVmcmVzaERlbGF5OiAxNXMKCiAgICAjCiAgICBkZWZhdWx0Q29uZmlnOgogICAgICAjCiAgICAgICMgVENQIGNvbm5lY3Rpb24gdGltZW91dCBiZXR3ZWVuIEVudm95ICYgdGhlIGFwcGxpY2F0aW9uLCBhbmQgYmV0d2VlbiBFbnZveXMuCiAgICAgIGNvbm5lY3RUaW1lb3V0OiAxMHMKICAgICAgIwogICAgICAjIyMgQURWQU5DRUQgU0VUVElOR1MgIyMjIyMjIyMjIyMjIwogICAgICAjIFdoZXJlIHNob3VsZCBlbnZveSdzIGNvbmZpZ3VyYXRpb24gYmUgc3RvcmVkIGluIHRoZSBpc3Rpby1wcm94eSBjb250YWluZXIKICAgICAgY29uZmlnUGF0aDogIi9ldGMvaXN0aW8vcHJveHkiCiAgICAgIGJpbmFyeVBhdGg6ICIvdXNyL2xvY2FsL2Jpbi9lbnZveSIKICAgICAgIyBUaGUgcHNldWRvIHNlcnZpY2UgbmFtZSB1c2VkIGZvciBFbnZveS4KICAgICAgc2VydmljZUNsdXN0ZXI6IGlzdGlvLXByb3h5CiAgICAgICMgVGhlc2Ugc2V0dGluZ3MgdGhhdCBkZXRlcm1pbmUgaG93IGxvbmcgYW4gb2xkIEVudm95CiAgICAgICMgcHJvY2VzcyBzaG91bGQgYmUga2VwdCBhbGl2ZSBhZnRlciBhbiBvY2Nhc2lvbmFsIHJlbG9hZC4KICAgICAgZHJhaW5EdXJhdGlvbjogNDVzCiAgICAgIHBhcmVudFNodXRkb3duRHVyYXRpb246IDFtMHMKICAgICAgIwogICAgICAjIFRoZSBtb2RlIHVzZWQgdG8gcmVkaXJlY3QgaW5ib3VuZCBjb25uZWN0aW9ucyB0byBFbnZveS4gVGhpcyBzZXR0aW5nCiAgICAgICMgaGFzIG5vIGVmZmVjdCBvbiBvdXRib3VuZCB0cmFmZmljOiBpcHRhYmxlcyBSRURJUkVDVCBpcyBhbHdheXMgdXNlZCBmb3IKICAgICAgIyBvdXRib3VuZCBjb25uZWN0aW9ucy4KICAgICAgIyBJZiAiUkVESVJFQ1QiLCB1c2UgaXB0YWJsZXMgUkVESVJFQ1QgdG8gTkFUIGFuZCByZWRpcmVjdCB0byBFbnZveS4KICAgICAgIyBUaGUgIlJFRElSRUNUIiBtb2RlIGxvc2VzIHNvdXJjZSBhZGRyZXNzZXMgZHVyaW5nIHJlZGlyZWN0aW9uLgogICAgICAjIElmICJUUFJPWFkiLCB1c2UgaXB0YWJsZXMgVFBST1hZIHRvIHJlZGlyZWN0IHRvIEVudm95LgogICAgICAjIFRoZSAiVFBST1hZIiBtb2RlIHByZXNlcnZlcyBib3RoIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIElQCiAgICAgICMgYWRkcmVzc2VzIGFuZCBwb3J0cywgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIGZvciBhZHZhbmNlZCBmaWx0ZXJpbmcKICAgICAgIyBhbmQgbWFuaXB1bGF0aW9uLgogICAgICAjIFRoZSAiVFBST1hZIiBtb2RlIGFsc28gY29uZmlndXJlcyB0aGUgc2lkZWNhciB0byBydW4gd2l0aCB0aGUKICAgICAgIyBDQVBfTkVUX0FETUlOIGNhcGFiaWxpdHksIHdoaWNoIGlzIHJlcXVpcmVkIHRvIHVzZSBUUFJPWFkuCiAgICAgICNpbnRlcmNlcHRpb25Nb2RlOiBSRURJUkVDVAogICAgICAjCiAgICAgICMgUG9ydCB3aGVyZSBFbnZveSBsaXN0ZW5zIChvbiBsb2NhbCBob3N0KSBmb3IgYWRtaW4gY29tbWFuZHMKICAgICAgIyBZb3UgY2FuIGV4ZWMgaW50byB0aGUgaXN0aW8tcHJveHkgY29udGFpbmVyIGluIGEgcG9kIGFuZAogICAgICAjIGN1cmwgdGhlIGFkbWluIHBvcnQgKGN1cmwgaHR0cDovL2xvY2FsaG9zdDoxNTAwMC8pIHRvIG9idGFpbgogICAgICAjIGRpYWdub3N0aWMgaW5mb3JtYXRpb24gZnJvbSBFbnZveS4gU2VlCiAgICAgICMgaHR0cHM6Ly9seWZ0LmdpdGh1Yi5pby9lbnZveS9kb2NzL29wZXJhdGlvbnMvYWRtaW4uaHRtbAogICAgICAjIGZvciBtb3JlIGRldGFpbHMKICAgICAgcHJveHlBZG1pblBvcnQ6IDE1MDAwCiAgICAgICMKICAgICAgIyBTZXQgY29uY3VycmVuY3kgdG8gYSBzcGVjaWZpYyBudW1iZXIgdG8gY29udHJvbCB0aGUgbnVtYmVyIG9mIFByb3h5IHdvcmtlciB0aHJlYWRzLgogICAgICAjIElmIHNldCB0byAwIChkZWZhdWx0KSwgdGhlbiBzdGFydCB3b3JrZXIgdGhyZWFkIGZvciBlYWNoIENQVSB0aHJlYWQvY29yZS4KICAgICAgY29uY3VycmVuY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmNvbmN1cnJlbmN5IH19CiAgICAgICMKICAgICAgIyBaaXBraW4gdHJhY2UgY29sbGVjdG9yCiAgICAgIHppcGtpbkFkZHJlc3M6IHppcGtpbi57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX06OTQxMQoKICAgIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcm94eS5lbnZveVN0YXRzZC5lbmFibGVkIH19CiAgICAgICMKICAgICAgIyBTdGF0c2QgbWV0cmljcyBjb2xsZWN0b3IgY29udmVydHMgc3RhdHNkIG1ldHJpY3MgaW50byBQcm9tZXRoZXVzIG1ldHJpY3MuCiAgICAgIHN0YXRzZFVkcEFkZHJlc3M6IHt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVudm95U3RhdHNkLmhvc3QgfX0ue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Ont7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmVudm95U3RhdHNkLnBvcnQgfX0KICAgIHt7LSBlbmQgfX0KCiAgICB7ey0gaWYgLlZhbHVlcy5nbG9iYWwuY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkIH19CiAgICAgICMKICAgICAgIyBNdXR1YWwgVExTIGF1dGhlbnRpY2F0aW9uIGJldHdlZW4gc2lkZWNhcnMgYW5kIGlzdGlvIGNvbnRyb2wgcGxhbmUuCiAgICAgIGNvbnRyb2xQbGFuZUF1dGhQb2xpY3k6IE1VVFVBTF9UTFMKICAgICAgIwogICAgICAjIEFkZHJlc3Mgd2hlcmUgaXN0aW8gUGlsb3Qgc2VydmljZSBpcyBydW5uaW5nCiAgICAgIGRpc2NvdmVyeUFkZHJlc3M6IGlzdGlvLXBpbG90Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fToxNTAwNQogICAge3stIGVsc2UgfX0KICAgICAgIwogICAgICAjIE11dHVhbCBUTFMgYXV0aGVudGljYXRpb24gYmV0d2VlbiBzaWRlY2FycyBhbmQgaXN0aW8gY29udHJvbCBwbGFuZS4KICAgICAgY29udHJvbFBsYW5lQXV0aFBvbGljeTogTk9ORQogICAgICAjCiAgICAgICMgQWRkcmVzcyB3aGVyZSBpc3RpbyBQaWxvdCBzZXJ2aWNlIGlzIHJ1bm5pbmcKICAgICAgZGlzY292ZXJ5QWRkcmVzczogaXN0aW8tcGlsb3Que3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19OjE1MDA3CiAgICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "templates/crds.yaml",
          "fileContents": ""
        },
        {
          "filePath": "templates/install-custom-resources.sh.tpl",
          "fileContents": "e3sgZGVmaW5lICJpbnN0YWxsLWN1c3RvbS1yZXNvdXJjZXMuc2gudHBsIiB9fQojIS9iaW4vc2gKCnNldCAteAoKaWYgWyAiJCMiIC1uZSAiMSIgXTsgdGhlbgogICAgZWNobyAiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIHBhdGggdG8gY3VzdG9tIHJlc291cmNlIHlhbWwiCiAgICBleGl0IDEKZmkKCnBhdGhUb1Jlc291cmNlWUFNTD0kezF9Cgova3ViZWN0bCBnZXQgdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uIGlzdGlvLWdhbGxleSAyPi9kZXYvbnVsbAppZiBbICIkPyIgLWVxIDAgXTsgdGhlbgogICAgZWNobyAiaXN0aW8tZ2FsbGV5IHZhbGlkYXRpbmd3ZWJob29rY29uZmlndXJhdGlvbiBmb3VuZCAtIHdhaXRpbmcgZm9yIGlzdGlvLWdhbGxleSBkZXBsb3ltZW50IHRvIGJlIHJlYWR5IgogICAgd2hpbGUgdHJ1ZTsgZG8KICAgICAgICAva3ViZWN0bCAtbiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gZ2V0IGRlcGxveW1lbnQgaXN0aW8tZ2FsbGV5IDI+L2Rldi9udWxsCiAgICAgICAgaWYgWyAiJD8iIC1lcSAwIF07IHRoZW4KICAgICAgICAgICAgYnJlYWsKICAgICAgICBmaQogICAgICAgIHNsZWVwIDEKICAgIGRvbmUKICAgIC9rdWJlY3RsIC1uIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSByb2xsb3V0IHN0YXR1cyBkZXBsb3ltZW50IGlzdGlvLWdhbGxleQogICAgaWYgWyAiJD8iIC1uZSAwIF07IHRoZW4KICAgICAgICBlY2hvICJpc3Rpby1nYWxsZXkgZGVwbG95bWVudCByb2xsb3V0IHN0YXR1cyBjaGVjayBmYWlsZWQiCiAgICAgICAgZXhpdCAxCiAgICBmaQogICAgZWNobyAiaXN0aW8tZ2FsbGV5IGRlcGxveW1lbnQgcmVhZHkgZm9yIGNvbmZpZ3VyYXRpb24gdmFsaWRhdGlvbiIKZmkKc2xlZXAgNQova3ViZWN0bCBhcHBseSAtZiAke3BhdGhUb1Jlc291cmNlWUFNTH0Ke3sgZW5kIH19Cg=="
        },
        {
          "filePath": "templates/sidecar-injector-configmap.yaml",
          "fileContents": ""
        },
        {
          "filePath": "values-istio-auth-galley.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbApnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVNdGxzIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgogICMjIGltYWdlUHVsbFNlY3JldHMgZm9yIGFsbCBTZXJ2aWNlQWNjb3VudC4gTXVzdCBiZSBzZXQgZm9yIGFueSBjbHVzdHNlciBjb25maWd1cmVkIHdpdGggcHJpdnRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCmlzdGlvdGVzdGluZzoKICBvbmVOYW1lU3BhY2U6IGZhbHNlCgpwcm9tZXRoZXVzOgogIGVuYWJsZWQ6IHRydWUKCmdhbGxleToKICBlbmFibGVkOiB0cnVlCg=="
        },
        {
          "filePath": "values-istio-auth-multicluster.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC1tdWx0aWNsdXN0ZXIueWFtbCwgdXNlZCBmb3IgQ0kvQ0QuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZU10bHMgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogdHJ1ZQoKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2dGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwoKIyBJbiBhIG11bHRpcGxlIGNsdXN0ZXIgZW52aXJvbm1lbnQsIGNpdGFkZWwgdXNlcyB0aGUgc2FtZSByb290IGNlcnRpZmljYXRlIGluIGFsbCB0aGUgY2x1c3RlcnMKc2VjdXJpdHk6CiAgc2VsZlNpZ25lZDogZmFsc2UK"
        },
        {
          "filePath": "values-istio-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIGZvciBhdXRvbWF0ZWQgQ0kvQ0QgdGVzdCwgdXNpbmcgdjEvYWxwaGExCiMgb3IgdjIvYWxwaGEzIHdpdGggJ2dyYWR1YWwgbWlncmF0aW9uJyAodXNpbmcgZW52IHZhcmlhYmxlIGF0IGluamVjdCB0aW1lKS4KZ2xvYmFsOgogICMgY29udHJvbFBsYW5lTXRscyBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiB0cnVlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogdHJ1ZQoKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2dGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwoK"
        },
        {
          "filePath": "values-istio-demo-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIGZvciBtaW5pbWFsLCBkZW1vIG1vZGUgd2l0aCBNVExTIGVuYWJsZWQuCiMgSXQgaXMgc2hpcHBlZCB3aXRoIHRoZSByZWxlYXNlLCB1c2VkIGZvciBib29raW5mbyBvciBxdWljayBpbnN0YWxsYXRpb24gb2YgaXN0aW8uCiMgSW5jbHVkZXMgY29tcG9uZW50cyB1c2VkIGluIHRoZSBkZW1vLCBkZWZhdWx0cyB0byBhbHBoYTMgcnVsZXMuCmdsb2JhbDoKICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgppbmdyZXNzOgogICMgSW5ncmVzcyBpcyB1c2VkIGZvciBtaWdyYXRpb24sIGZvciBhbHBoYTMgd2UgZXhwZWN0IGluZ3Jlc3NnYXRld2F5CiAgZW5hYmxlZDogZmFsc2UKCnByb21ldGhldXM6CiAgZW5hYmxlZDogdHJ1ZQoKcGlsb3Q6CiAgdHJhY2VTYW1wbGluZzogMTAwLjAKCnNpZGVjYXJJbmplY3RvcldlYmhvb2s6CiAgZW5hYmxlZDogdHJ1ZQogIGVuYWJsZU5hbWVzcGFjZXNCeURlZmF1bHQ6IGZhbHNlCgpncmFmYW5hOgogIGVuYWJsZWQ6IHRydWUKCnRyYWNpbmc6CiAgZW5hYmxlZDogdHJ1ZQoKc2VydmljZWdyYXBoOgogIGVuYWJsZWQ6IHRydWUKCmdhbGxleToKICBlbmFibGVkOiB0cnVlCg=="
        },
        {
          "filePath": "values-istio-demo.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCBmb3IgbWluaW1hbCwgZGVtbyBtb2RlLgojIEl0IGlzIHNoaXBwZWQgd2l0aCB0aGUgcmVsZWFzZSwgdXNlZCBmb3IgYm9va2luZm8gb3IgcXVpY2sgaW5zdGFsbGF0aW9uIG9mIGlzdGlvLgojIEluY2x1ZGVzIGNvbXBvbmVudHMgdXNlZCBpbiB0aGUgZGVtbywgZGVmYXVsdHMgdG8gYWxwaGEzIHJ1bGVzLgoKIyBJZiBydW5uaW5nIGluIG1pbmlrdWJlIHlvdSBtYXkgYWRkOgojIC0tc2V0IGdsb2JhbC5ub2RlUG9ydD10cnVlCiMgLS1zZXQgaW5ncmVzc2dhdGV3YXkuc2VydmljZS50eXBlPU5vZGVQb3J0Cmdsb2JhbDoKICBub2RlUG9ydDogZmFsc2UKCmluZ3Jlc3M6CiAgIyBJbmdyZXNzIGlzIHVzZWQgZm9yIG1pZ3JhdGlvbiwgZm9yIGFscGhhMyB3ZSBleHBlY3QgaW5ncmVzc2dhdGV3YXkKICBlbmFibGVkOiBmYWxzZQoKcHJvbWV0aGV1czoKICBlbmFibGVkOiB0cnVlCgpwaWxvdDoKICB0cmFjZVNhbXBsaW5nOiAxMDAuMAoKc2lkZWNhckluamVjdG9yV2ViaG9vazoKICBlbmFibGVkOiB0cnVlCiAgZW5hYmxlTmFtZXNwYWNlc0J5RGVmYXVsdDogZmFsc2UKCmdyYWZhbmE6CiAgZW5hYmxlZDogdHJ1ZQoKdHJhY2luZzoKICBlbmFibGVkOiB0cnVlCgpzZXJ2aWNlZ3JhcGg6CiAgZW5hYmxlZDogdHJ1ZQoKZ2FsbGV5OgogIGVuYWJsZWQ6IHRydWUK"
        },
        {
          "filePath": "values-istio-galley.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbApnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVNdGxzIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IGZhbHNlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogZmFsc2UKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2dGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwoKaXN0aW90ZXN0aW5nOgogIG9uZU5hbWVTcGFjZTogZmFsc2UKCnByb21ldGhldXM6CiAgZW5hYmxlZDogdHJ1ZQoKZ2FsbGV5OgogIGVuYWJsZWQ6IHRydWUK"
        },
        {
          "filePath": "values-istio-gateways.yaml",
          "fileContents": "IyBDb21tb24gc2V0dGluZ3MuCmdsb2JhbDoKICAjIEluY2x1ZGUgdGhlIGNyZCBkZWZpbml0aW9uIHdoZW4gZ2VuZXJhdGluZyB0aGUgdGVtcGxhdGUuCiAgIyBGb3IgJ2hlbG0gdGVtcGxhdGUnIGFuZCBoZWxtIGluc3RhbGwgPiAyLjEwIGl0IHNob3VsZCBiZSB0cnVlLgogICMgRm9yIGhlbG0gPCAyLjksIGNyZHMgbXVzdCBiZSBpbnN0YWxsZWQgYWhlYWQgb2YgdGltZSB3aXRoCiAgIyAna3ViZWN0bCBhcHBseSAtZiBpbnN0YWxsL2t1YmVybmV0ZXMvaGVsbS9pc3Rpby90ZW1wbGF0ZXMvY3Jkcy55YW1sCiAgIyBhbmQgdGhpcyBvcHRpb25zIG11c3QgYmUgc2V0IG9mZi4KICBjcmRzOiBmYWxzZQoKICAjIE9taXQgdGhlIGlzdGlvLXNpZGVjYXItaW5qZWN0b3IgY29uZmlnbWFwIHdoZW4gZ2VuZXJhdGUgYQogICMgc3RhbmRhbG9uZSBnYXRld2F5LiBHYXRld2F5cyBtYXkgYmUgY3JlYXRlZCBpbiBuYW1lc3BhY2VzIG90aGVyCiAgIyB0aGFuIGBpc3Rpby1zeXN0ZW1gIGFuZCB3ZSBkb24ndCB3YW50IHRvIHJlLWNyZWF0ZSB0aGUgaW5qZWN0b3IKICAjIGNvbmZpZ21hcCBpbiB0aG9zZS4KICBvbWl0U2lkZWNhckluamVjdG9yQ29uZmlnTWFwOiB0cnVlCgogICMgSXN0aW8gY29udHJvbCBwbGFuZSBuYW1lc3BhY2U6IFRoaXMgc3BlY2lmaWVzIHdoZXJlIHRoZSBJc3RpbyBjb250cm9sCiAgIyBwbGFuZSB3YXMgaW5zdGFsbGVkIGVhcmxpZXIuICBNb2RpZnkgdGhpcyBpZiB5b3UgaW5zdGFsbGVkIHRoZSBjb250cm9sCiAgIyBwbGFuZSBpbiBhIGRpZmZlcmVudCBuYW1lc3BhY2UgdGhhbiBpc3Rpby1zeXN0ZW0uCiAgaXN0aW9OYW1lc3BhY2U6IGlzdGlvLXN5c3RlbQoKICBwcm94eToKICAgICMgU2V0cyB0aGUgZGVzdGluYXRpb24gU3RhdHNkIGluIGVudm95ICh0aGUgdmFsdWUgb2YgdGhlICItLXN0YXRzZFVkcEFkZHJlc3MiIHByb3h5IGFyZ3VtZW50CiAgICAjIHdvdWxkIGJlIDxob3N0Pjo8cG9ydD4pLgogICAgIyBEaXNhYmxlZCBieSBkZWZhdWx0LgogICAgIyBUaGUgaXN0aW8tc3RhdHNkLXByb20tYnJpZGdlIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBtb3ZpbmcgZm9yd2FyZC4KICAgIGVudm95U3RhdHNkOgogICAgICAjIElmIGVuYWJsZWQgaXMgc2V0IHRvIHRydWUsIGhvc3QgYW5kIHBvcnQgbXVzdCBhbHNvIGJlIHByb3ZpZGVkLiBJc3RpbyBubyBsb25nZXIgcHJvdmlkZXMgYSBzdGF0c2QgY29sbGVjdG9yLgogICAgICBlbmFibGVkOiBmYWxzZQogICAgICBob3N0OiAjIGV4YW1wbGU6IHN0YXRzZC1zdmMKICAgICAgcG9ydDogIyBleGFtcGxlOiA5MTI1CgoKIwojIEdhdGV3YXlzIENvbmZpZ3VyYXRpb24KIyBCeSBkZWZhdWx0IChpZiBlbmFibGVkKSBhIHBhaXIgb2YgSW5ncmVzcyBhbmQgRWdyZXNzIEdhdGV3YXlzIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhlIG1lc2guCiMgWW91IGNhbiBhZGQgbW9yZSBnYXRld2F5cyBpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdHMgYnV0IG1ha2Ugc3VyZSB0aG9zZSBhcmUgdW5pcXVlbHkgbmFtZWQKIyBhbmQgdGhhdCBOb2RlUG9ydHMgYXJlIG5vdCBjb25mbGljdGluZy4KIyBEaXNhYmxlIHNwZWNpZmMgZ2F0ZXdheSBieSBzZXR0aW5nIHRoZSBgZW5hYmxlZGAgdG8gZmFsc2UuCiMKZ2F0ZXdheXM6CiAgZW5hYmxlZDogdHJ1ZQoKICBjdXN0b20tZ2F0ZXdheToKICAgIGVuYWJsZWQ6IHRydWUKICAgIGxhYmVsczoKICAgICAgYXBwOiBjdXN0b20tZ2F0ZXdheQogICAgcmVwbGljYUNvdW50OiAxCiAgICBhdXRvc2NhbGVNaW46IDEKICAgIGF1dG9zY2FsZU1heDogNQogICAgcmVzb3VyY2VzOiB7fQogICAgICAjIGxpbWl0czoKICAgICAgIyAgY3B1OiAxMDBtCiAgICAgICMgIG1lbW9yeTogMTI4TWkKICAgICAgI3JlcXVlc3RzOgogICAgICAjICBjcHU6IDE4MDBtCiAgICAgICMgIG1lbW9yeTogMjU2TWkKCiAgICBsb2FkQmFsYW5jZXJJUDogIiIKICAgIHNlcnZpY2VBbm5vdGF0aW9uczoge30KICAgIHR5cGU6IExvYWRCYWxhbmNlciAjY2hhbmdlIHRvIE5vZGVQb3J0LCBDbHVzdGVySVAgb3IgTG9hZEJhbGFuY2VyIGlmIG5lZWQgYmUKICAgICMgVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgbGluZSB0byBwcmVzZXJ2ZSBjbGllbnQgc291cmNlIGlwLgogICAgIyBleHRlcm5hbFRyYWZmaWNQb2xpY3k6IExvY2FsCgogICAgcG9ydHM6CiAgICAgICMjIFlvdSBjYW4gYWRkIGN1c3RvbSBnYXRld2F5IHBvcnRzCiAgICAtIHBvcnQ6IDgwCiAgICAgIHRhcmdldFBvcnQ6IDgwCiAgICAgIG5hbWU6IGh0dHAyCiAgICAgICMgbm9kZVBvcnQ6IDMxMzgwCiAgICAtIHBvcnQ6IDQ0MwogICAgICBuYW1lOiBodHRwcwogICAgICAjIG5vZGVQb3J0OiAzMTM5MAogICAgLSBwb3J0OiAzMTQwMAogICAgICBuYW1lOiB0Y3AKICAgICAgIyBub2RlUG9ydDogMzE0MDAKICAgICMgUGlsb3QgYW5kIENpdGFkZWwgTVRMUyBwb3J0cyBhcmUgZW5hYmxlZCBpbiBnYXRld2F5IC0gYnV0IHdpbGwgb25seSByZWRpcmVjdAogICAgIyB0byBwaWxvdC9jaXRhZGVsIGlmIGdsb2JhbC5tZXNoRXhwYW5zaW9uIHNldHRpbmdzIGFyZSBlbmFibGVkLgogICAgLSBwb3J0OiAxNTAxMQogICAgICB0YXJnZXRQb3J0OiAxNTAxMQogICAgICBuYW1lOiB0Y3AtcGlsb3QtZ3JwYy10bHMKICAgIC0gcG9ydDogODA2MAogICAgICB0YXJnZXRQb3J0OiA4MDYwCiAgICAgIG5hbWU6IHRjcC1jaXRhZGVsLWdycGMtdGxzCiAgICAjIFRlbGVtZXRyeS1yZWxhdGVkIHBvcnRzIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0IGlmCiAgICAjIHRoZSBnYXRld2F5IGNvbmZpZ3JhdGlvbiBmb3IgdGhlIHZhcmlvdXMgY29tcG9uZW50cyBhcmUgZW5hYmxlZC4KICAgIC0gcG9ydDogMTUwMzAKICAgICAgdGFyZ2V0UG9ydDogMTUwMzAKICAgICAgbmFtZTogaHR0cDItcHJvbWV0aGV1cwogICAgLSBwb3J0OiAxNTAzMQogICAgICB0YXJnZXRQb3J0OiAxNTAzMQogICAgICBuYW1lOiBodHRwMi1ncmFmYW5hCiAgICBzZWNyZXRWb2x1bWVzOgogICAgLSBuYW1lOiBjdXN0b21nYXRld2F5LWNlcnRzCiAgICAgIHNlY3JldE5hbWU6IGlzdGlvLWN1c3RvbWdhdGV3YXktY2VydHMKICAgICAgbW91bnRQYXRoOiAvZXRjL2lzdGlvL2N1c3RvbWdhdGV3YXktY2VydHMKICAgIC0gbmFtZTogY3VzdG9tZ2F0ZXdheS1jYS1jZXJ0cwogICAgICBzZWNyZXROYW1lOiBpc3Rpby1jdXN0b21nYXRld2F5LWNhLWNlcnRzCiAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9jdXN0b21nYXRld2F5LWNhLWNlcnRzCgojIGFsbCBvdGhlciBjb21wb25lbnRzIGFyZSBkaXNhYmxlZCBleGNlcHQgdGhlIGdhdGV3YXlzCmluZ3Jlc3M6CiAgZW5hYmxlZDogZmFsc2UKCnNlY3VyaXR5OgogIGVuYWJsZWQ6IGZhbHNlCgpzaWRlY2FySW5qZWN0b3JXZWJob29rOgogIGVuYWJsZWQ6IGZhbHNlCgpnYWxsZXk6CiAgZW5hYmxlZDogZmFsc2UKCm1peGVyOgogIGVuYWJsZWQ6IGZhbHNlCgpwaWxvdDoKICBlbmFibGVkOiBmYWxzZQoKZ3JhZmFuYToKICBlbmFibGVkOiBmYWxzZQoKcHJvbWV0aGV1czoKICBlbmFibGVkOiBmYWxzZQoKc2VydmljZWdyYXBoOgogIGVuYWJsZWQ6IGZhbHNlCgp0cmFjaW5nOgogIGVuYWJsZWQ6IGZhbHNlCgpraWFsaToKICBlbmFibGVkOiBmYWxzZQoKY2VydG1hbmFnZXI6CiAgZW5hYmxlZDogZmFsc2UK"
        },
        {
          "filePath": "values-istio-multicluster.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tbXVsdGljbHVzdGVyLnlhbWwsIHVzZWQgZm9yIENJL0NELgpnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVNdGxzIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IGZhbHNlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogZmFsc2UKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2dGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwoKcHJvbWV0aGV1czoKICBlbmFibGVkOiB0cnVlCgojIEluIGEgbXVsdGlwbGUgY2x1c3RlciBlbnZpcm9ubWVudCwgY2l0YWRlbCB1c2VzIHRoZSBzYW1lIHJvb3QgY2VydGlmaWNhdGUgaW4gYWxsIHRoZSBjbHVzdGVycwpzZWN1cml0eToKICBzZWxmU2lnbmVkOiBmYWxzZQo="
        },
        {
          "filePath": "values-istio-one-namespace-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZU10bHMgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogdHJ1ZQoKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2dGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwoKaXN0aW90ZXN0aW5nOgogIG9uZU5hbWVTcGFjZTogdHJ1ZQo="
        },
        {
          "filePath": "values-istio-one-namespace.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZU10bHMgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiBmYWxzZQoKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RzZXIgY29uZmlndXJlZCB3aXRoIHByaXZ0ZSBkb2NrZXIgcmVnaXN0cnkuCiAgIyBpbWFnZVB1bGxTZWNyZXRzOgogICMgICAtIG5hbWU6ICJwcml2YXRlLXJlZ2lzdHJ5LWtleSIKCiAgIyBEZWZhdWx0IGlzIDEwcyBzZWNvbmQKICByZWZyZXNoSW50ZXJ2YWw6IDFzCgppc3Rpb3Rlc3Rpbmc6CiAgb25lTmFtZVNwYWNlOiB0cnVlCg=="
        },
        {
          "filePath": "values-istio.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCBmb3IgYXV0b21hdGVkIENJL0NEIHRlc3QsIHVzaW5nIHYxL2FscGhhMQojIG9yIHYyL2FscGhhMyB3aXRoICdncmFkdWFsIG1pZ3JhdGlvbicgKHVzaW5nIGVudiB2YXJpYWJsZSBhdCBpbmplY3QgdGltZSkuCmdsb2JhbDoKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RzZXIgY29uZmlndXJlZCB3aXRoIHByaXZ0ZSBkb2NrZXIgcmVnaXN0cnkuCiAgIyBpbWFnZVB1bGxTZWNyZXRzOgogICMgICAtIG5hbWU6ICJwcml2YXRlLXJlZ2lzdHJ5LWtleSIKCiAgIyBEZWZhdWx0IGlzIDEwcyBzZWNvbmQKICByZWZyZXNoSW50ZXJ2YWw6IDFzCg=="
        },
        {
          "filePath": "values.yaml",
          "fileContents": ""
        }
      ]
    },
    "contentSHA": "0b03c5680b514a64ad597dbc6fdb2b43621951ba0707d70412d0ec37a3e4b097"
  }
}