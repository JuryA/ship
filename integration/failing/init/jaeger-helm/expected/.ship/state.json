{
  "v1": {
    "config": {},
    "releaseName": "jaeger",
    "helmValuesDefaults": "# Default values for jaeger.\n# This is a YAML-formatted file.\n# Jaeger values are grouped by component. Cassandra values override subchart values\n\nprovisionDataStore:\n  cassandra: true\n  elasticsearch: false\n\ntag: 1.4.1\n\nstorage:\n  # allowed values (cassandra, elasticsearch)\n  type: cassandra\n  cassandra:\n    host: cassandra\n    port: 9042\n    user: user\n    password: password\n  elasticsearch:\n    scheme: http\n    host: elasticsearch\n    port: 9200\n    user: elastic\n    password: changeme\n    nodesWanOnly: false\n\n# Begin: Override values on the Cassandra subchart to customize for Jaeger\ncassandra:\n  image:\n    tag: 3.11\n  persistence:\n    # To enable persistence, please see the documentation for the Cassandra chart\n    enabled: false\n  config:\n    cluster_name: jaeger\n    seed_size: 1\n    dc_name: dc1\n    rack_name: rack1\n    endpoint_snitch: GossipingPropertyFileSnitch\n# End: Override values on the Cassandra subchart to customize for Jaeger\n\n# Begin: Default values for the various components of Jaeger\n# This chart has been based on the Kubernetes integration found in the following repo:\n# https://github.com/jaegertracing/jaeger-kubernetes/blob/master/production/jaeger-production-template.yml\n#\n# This is the jaeger-cassandra-schema Job which sets up the Cassandra schema for\n# use by Jaeger\nschema:\n  annotations: {}\n  image: jaegertracing/jaeger-cassandra-schema\n  pullPolicy: IfNotPresent\n  # Acceptable values are test and prod. Default is for production use.\n  mode: prod\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n\n# Begin: Override values on the Elasticsearch subchart to customize for Jaeger\nelasticsearch:\n  image:\n    tag: \"5.4\"\n  cluster:\n    name: \"tracing\"\n  data:\n    persistence:\n      enabled: false\n  rbac:\n    create: false\n\nagent:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-agent\n  pullPolicy: IfNotPresent\n  collector:\n    host: null\n    port: null\n  cmdlineParams: {}\n  daemonset:\n    useHostPort: false\n  service:\n    annotations: {}\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    type: ClusterIP\n    # zipkinThriftPort :accept zipkin.thrift over compact thrift protocol\n    zipkinThriftPort: 5775\n    # compactPort: accept jaeger.thrift over compact thrift protocol\n    compactPort: 6831\n    # binaryPort: accept jaeger.thrift over binary thrift protocol\n    binaryPort: 6832\n    # samplingPort: (HTTP) serve configs, sampling strategies\n    samplingPort: 5778\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n  useHostNetwork: false\n  dnsPolicy: ClusterFirst\n\ncollector:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-collector\n  pullPolicy: IfNotPresent\n  dnsPolicy: ClusterFirst\n  cmdlineParams: {}\n  replicaCount: 1\n  service:\n    annotations: {}\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    type: ClusterIP\n    # tchannelPort: used by jaeger-agent to send spans in jaeger.thrift format\n    tchannelPort: 14267\n    # httpPort: can accept spans directly from clients in jaeger.thrift format\n    httpPort: 14268\n    # can accept Zipkin spans in JSON or Thrift\n    zipkinPort: 9411\n    healthCheckPort: 14269\n  resources: {}\n    # limits:\n    #   cpu: 1\n    #   memory: 1Gi\n    # requests:\n    #   cpu: 500m\n    #   memory: 512Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n\nquery:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-query\n  pullPolicy: IfNotPresent\n  dnsPolicy: ClusterFirst\n  cmdlineParams: {}\n  healthCheckPort: 16687\n  replicaCount: 1\n  service:\n    annotations: {}\n    type: ClusterIP\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    # queryPort: externally accessible port for UI and API\n    queryPort: 80\n    # targetPort: the internal port the UI and API are exposed on\n    targetPort: 16686\n  ingress:\n    enabled: false\n    annotations: {}\n    # Used to create an Ingress record.\n    # hosts:\n    #   - chart-example.local\n    # annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    # tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: chart-example-tls\n      #   hosts:\n      #     - chart-example.local\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #    cpu: 256m\n    #    memory: 128Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n\nspark:\n  enabled: false\n  annotations: {}\n  image: jaegertracing/spark-dependencies\n  tag: latest\n  pullPolicy: Always\n  schedule: \"49 23 * * *\"\n  successfulJobsHistoryLimit: 5\n  failedJobsHistoryLimit: 5\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  nodeSelector: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n# End: Default values for the various components of Jaeger\n\nhotrod:\n  enabled: false\n  replicaCount: 1\n  image:\n    repository: jaegertracing/example-hotrod\n    tag: latest\n    pullPolicy: Always\n  service:\n    annotations: {}\n    name: hotrod\n    type: ClusterIP\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    externalPort: 80\n    internalPort: 8080\n  ingress:\n    enabled: false\n    # Used to create Ingress record (should be used with service.type: ClusterIP).\n    hosts:\n      - chart-example.local\n    annotations: {}\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: chart-example-tls\n      #   hosts:\n      #     - chart-example.local\n  resources: {}\n    # We usually recommend not to specify default resources and to leave this as a conscious\n    # choice for the user. This also increases chances charts run on environments with little\n    # resources, such as Minikube. If you do want to specify resources, uncomment the following\n    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n    # requests:\n    #   cpu: 100m\n    #   memory: 128Mi\n  tracing:\n    host: null\n    port: 6831\n",
    "upstream": "https://github.com/helm/charts/tree/f839d88d087511eb163b12a394c05a63f10d5ee4/incubator/jaeger",
    "metadata": {
      "applicationType": "helm",
      "sequence": 0,
      "icon": "https://camo.githubusercontent.com/afa87494e0753b4b1f5719a2f35aa5263859dffb/687474703a2f2f6a61656765722e72656164746865646f63732e696f2f656e2f6c61746573742f696d616765732f6a61656765722d766563746f722e737667",
      "name": "jaeger",
      "releaseNotes": "Adds tolerations labels for Jaeger pods (#6255)",
      "version": "0.7.0",
      "license": {
        "id": "",
        "assignee": "",
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "0001-01-01T00:00:00Z",
        "type": ""
      }
    },
    "upstreamContents": {
      "upstreamFiles": [
        {
          "filePath": ".helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKYXBwVmVyc2lvbjogMS40LjEKZGVzY3JpcHRpb246IEEgSmFlZ2VyIEhlbG0gY2hhcnQgZm9yIEt1YmVybmV0ZXMKbmFtZTogamFlZ2VyCnZlcnNpb246IDAuNy4wCmtleXdvcmRzOgogIC0gamFlZ2VyCiAgLSBvcGVudHJhY2luZwogIC0gdHJhY2luZwogIC0gaW5zdHJ1bWVudGF0aW9uCmhvbWU6IGh0dHBzOi8vamFlZ2VydHJhY2luZy5pbwppY29uOiBodHRwczovL2NhbW8uZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FmYTg3NDk0ZTA3NTNiNGIxZjU3MTlhMmYzNWFhNTI2Mzg1OWRmZmIvNjg3NDc0NzAzYTJmMmY2YTYxNjU2NzY1NzIyZTcyNjU2MTY0NzQ2ODY1NjQ2ZjYzNzMyZTY5NmYyZjY1NmUyZjZjNjE3NDY1NzM3NDJmNjk2ZDYxNjc2NTczMmY2YTYxNjU2NzY1NzIyZDc2NjU2Mzc0NmY3MjJlNzM3NjY3CnNvdXJjZXM6CiAgLSBodHRwczovL2h1Yi5kb2NrZXIuY29tL3UvamFlZ2VydHJhY2luZy8KbWFpbnRhaW5lcnM6CiAgLSBuYW1lOiBkdm9udGhlbmVuCiAgICBlbWFpbDogZGF2aWQudm9udGhlbmVuQGRlbGwuY29tCiAgLSBuYW1lOiBtaWtlbG9yYW50CiAgICBlbWFpbDogbWljaGFlbC5sb3JhbnRAZmFpcmZheG1lZGlhLmNvbS5hdQogIC0gbmFtZTogcGF2ZWxuaWtvbG92CiAgICBlbWFpbDogcGF2ZWwubmlrb2xvdkBmYWlyZmF4bWVkaWEuY29tLmF1Cg=="
        },
        {
          "filePath": "README.md",
          "fileContents": ""
        },
        {
          "filePath": "requirements.yaml",
          "fileContents": "ZGVwZW5kZW5jaWVzOgogIC0gbmFtZTogY2Fzc2FuZHJhCiAgICB2ZXJzaW9uOiBeMC4xLjYKICAgIHJlcG9zaXRvcnk6IGh0dHBzOi8va3ViZXJuZXRlcy1jaGFydHMtaW5jdWJhdG9yLnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vCiAgICBjb25kaXRpb246IHByb3Zpc2lvbkRhdGFTdG9yZS5jYXNzYW5kcmEKICAtIG5hbWU6IGVsYXN0aWNzZWFyY2gKICAgIHZlcnNpb246IF4wLjQuMQogICAgcmVwb3NpdG9yeTogaHR0cHM6Ly9rdWJlcm5ldGVzLWNoYXJ0cy1pbmN1YmF0b3Iuc3RvcmFnZS5nb29nbGVhcGlzLmNvbS8KICAgIGNvbmRpdGlvbjogcHJvdmlzaW9uRGF0YVN0b3JlLmVsYXN0aWNzZWFyY2gK"
        },
        {
          "filePath": "templates/NOTES.txt",
          "fileContents": "WW91IGNhbiBsb2cgaW50byB0aGUgSmFlZ2VyIFF1ZXJ5IFVJIGhlcmU6Cgp7ey0gaWYgY29udGFpbnMgIk5vZGVQb3J0IiAuVmFsdWVzLnF1ZXJ5LnNlcnZpY2UudHlwZSB9fQoKICBleHBvcnQgTk9ERV9QT1JUPSQoa3ViZWN0bCBnZXQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7LnNwZWMucG9ydHNbMF0ubm9kZVBvcnR9IiBzZXJ2aWNlcyB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19LXF1ZXJ5KQogIGV4cG9ydCBOT0RFX0lQPSQoa3ViZWN0bCBnZXQgbm9kZXMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7Lml0ZW1zWzBdLnN0YXR1cy5hZGRyZXNzZXNbMF0uYWRkcmVzc30iKQogIGVjaG8gaHR0cDovLyROT0RFX0lQOiROT0RFX1BPUlQvCgp7ey0gZWxzZSBpZiBjb250YWlucyAiTG9hZEJhbGFuY2VyIiAuVmFsdWVzLnF1ZXJ5LnNlcnZpY2UudHlwZSB9fQoKICBOT1RFOiBJdCBtYXkgdGFrZSBhIGZldyBtaW51dGVzIGZvciB0aGUgTG9hZEJhbGFuY2VyIElQIHRvIGJlIGF2YWlsYWJsZS4KICAgICAgICBXYXRjaCB0aGUgc3RhdHVzIHdpdGg6ICdrdWJlY3RsIGdldCBzdmMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC13IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0tcXVlcnknCgogIGV4cG9ydCBTRVJWSUNFX0lQPSQoa3ViZWN0bCBnZXQgc3ZjIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19LXF1ZXJ5IC1vIGpzb25wYXRoPSd7LnN0YXR1cy5sb2FkQmFsYW5jZXIuaW5ncmVzc1swXS5pcH0nKQogIGVjaG8gaHR0cDovLyRTRVJWSUNFX0lQLwp7ey0gZWxzZSBpZiBjb250YWlucyAiQ2x1c3RlcklQIiAgLlZhbHVlcy5xdWVyeS5zZXJ2aWNlLnR5cGUgfX0KCiAgZXhwb3J0IFBPRF9OQU1FPSQoa3ViZWN0bCBnZXQgcG9kcyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gLWwgInJlbGVhc2U9e3sgLlJlbGVhc2UuTmFtZSB9fSxjb21wb25lbnQ9cXVlcnkiIC1vIGpzb25wYXRoPSJ7Lml0ZW1zWzBdLm1ldGFkYXRhLm5hbWV9IikKICBlY2hvIGh0dHA6Ly8xMjcuMC4wLjE6ODA4MC8KICBrdWJlY3RsIHBvcnQtZm9yd2FyZCAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gJFBPRF9OQU1FIDgwODA6MTY2ODYKe3stIGVuZCB9fQo="
        },
        {
          "filePath": "templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQoKe3svKgpSZXR1cm4gdGhlIGFwcHJvcHJpYXRlIGFwaVZlcnNpb24gZm9yIGNyb25qb2IgQVBJcy4KKi99fQp7ey0gZGVmaW5lICJjcm9uam9iLmFwaVZlcnNpb24iIC19fQp7ey0gaWYgLkNhcGFiaWxpdGllcy5BUElWZXJzaW9ucy5IYXMgImJhdGNoL3YxYmV0YTEiIC19fQoiYmF0Y2gvdjFiZXRhMSIKe3stIGVsc2UgLX19CiJiYXRjaC92MmFscGhhMSIKe3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKRXhwYW5kIHRoZSBuYW1lIG9mIHRoZSBjaGFydC4KKi99fQp7ey0gZGVmaW5lICJqYWVnZXIubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJqYWVnZXIuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBmdWxseSBxdWFsaWZpZWQgcXVlcnkgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAiamFlZ2VyLnF1ZXJ5Lm5hbWUiIC19fQp7ey0gJG5hbWVHbG9iYWxPdmVycmlkZSA6PSBwcmludGYgIiVzLXF1ZXJ5IiAoaW5jbHVkZSAiamFlZ2VyLmZ1bGxuYW1lIiAuKSAtfX0Ke3stIGlmIC5WYWx1ZXMucXVlcnkuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIHByaW50ZiAiJXMiIC5WYWx1ZXMucXVlcnkuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcyIgJG5hbWVHbG9iYWxPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGZ1bGx5IHF1YWxpZmllZCBhZ2VudCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJqYWVnZXIuYWdlbnQubmFtZSIgLX19Cnt7LSAkbmFtZUdsb2JhbE92ZXJyaWRlIDo9IHByaW50ZiAiJXMtYWdlbnQiIChpbmNsdWRlICJqYWVnZXIuZnVsbG5hbWUiIC4pIC19fQp7ey0gaWYgLlZhbHVlcy5hZ2VudC5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcyIgLlZhbHVlcy5hZ2VudC5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzIiAkbmFtZUdsb2JhbE92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZnVsbHkgcXVhbGlmaWVkIGNvbGxlY3RvciBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJqYWVnZXIuY29sbGVjdG9yLm5hbWUiIC19fQp7ey0gJG5hbWVHbG9iYWxPdmVycmlkZSA6PSBwcmludGYgIiVzLWNvbGxlY3RvciIgKGluY2x1ZGUgImphZWdlci5mdWxsbmFtZSIgLikgLX19Cnt7LSBpZiAuVmFsdWVzLmNvbGxlY3Rvci5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcyIgLlZhbHVlcy5jb2xsZWN0b3IuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcyIgJG5hbWVHbG9iYWxPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey0gZGVmaW5lICJjYXNzYW5kcmEuaG9zdCIgLX19Cnt7LSBpZiAuVmFsdWVzLnByb3Zpc2lvbkRhdGFTdG9yZS5jYXNzYW5kcmEgLX19Cnt7LSBpZiAuVmFsdWVzLnN0b3JhZ2UuY2Fzc2FuZHJhLm5hbWVPdmVycmlkZSB9fQp7ey0gcHJpbnRmICIlcyIgLlZhbHVlcy5zdG9yYWdlLmNhc3NhbmRyYS5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIH19Cnt7LSBlbHNlIH19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICJjYXNzYW5kcmEiIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVsc2UgfX0Ke3stIC5WYWx1ZXMuc3RvcmFnZS5jYXNzYW5kcmEuaG9zdCB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3stIGRlZmluZSAiY2Fzc2FuZHJhLmNvbnRhY3RfcG9pbnRzIiAtfX0Ke3stICRwb3J0IDo9IC5WYWx1ZXMuc3RvcmFnZS5jYXNzYW5kcmEucG9ydCB8IHRvU3RyaW5nIH19Cnt7LSBpZiAuVmFsdWVzLnByb3Zpc2lvbkRhdGFTdG9yZS5jYXNzYW5kcmEgLX19Cnt7LSBpZiAuVmFsdWVzLnN0b3JhZ2UuY2Fzc2FuZHJhLm5hbWVPdmVycmlkZSB9fQp7ey0gJGhvc3QgOj0gcHJpbnRmICIlcyIgLlZhbHVlcy5zdG9yYWdlLmNhc3NhbmRyYS5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gcHJpbnRmICIlczolcyIgJGhvc3QgJHBvcnQgfX0Ke3stIGVsc2UgfX0Ke3stICRob3N0IDo9IHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgImNhc3NhbmRyYSIgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gcHJpbnRmICIlczolcyIgJGhvc3QgJHBvcnQgfX0Ke3stIGVuZCAtfX0Ke3stIGVsc2UgfX0Ke3stIHByaW50ZiAiJXM6JXMiIC5WYWx1ZXMuc3RvcmFnZS5jYXNzYW5kcmEuaG9zdCAkcG9ydCB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAiZWxhc3RpY3NlYXJjaC5jbGllbnQudXJsIiAtfX0Ke3stICRwb3J0IDo9IC5WYWx1ZXMuc3RvcmFnZS5lbGFzdGljc2VhcmNoLnBvcnQgfCB0b1N0cmluZyAtfX0Ke3stIGlmIC5WYWx1ZXMucHJvdmlzaW9uRGF0YVN0b3JlLmVsYXN0aWNzZWFyY2ggLX19Cnt7LSBpZiAuVmFsdWVzLnN0b3JhZ2UuZWxhc3RpY3NlYXJjaC5uYW1lT3ZlcnJpZGUgfX0Ke3stICRob3N0IDo9IHByaW50ZiAiJXMiIC5WYWx1ZXMuc3RvcmFnZS5lbGFzdGljc2VhcmNoLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBwcmludGYgIiVzOi8vJXM6JXMiIC5WYWx1ZXMuc3RvcmFnZS5lbGFzdGljc2VhcmNoLnNjaGVtZSAkaG9zdCAkcG9ydCB9fQp7ey0gZWxzZSB9fQp7ey0gJGhvc3QgOj0gcHJpbnRmICIlcy0lcy0lcyIgLlJlbGVhc2UuTmFtZSAiZWxhc3RpY3NlYXJjaCIgImNsaWVudCIgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gcHJpbnRmICIlczovLyVzOiVzIiAuVmFsdWVzLnN0b3JhZ2UuZWxhc3RpY3NlYXJjaC5zY2hlbWUgJGhvc3QgJHBvcnQgfX0Ke3stIGVuZCAtfX0Ke3stIGVsc2UgfX0Ke3stIHByaW50ZiAiJXM6Ly8lczolcyIgLlZhbHVlcy5zdG9yYWdlLmVsYXN0aWNzZWFyY2guc2NoZW1lIC5WYWx1ZXMuc3RvcmFnZS5lbGFzdGljc2VhcmNoLmhvc3QgJHBvcnQgfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LSBkZWZpbmUgImphZWdlci5jb2xsZWN0b3IuaG9zdC1wb3J0IiAtfX0Ke3stIGlmIC5WYWx1ZXMuYWdlbnQuY29sbGVjdG9yLmhvc3QgfX0Ke3stIHByaW50ZiAiJXM6JXMiIC5WYWx1ZXMuYWdlbnQuY29sbGVjdG9yLmhvc3QgKGRlZmF1bHQgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS50Y2hhbm5lbFBvcnQgLlZhbHVlcy5hZ2VudC5jb2xsZWN0b3IucG9ydCB8IHRvU3RyaW5nKSB9fQp7ey0gZWxzZSB9fQp7ey0gcHJpbnRmICIlczolcyIgKGluY2x1ZGUgImphZWdlci5jb2xsZWN0b3IubmFtZSIgLikgKGRlZmF1bHQgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS50Y2hhbm5lbFBvcnQgLlZhbHVlcy5hZ2VudC5jb2xsZWN0b3IucG9ydCB8IHRvU3RyaW5nKSB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3stIGRlZmluZSAiamFlZ2VyLmhvdHJvZC50cmFjaW5nLmhvc3QiIC19fQp7ey0gJGhvc3QgOj0gcHJpbnRmICIlcy1hZ2VudCIgKGluY2x1ZGUgImphZWdlci5hZ2VudC5uYW1lIiAuKSAtfX0Ke3stIGRlZmF1bHQgJGhvc3QgLlZhbHVlcy5ob3Ryb2QudHJhY2luZy5ob3N0IC19fQp7ey0gZW5kIC19fQoKe3svKgpDb25maWd1cmUgbGlzdCBvZiBJUCBDSURScyBhbGxvd2VkIGFjY2VzcyB0byBsb2FkIGJhbGFuY2VyIChpZiBzdXBwb3J0ZWQpCiovfX0Ke3stIGRlZmluZSAibG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIiAtfX0Ke3stIGlmIC5zZXJ2aWNlLmxvYWRCYWxhbmNlclNvdXJjZVJhbmdlcyB9fQogIGxvYWRCYWxhbmNlclNvdXJjZVJhbmdlczoKICB7ey0gcmFuZ2UgJGNpZHIgOj0gLnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIH19CiAgICAtIHt7ICRjaWRyIH19CiAge3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/agent-ds.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuYWdlbnQuZW5hYmxlZCAtfX0KYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmFnZW50Lm5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBhZ2VudC1kYWVtb25zZXQKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgY29tcG9uZW50OiBhZ2VudAogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Ke3stIGlmIC5WYWx1ZXMuYWdlbnQuYW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuYWdlbnQuYW5ub3RhdGlvbnMgfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19CnNwZWM6CiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKe3stIGlmIC5WYWx1ZXMuYWdlbnQucG9kQW5ub3RhdGlvbnMgfX0KICAgICAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLmFnZW50LnBvZEFubm90YXRpb25zIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLm5hbWUiIC4gfX0KICAgICAgICBjb21wb25lbnQ6IGFnZW50CiAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICAgIGphZWdlci1pbmZyYTogYWdlbnQtaW5zdGFuY2UKe3stIGlmIC5WYWx1ZXMuYWdlbnQucG9kTGFiZWxzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLmFnZW50LnBvZExhYmVscyB8IGluZGVudCA4IH19Cnt7LSBlbmQgfX0KICAgIHNwZWM6CiAgICAgIHt7LSBpZiAuVmFsdWVzLmFnZW50LnVzZUhvc3ROZXR3b3JrIH19CiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIHt7LSBlbmQgfX0KICAgICAgZG5zUG9saWN5OiB7eyAuVmFsdWVzLmFnZW50LmRuc1BvbGljeSB9fQogICAgICBub2RlU2VsZWN0b3I6Cnt7IHRvWWFtbCAuVmFsdWVzLmFnZW50Lm5vZGVTZWxlY3RvciB8IGluZGVudCA4IH19Cnt7LSBpZiAuVmFsdWVzLmFnZW50LnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5hZ2VudC50b2xlcmF0aW9ucyB8IGluZGVudCA4IH19Cnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmFnZW50Lm5hbWUiIC4gfX0KICAgICAgICBpbWFnZToge3sgLlZhbHVlcy5hZ2VudC5pbWFnZSB9fTp7eyAuVmFsdWVzLnRhZyB9fQogICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5hZ2VudC5wdWxsUG9saWN5IH19CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQ09MTEVDVE9SX0hPU1RfUE9SVAogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgIGtleTogY29sbGVjdG9yLmhvc3QtcG9ydAogICAgICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy5hZ2VudC5jbWRsaW5lUGFyYW1zIH19CiAgICAgICAgLSBuYW1lOiB7eyAka2V5IHwgcmVwbGFjZSAiLiIgIl8iIHwgcmVwbGFjZSAiLSIgIl8iIHwgdXBwZXIgfCBxdW90ZSB9fQogICAgICAgICAgdmFsdWU6IHt7ICR2YWx1ZSB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IHt7IC5WYWx1ZXMuYWdlbnQuc2VydmljZS56aXBraW5UaHJpZnRQb3J0IH19CiAgICAgICAgICBwcm90b2NvbDogVURQCiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5hZ2VudC5kYWVtb25zZXQudXNlSG9zdFBvcnQgfX0KICAgICAgICAgIGhvc3RQb3J0OiB7eyAuVmFsdWVzLmFnZW50LnNlcnZpY2Uuemlwa2luVGhyaWZ0UG9ydCB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLmNvbXBhY3RQb3J0IH19CiAgICAgICAgICBwcm90b2NvbDogVURQCiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5hZ2VudC5kYWVtb25zZXQudXNlSG9zdFBvcnQgfX0KICAgICAgICAgIGhvc3RQb3J0OiB7eyAuVmFsdWVzLmFnZW50LnNlcnZpY2UuY29tcGFjdFBvcnQgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IHt7IC5WYWx1ZXMuYWdlbnQuc2VydmljZS5iaW5hcnlQb3J0IH19CiAgICAgICAgICBwcm90b2NvbDogVURQCiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5hZ2VudC5kYWVtb25zZXQudXNlSG9zdFBvcnQgfX0KICAgICAgICAgIGhvc3RQb3J0OiB7eyAuVmFsdWVzLmFnZW50LnNlcnZpY2UuYmluYXJ5UG9ydCB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLnNhbXBsaW5nUG9ydCB9fQogICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgICAge3stIGlmIC5WYWx1ZXMuYWdlbnQuZGFlbW9uc2V0LnVzZUhvc3RQb3J0IH19CiAgICAgICAgICBob3N0UG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLnNhbXBsaW5nUG9ydCB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHJlc291cmNlczoKe3sgdG9ZYW1sIC5WYWx1ZXMuYWdlbnQucmVzb3VyY2VzIHwgaW5kZW50IDEwIH19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/agent-svc.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuYWdlbnQuZW5hYmxlZCAtfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmFnZW50Lm5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBhZ2VudC1zZXJ2aWNlCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGNvbXBvbmVudDogYWdlbnQKICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBpZiAuVmFsdWVzLmFnZW50LnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuYWdlbnQuc2VydmljZS5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGFnZW50LXppcGtpbi10aHJpZnQKICAgIHBvcnQ6IHt7IC5WYWx1ZXMuYWdlbnQuc2VydmljZS56aXBraW5UaHJpZnRQb3J0IH19CiAgICBwcm90b2NvbDogVURQCiAgICB0YXJnZXRQb3J0OiB7eyAuVmFsdWVzLmFnZW50LnNlcnZpY2Uuemlwa2luVGhyaWZ0UG9ydCB9fQogIC0gbmFtZTogYWdlbnQtY29tcGFjdAogICAgcG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLmNvbXBhY3RQb3J0IH19CiAgICBwcm90b2NvbDogVURQCiAgICB0YXJnZXRQb3J0OiB7eyAuVmFsdWVzLmFnZW50LnNlcnZpY2UuY29tcGFjdFBvcnQgfX0KICAtIG5hbWU6IGFnZW50LWJpbmFyeQogICAgcG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLmJpbmFyeVBvcnQgfX0KICAgIHByb3RvY29sOiBVRFAKICAgIHRhcmdldFBvcnQ6IHt7IC5WYWx1ZXMuYWdlbnQuc2VydmljZS5iaW5hcnlQb3J0IH19CiAgLSBuYW1lOiBhZ2VudC1zYW1wbGluZwogICAgcG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLnNhbXBsaW5nUG9ydCB9fQogICAgcHJvdG9jb2w6IFRDUAogICAgdGFyZ2V0UG9ydDoge3sgLlZhbHVlcy5hZ2VudC5zZXJ2aWNlLnNhbXBsaW5nUG9ydCB9fQogIHR5cGU6IHt7IC5WYWx1ZXMuYWdlbnQuc2VydmljZS50eXBlIH19CiAgc2VsZWN0b3I6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgY29tcG9uZW50OiBhZ2VudAogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgamFlZ2VyLWluZnJhOiBhZ2VudC1pbnN0YW5jZQp7ey0gdGVtcGxhdGUgImxvYWRCYWxhbmNlclNvdXJjZVJhbmdlcyIgLlZhbHVlcy5hZ2VudCB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/cassandra-schema-job.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuY29sbGVjdG9yLmVuYWJsZWQgLX19Cnt7LSBpZiBlcSAuVmFsdWVzLnN0b3JhZ2UudHlwZSAiY2Fzc2FuZHJhIiAtfX0KYXBpVmVyc2lvbjogYmF0Y2gvdjEKa2luZDogSm9iCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0tY2Fzc2FuZHJhLXNjaGVtYQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICBqYWVnZXItaW5mcmE6IGNhc3NhbmRyYS1zY2hlbWEtam9iCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGNvbXBvbmVudDogY2Fzc2FuZHJhLXNjaGVtYQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Ke3stIGlmIC5WYWx1ZXMuc2NoZW1hLmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnNjaGVtYS5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICBhY3RpdmVEZWFkbGluZVNlY29uZHM6IDEyMAogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0tY2Fzc2FuZHJhLXNjaGVtYQp7ey0gaWYgLlZhbHVlcy5zY2hlbWEucG9kTGFiZWxzIH19CiAgICAgIGxhYmVsczoKe3sgdG9ZYW1sIC5WYWx1ZXMuc2NoZW1hLnBvZExhYmVscyB8IGluZGVudCA4IH19Cnt7LSBlbmQgfX0KICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fS1jYXNzYW5kcmEtc2NoZW1hCiAgICAgICAgaW1hZ2U6IHt7IC5WYWx1ZXMuc2NoZW1hLmltYWdlIH19Ont7IC5WYWx1ZXMudGFnIH19CiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLnNjaGVtYS5wdWxsUG9saWN5IH19CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQ1FMU0hfSE9TVAogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgIGtleTogY2Fzc2FuZHJhLnNlcnZlcnMKICAgICAgICAtIG5hbWU6IE1PREUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICBrZXk6IGNhc3NhbmRyYS5zY2hlbWEubW9kZQogICAgICAgIC0gbmFtZTogREFUQUNFTlRFUgogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgIGtleTogY2Fzc2FuZHJhLmRhdGFjZW50ZXIubmFtZQogICAgICAgIC0gbmFtZTogQ0FTU0FORFJBX1BPUlQKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICBrZXk6IGNhc3NhbmRyYS5wb3J0CiAgICAgICAgcmVzb3VyY2VzOgp7eyB0b1lhbWwgLlZhbHVlcy5zY2hlbWEucmVzb3VyY2VzIHwgaW5kZW50IDEwIH19CiAgICAgIHJlc3RhcnRQb2xpY3k6IE9uRmFpbHVyZQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/collector-deploy.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuY29sbGVjdG9yLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuY29sbGVjdG9yLm5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBjb2xsZWN0b3ItZGVwbG95bWVudAogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICBjb21wb25lbnQ6IGNvbGxlY3RvcgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Ke3stIGlmIC5WYWx1ZXMuY29sbGVjdG9yLmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLmNvbGxlY3Rvci5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5jb2xsZWN0b3IucmVwbGljYUNvdW50IH19CiAgc3RyYXRlZ3k6CiAgICB0eXBlOiBSZWNyZWF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6Cnt7LSBpZiAuVmFsdWVzLmNvbGxlY3Rvci5wb2RBbm5vdGF0aW9ucyB9fQogICAgICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuY29sbGVjdG9yLnBvZEFubm90YXRpb25zIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLm5hbWUiIC4gfX0KICAgICAgICBjb21wb25lbnQ6IGNvbGxlY3RvcgogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgICBqYWVnZXItaW5mcmE6IGNvbGxlY3Rvci1wb2QKe3stIGlmIC5WYWx1ZXMuY29sbGVjdG9yLnBvZExhYmVscyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5jb2xsZWN0b3IucG9kTGFiZWxzIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQogICAgc3BlYzoKICAgICAgbm9kZVNlbGVjdG9yOgp7eyB0b1lhbWwgLlZhbHVlcy5jb2xsZWN0b3Iubm9kZVNlbGVjdG9yIHwgaW5kZW50IDggfX0Ke3stIGlmIC5WYWx1ZXMuY29sbGVjdG9yLnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5jb2xsZWN0b3IudG9sZXJhdGlvbnMgfCBpbmRlbnQgOCB9fQp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5jb2xsZWN0b3IubmFtZSIgLiB9fQogICAgICAgIGltYWdlOiB7eyAuVmFsdWVzLmNvbGxlY3Rvci5pbWFnZSB9fTp7eyAuVmFsdWVzLnRhZyB9fQogICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5jb2xsZWN0b3IucHVsbFBvbGljeSB9fQogICAgICAgIGVudjoKICAgICAgICAgIC0gbmFtZTogU1BBTl9TVE9SQUdFX1RZUEUKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogc3Bhbi1zdG9yYWdlLnR5cGUKICAgICAgICAgIHt7LSBpZiBlcSAuVmFsdWVzLnN0b3JhZ2UudHlwZSAiY2Fzc2FuZHJhIiB9fQogICAgICAgICAgLSBuYW1lOiBDQVNTQU5EUkFfU0VSVkVSUwogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAga2V5OiBjYXNzYW5kcmEuc2VydmVycwogICAgICAgICAgLSBuYW1lOiBDQVNTQU5EUkFfUE9SVAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAga2V5OiBjYXNzYW5kcmEucG9ydAogICAgICAgICAgLSBuYW1lOiBDQVNTQU5EUkFfS0VZU1BBQ0UKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogY2Fzc2FuZHJhLmtleXNwYWNlCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgZXEgLlZhbHVlcy5zdG9yYWdlLnR5cGUgImVsYXN0aWNzZWFyY2giIH19CiAgICAgICAgICAtIG5hbWU6IEVTX1BBU1NXT1JECiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICBrZXk6IGVzLnBhc3N3b3JkCiAgICAgICAgICAtIG5hbWU6IEVTX1NFUlZFUl9VUkxTCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICBrZXk6IGVzLnNlcnZlci11cmxzCiAgICAgICAgICAtIG5hbWU6IEVTX1VTRVJOQU1FCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICBrZXk6IGVzLnVzZXJuYW1lCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAtIG5hbWU6IENPTExFQ1RPUl9QT1JUCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICBrZXk6IGNvbGxlY3Rvci5wb3J0CiAgICAgICAgICAtIG5hbWU6IENPTExFQ1RPUl9IVFRQX1BPUlQKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogY29sbGVjdG9yLmh0dHAtcG9ydAogICAgICAgICAgLSBuYW1lOiBDT0xMRUNUT1JfWklQS0lOX0hUVFBfUE9SVAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAga2V5OiBjb2xsZWN0b3Iuemlwa2luLmh0dHAtcG9ydAogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS50Y2hhbm5lbFBvcnQgfX0KICAgICAgICAgIG5hbWU6IHRjaGFubmVsCiAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgLSBjb250YWluZXJQb3J0OiB7eyAuVmFsdWVzLmNvbGxlY3Rvci5zZXJ2aWNlLmh0dHBQb3J0IH19CiAgICAgICAgICBuYW1lOiBodHRwCiAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgLSBjb250YWluZXJQb3J0OiB7eyAuVmFsdWVzLmNvbGxlY3Rvci5zZXJ2aWNlLmhlYWx0aENoZWNrUG9ydCB9fQogICAgICAgICAgbmFtZTogaGVhbHRoY2hlY2sKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IHt7IC5WYWx1ZXMuY29sbGVjdG9yLnNlcnZpY2Uuemlwa2luUG9ydCB9fQogICAgICAgICAgbmFtZTogemlwa2luCiAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBwb3J0OiBoZWFsdGhjaGVjawogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTAKICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgcG9ydDogaGVhbHRoY2hlY2sKICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDEwCiAgICAgICAgcmVzb3VyY2VzOgp7eyB0b1lhbWwgLlZhbHVlcy5jb2xsZWN0b3IucmVzb3VyY2VzIHwgaW5kZW50IDEwIH19CiAgICAgIGRuc1BvbGljeToge3sgLlZhbHVlcy5jb2xsZWN0b3IuZG5zUG9saWN5IH19CiAgICAgIHJlc3RhcnRQb2xpY3k6IEFsd2F5cwp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/collector-svc.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuY29sbGVjdG9yLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5jb2xsZWN0b3IubmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICBqYWVnZXItaW5mcmE6IGNvbGxlY3Rvci1zZXJ2aWNlCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGNvbXBvbmVudDogY29sbGVjdG9yCiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQp7ey0gaWYgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGphZWdlci1jb2xsZWN0b3ItdGNoYW5uZWwKICAgIHBvcnQ6IHt7IC5WYWx1ZXMuY29sbGVjdG9yLnNlcnZpY2UudGNoYW5uZWxQb3J0IH19CiAgICBwcm90b2NvbDogVENQCiAgICB7ey0gaWYgZXEgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS50eXBlICJOb2RlUG9ydCIgfX0KICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLmNvbGxlY3Rvci5zZXJ2aWNlLnRjaGFubmVsUG9ydCB9fQogICAge3stIGVsc2UgfX0KICAgIHRhcmdldFBvcnQ6IHRjaGFubmVsCiAgICB7ey0gZW5kIH19CiAgLSBuYW1lOiBqYWVnZXItY29sbGVjdG9yLWh0dHAKICAgIHBvcnQ6IHt7IC5WYWx1ZXMuY29sbGVjdG9yLnNlcnZpY2UuaHR0cFBvcnQgfX0KICAgIHByb3RvY29sOiBUQ1AKICAgIHt7LSBpZiBlcSAuVmFsdWVzLmNvbGxlY3Rvci5zZXJ2aWNlLnR5cGUgIk5vZGVQb3J0IiB9fQogICAgbm9kZVBvcnQ6IHt7IC5WYWx1ZXMuY29sbGVjdG9yLnNlcnZpY2UuaHR0cFBvcnQgfX0KICAgIHt7LSBlbHNlIH19CiAgICB0YXJnZXRQb3J0OiBodHRwCiAgICB7ey0gZW5kIH19CiAgLSBuYW1lOiBqYWVnZXItY29sbGVjdG9yLXppcGtpbgogICAgcG9ydDoge3sgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS56aXBraW5Qb3J0IH19CiAgICBwcm90b2NvbDogVENQCiAgICB7ey0gaWYgZXEgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS50eXBlICJOb2RlUG9ydCIgfX0KICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLmNvbGxlY3Rvci5zZXJ2aWNlLnppcGtpblBvcnQgfX0KICAgIHt7LSBlbHNlIH19CiAgICB0YXJnZXRQb3J0OiB6aXBraW4KICAgIHt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICBjb21wb25lbnQ6IGNvbGxlY3RvcgogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgamFlZ2VyLWluZnJhOiBjb2xsZWN0b3ItcG9kCiAgdHlwZToge3sgLlZhbHVlcy5jb2xsZWN0b3Iuc2VydmljZS50eXBlIH19Cnt7LSB0ZW1wbGF0ZSAibG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIiAuVmFsdWVzLmNvbGxlY3RvciB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/common-cm.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBjb21tb24tY29uZmlnbWFwCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CmRhdGE6CiAgY2Fzc2FuZHJhLmNvbnRhY3QtcG9pbnRzOiB7eyB0ZW1wbGF0ZSAiY2Fzc2FuZHJhLmNvbnRhY3RfcG9pbnRzIiAuIH19CiAgY2Fzc2FuZHJhLmRhdGFjZW50ZXIubmFtZToge3sgLlZhbHVlcy5jYXNzYW5kcmEuY29uZmlnLmRjX25hbWUgfCBxdW90ZSB9fQogIGNhc3NhbmRyYS5rZXlzcGFjZToge3sgcHJpbnRmICIlc18lcyIgImphZWdlcl92MSIgLlZhbHVlcy5jYXNzYW5kcmEuY29uZmlnLmRjX25hbWUgfCBxdW90ZSB9fQogIGNhc3NhbmRyYS5wb3J0OiB7eyAuVmFsdWVzLnN0b3JhZ2UuY2Fzc2FuZHJhLnBvcnQgfCBxdW90ZSB9fQogIGNhc3NhbmRyYS5zY2hlbWEubW9kZToge3sgLlZhbHVlcy5zY2hlbWEubW9kZSB8IHF1b3RlIH19CiAgY2Fzc2FuZHJhLnNlcnZlcnM6IHt7IHRlbXBsYXRlICJjYXNzYW5kcmEuaG9zdCIgLiB9fQogIGNvbGxlY3Rvci5ob3N0LXBvcnQ6IHt7IHRlbXBsYXRlICJqYWVnZXIuY29sbGVjdG9yLmhvc3QtcG9ydCIgLiB9fQogIGNvbGxlY3Rvci5odHRwLXBvcnQ6IHt7IC5WYWx1ZXMuY29sbGVjdG9yLnNlcnZpY2UuaHR0cFBvcnQgfCBxdW90ZSB9fQogIGNvbGxlY3Rvci5wb3J0OiB7eyAuVmFsdWVzLmNvbGxlY3Rvci5zZXJ2aWNlLnRjaGFubmVsUG9ydCB8IHF1b3RlIH19CiAgY29sbGVjdG9yLnppcGtpbi5odHRwLXBvcnQ6IHt7IC5WYWx1ZXMuY29sbGVjdG9yLnNlcnZpY2Uuemlwa2luUG9ydCB8IHF1b3RlIH19CiAgZXMucGFzc3dvcmQ6IHt7IC5WYWx1ZXMuc3RvcmFnZS5lbGFzdGljc2VhcmNoLnBhc3N3b3JkIH19CiAgZXMuc2VydmVyLXVybHM6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmNsaWVudC51cmwiIC4gfX0KICBlcy51c2VybmFtZToge3sgLlZhbHVlcy5zdG9yYWdlLmVsYXN0aWNzZWFyY2gudXNlciB9fQogIGVzLm5vZGVzLXdhbi1vbmx5OiB7eyAuVmFsdWVzLnN0b3JhZ2UuZWxhc3RpY3NlYXJjaC5ub2Rlc1dhbk9ubHkgfCBxdW90ZSB9fQogIGhvdHJvZC5hZ2VudC1ob3N0LXBvcnQ6ICJ7eyB0ZW1wbGF0ZSAiamFlZ2VyLmhvdHJvZC50cmFjaW5nLmhvc3QiIC4gfX06e3sgLlZhbHVlcy5ob3Ryb2QudHJhY2luZy5wb3J0IH19IgogIHNwYW4tc3RvcmFnZS50eXBlOiB7eyAuVmFsdWVzLnN0b3JhZ2UudHlwZSB8IHF1b3RlIH19CiAgcXVlcnkuaGVhbHRoLWNoZWNrLWh0dHAtcG9ydDoge3sgLlZhbHVlcy5xdWVyeS5oZWFsdGhDaGVja1BvcnQgfCBxdW90ZSB9fQogIHF1ZXJ5LnBvcnQ6IHt7IC5WYWx1ZXMucXVlcnkuc2VydmljZS50YXJnZXRQb3J0IHwgcXVvdGUgfX0KICAjIE5vdCBpbXBsZW1lbnRlZAogICMgY2Fzc2FuZHJhLmFyY2hpdmUuY29ubmVjdGlvbnMtcGVyLWhvc3Q6CiAgIyBjYXNzYW5kcmEuYXJjaGl2ZS5rZXlzcGFjZToKICAjIGNhc3NhbmRyYS5hcmNoaXZlLm1heC1yZXRyeS1hdHRlbXB0czoKICAjIGNhc3NhbmRyYS5hcmNoaXZlLnBhc3N3b3JkOgogICMgY2Fzc2FuZHJhLmFyY2hpdmUucG9ydDoKICAjIGNhc3NhbmRyYS5hcmNoaXZlLnByb3RvLXZlcnNpb246CiAgIyBjYXNzYW5kcmEuYXJjaGl2ZS5zZXJ2ZXJzOgogICMgY2Fzc2FuZHJhLmFyY2hpdmUuc29ja2V0LWtlZXAtYWxpdmU6CiAgIyBjYXNzYW5kcmEuYXJjaGl2ZS50aW1lb3V0OgogICMgY2Fzc2FuZHJhLmFyY2hpdmUudXNlcm5hbWU6CiAgIyBjYXNzYW5kcmEuY29ubmVjdGlvbnMtcGVyLWhvc3Q6CiAgIyBjYXNzYW5kcmEubWF4LXJldHJ5LWF0dGVtcHRzOgogICMgY2Fzc2FuZHJhLnBhc3N3b3JkOgogICMgY2Fzc2FuZHJhLnByb3RvLXZlcnNpb246CiAgIyBjYXNzYW5kcmEuc29ja2V0LWtlZXAtYWxpdmU6CiAgIyBjYXNzYW5kcmEudGltZW91dDoKICAjIGNhc3NhbmRyYS51c2VybmFtZToKICAjIGNvbGxlY3Rvci5oZWFsdGgtY2hlY2staHR0cC1wb3J0OgogICMgY29sbGVjdG9yLm51bS13b3JrZXJzOgogICMgY29sbGVjdG9yLnF1ZXVlLXNpemU6CiAgIyBjb2xsZWN0b3Iud3JpdGUtY2FjaGUtdHRsOgogICMgZGVwZW5kZW5jeS1zdG9yYWdlLmRhdGEtZnJlcXVlbmN5OgogICMgZGlzY292ZXJ5Lm1pbi1wZWVyczoKICAjIGVzLmFyY2hpdmUubWF4LXNwYW4tYWdlOgogICMgZXMuYXJjaGl2ZS5udW0tcmVwbGljYXM6CiAgIyBlcy5hcmNoaXZlLm51bS1zaGFyZHM6CiAgIyBlcy5hcmNoaXZlLnBhc3N3b3JkOgogICMgZXMuYXJjaGl2ZS5zZXJ2ZXItdXJsczoKICAjIGVzLmFyY2hpdmUuc25pZmZlcjoKICAjIGVzLmFyY2hpdmUudXNlcm5hbWU6CiAgIyBlcy5tYXgtc3Bhbi1hZ2U6CiAgIyBlcy5udW0tcmVwbGljYXM6CiAgIyBlcy5udW0tc2hhcmRzOgogICMgZXMuc25pZmZlcjoKICAjIGh0dHAtc2VydmVyLmhvc3QtcG9ydDoKICAjIGxvZy1sZXZlbDoKICAjIG1ldHJpY3MtYmFja2VuZDoKICAjIG1ldHJpY3MtaHR0cC1yb3V0ZToKICAjIHByb2Nlc3Nvci5qYWVnZXItYmluYXJ5LnNlcnZlci1ob3N0LXBvcnQ6CiAgIyBwcm9jZXNzb3IuamFlZ2VyLWJpbmFyeS5zZXJ2ZXItbWF4LXBhY2tldC1zaXplOgogICMgcHJvY2Vzc29yLmphZWdlci1iaW5hcnkuc2VydmVyLXF1ZXVlLXNpemU6CiAgIyBwcm9jZXNzb3IuamFlZ2VyLWJpbmFyeS53b3JrZXJzOgogICMgcHJvY2Vzc29yLmphZWdlci1jb21wYWN0LnNlcnZlci1ob3N0LXBvcnQ6CiAgIyBwcm9jZXNzb3IuamFlZ2VyLWNvbXBhY3Quc2VydmVyLW1heC1wYWNrZXQtc2l6ZToKICAjIHByb2Nlc3Nvci5qYWVnZXItY29tcGFjdC5zZXJ2ZXItcXVldWUtc2l6ZToKICAjIHByb2Nlc3Nvci5qYWVnZXItY29tcGFjdC53b3JrZXJzOgogICMgcHJvY2Vzc29yLnppcGtpbi1jb21wYWN0LnNlcnZlci1ob3N0LXBvcnQ6CiAgIyBwcm9jZXNzb3Iuemlwa2luLWNvbXBhY3Quc2VydmVyLW1heC1wYWNrZXQtc2l6ZToKICAjIHByb2Nlc3Nvci56aXBraW4tY29tcGFjdC5zZXJ2ZXItcXVldWUtc2l6ZToKICAjIHByb2Nlc3Nvci56aXBraW4tY29tcGFjdC53b3JrZXJzOgogICMgcXVlcnkucHJlZml4OgogICMgcXVlcnkuc3RhdGljLWZpbGVzOgogICMgcXVlcnkudWktY29uZmlnOgo="
        },
        {
          "filePath": "templates/hotrod-deploy.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaG90cm9kLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0taG90cm9kCiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLm5hbWUiIC4gfX0KICAgIGphZWdlci1pbmZyYTogaG90cm9kLWRlcGxveW1lbnQKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgY29tcG9uZW50OiBob3Ryb2QKICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CnNwZWM6CiAgcmVwbGljYXM6IHt7IC5WYWx1ZXMuaG90cm9kLnJlcGxpY2FDb3VudCB9fQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgICAgIGNvbXBvbmVudDogaG90cm9kCiAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICAgIGphZWdlci1pbmZyYTogaG90cm9kLWluc3RhbmNlCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fS1ob3Ryb2QKICAgICAgICAgIGltYWdlOiB7eyAuVmFsdWVzLmhvdHJvZC5pbWFnZS5yZXBvc2l0b3J5IH19Ont7IC5WYWx1ZXMuaG90cm9kLmltYWdlLnRhZyB9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmhvdHJvZC5pbWFnZS5wdWxsUG9saWN5IH19CiAgICAgICAgICBlbnY6CiAgICAgICAgICAgIC0gbmFtZTogSkFFR0VSX0FHRU5UX0hPU1RfUE9SVAogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAgICBrZXk6IGhvdHJvZC5hZ2VudC1ob3N0LXBvcnQKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IHt7IC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19CiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC8KICAgICAgICAgICAgICBwb3J0OiB7eyAuVmFsdWVzLmhvdHJvZC5zZXJ2aWNlLmludGVybmFsUG9ydCB9fQogICAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19CiAgICAgICAgICByZXNvdXJjZXM6Cnt7IHRvWWFtbCAuVmFsdWVzLmhvdHJvZC5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmhvdHJvZC5ub2RlU2VsZWN0b3IgfX0KICAgICAgbm9kZVNlbGVjdG9yOgp7eyB0b1lhbWwgLlZhbHVlcy5ob3Ryb2Qubm9kZVNlbGVjdG9yIHwgaW5kZW50IDggfX0KICAgIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "templates/hotrod-ing.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaG90cm9kLmVuYWJsZWQgLX19Cnt7LSBpZiAuVmFsdWVzLmhvdHJvZC5pbmdyZXNzLmVuYWJsZWQgLX19Cnt7LSAkc2VydmljZU5hbWUgOj0gaW5jbHVkZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIC19fQp7ey0gJHNlcnZpY2VQb3J0IDo9IC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UuZXh0ZXJuYWxQb3J0IC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19LWhvdHJvZAogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICBqYWVnZXItaW5mcmE6IGhvdHJvZC1pbmdyZXNzCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGNvbXBvbmVudDogaG90cm9kCiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQp7ey0gaWYgLlZhbHVlcy5ob3Ryb2QuaW5ncmVzcy5hbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5ob3Ryb2QuaW5ncmVzcy5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICBydWxlczoKICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmhvdHJvZC5pbmdyZXNzLmhvc3RzIH19CiAgICAtIGhvc3Q6IHt7ICRob3N0IH19CiAgICAgIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIHBhdGg6IC8KICAgICAgICAgICAgYmFja2VuZDoKICAgICAgICAgICAgICBzZXJ2aWNlTmFtZToge3sgJHNlcnZpY2VOYW1lIH19LWhvdHJvZAogICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiB7eyAkc2VydmljZVBvcnQgfX0KICAgIHt7LSBlbmQgLX19CiAge3stIGlmIC5WYWx1ZXMuaG90cm9kLmluZ3Jlc3MudGxzIH19CiAgdGxzOgp7eyB0b1lhbWwgLlZhbHVlcy5ob3Ryb2QuaW5ncmVzcy50bHMgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/hotrod-svc.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaG90cm9kLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fS1ob3Ryb2QKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBob3Ryb2Qtc2VydmljZQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICBjb21wb25lbnQ6IGhvdHJvZAogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Ke3stIGlmIC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UuYW5ub3RhdGlvbnMgfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19CnNwZWM6CiAgdHlwZToge3sgLlZhbHVlcy5ob3Ryb2Quc2VydmljZS50eXBlIH19CiAgcG9ydHM6CiAgICAtIG5hbWU6IHt7IC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UubmFtZSB9fQogICAgICBwb3J0OiB7eyAuVmFsdWVzLmhvdHJvZC5zZXJ2aWNlLmV4dGVybmFsUG9ydCB9fQogICAgICBwcm90b2NvbDogVENQCiAgICAgIHRhcmdldFBvcnQ6IHt7IC5WYWx1ZXMuaG90cm9kLnNlcnZpY2UuaW50ZXJuYWxQb3J0IH19CiAgc2VsZWN0b3I6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgY29tcG9uZW50OiBob3Ryb2QKICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGphZWdlci1pbmZyYTogaG90cm9kLWluc3RhbmNlCnt7LSB0ZW1wbGF0ZSAibG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIiAuVmFsdWVzLmhvdHJvZCB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/query-deploy.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucXVlcnkuZW5hYmxlZCAtfX0KYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5xdWVyeS5uYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLm5hbWUiIC4gfX0KICAgIGphZWdlci1pbmZyYTogcXVlcnktZGVwbG95bWVudAogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICBjb21wb25lbnQ6IHF1ZXJ5CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQp7ey0gaWYgLlZhbHVlcy5xdWVyeS5hbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5xdWVyeS5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5xdWVyeS5yZXBsaWNhQ291bnQgfX0KICBzdHJhdGVneToKICAgIHR5cGU6IFJlY3JlYXRlCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKe3stIGlmIC5WYWx1ZXMucXVlcnkucG9kQW5ub3RhdGlvbnMgfX0KICAgICAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnF1ZXJ5LnBvZEFubm90YXRpb25zIHwgaW5kZW50IDggfX0Ke3stIGVuZCB9fQogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLm5hbWUiIC4gfX0KICAgICAgICBjb21wb25lbnQ6IHF1ZXJ5CiAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICAgIGphZWdlci1pbmZyYTogcXVlcnktcG9kCnt7LSBpZiAuVmFsdWVzLnF1ZXJ5LnBvZExhYmVscyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5xdWVyeS5wb2RMYWJlbHMgfCBpbmRlbnQgOCB9fQp7ey0gZW5kIH19CiAgICBzcGVjOgogICAgICBub2RlU2VsZWN0b3I6Cnt7IHRvWWFtbCAuVmFsdWVzLnF1ZXJ5Lm5vZGVTZWxlY3RvciB8IGluZGVudCA4IH19Cnt7LSBpZiAuVmFsdWVzLnF1ZXJ5LnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5xdWVyeS50b2xlcmF0aW9ucyB8IGluZGVudCA4IH19Cnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLnF1ZXJ5Lm5hbWUiIC4gfX0KICAgICAgICBpbWFnZToge3sgLlZhbHVlcy5xdWVyeS5pbWFnZSB9fTp7eyAuVmFsdWVzLnRhZyB9fQogICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5xdWVyeS5wdWxsUG9saWN5IH19CiAgICAgICAgZW52OgogICAgICAgICAgLSBuYW1lOiBTUEFOX1NUT1JBR0VfVFlQRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAga2V5OiBzcGFuLXN0b3JhZ2UudHlwZQogICAgICAgICAge3stIGlmIGVxIC5WYWx1ZXMuc3RvcmFnZS50eXBlICJjYXNzYW5kcmEiIH19CiAgICAgICAgICAtIG5hbWU6IENBU1NBTkRSQV9TRVJWRVJTCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICBrZXk6IGNhc3NhbmRyYS5zZXJ2ZXJzCiAgICAgICAgICAtIG5hbWU6IENBU1NBTkRSQV9QT1JUCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICBrZXk6IGNhc3NhbmRyYS5wb3J0CiAgICAgICAgICAtIG5hbWU6IENBU1NBTkRSQV9LRVlTUEFDRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAga2V5OiBjYXNzYW5kcmEua2V5c3BhY2UKICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiBlcSAuVmFsdWVzLnN0b3JhZ2UudHlwZSAiZWxhc3RpY3NlYXJjaCIgfX0KICAgICAgICAgIC0gbmFtZTogRVNfUEFTU1dPUkQKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogZXMucGFzc3dvcmQKICAgICAgICAgIC0gbmFtZTogRVNfU0VSVkVSX1VSTFMKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogZXMuc2VydmVyLXVybHMKICAgICAgICAgIC0gbmFtZTogRVNfVVNFUk5BTUUKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogZXMudXNlcm5hbWUKICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIC0gbmFtZTogUVVFUllfUE9SVAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAga2V5OiBxdWVyeS5wb3J0CiAgICAgICAgICAtIG5hbWU6IFFVRVJZX0hFQUxUSF9DSEVDS19IVFRQX1BPUlQKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgIGtleTogcXVlcnkuaGVhbHRoLWNoZWNrLWh0dHAtcG9ydAogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDoge3sgLlZhbHVlcy5xdWVyeS5zZXJ2aWNlLnRhcmdldFBvcnQgfX0KICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICByZXNvdXJjZXM6Cnt7IHRvWWFtbCAuVmFsdWVzLnF1ZXJ5LnJlc291cmNlcyB8IGluZGVudCAxMCB9fQogICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICBwb3J0OiB7eyAuVmFsdWVzLnF1ZXJ5LmhlYWx0aENoZWNrUG9ydCB9fQogICAgICBkbnNQb2xpY3k6IHt7IC5WYWx1ZXMucXVlcnkuZG5zUG9saWN5IH19CiAgICAgIHJlc3RhcnRQb2xpY3k6IEFsd2F5cwp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/query-ing.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucXVlcnkuaW5ncmVzcy5lbmFibGVkIC19fQp7ey0gJHNlcnZpY2VQb3J0IDo9IC5WYWx1ZXMucXVlcnkuc2VydmljZS5xdWVyeVBvcnQgLX19CmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIucXVlcnkubmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICBqYWVnZXItaW5mcmE6IHF1ZXJ5LWluZ3Jlc3MKICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgY29tcG9uZW50OiBxdWVyeQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICB7ey0gaWYgLlZhbHVlcy5xdWVyeS5pbmdyZXNzLmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnF1ZXJ5LmluZ3Jlc3MuYW5ub3RhdGlvbnMgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0Kc3BlYzoKICBydWxlczoKICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLnF1ZXJ5LmluZ3Jlc3MuaG9zdHMgfX0KICAgIC0gaG9zdDoge3sgJGhvc3QgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDogLwogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLnF1ZXJ5Lm5hbWUiICQgfX0KICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDoge3sgJHNlcnZpY2VQb3J0IH19CiAgICB7ey0gZW5kIC19fQogIHt7LSBpZiAuVmFsdWVzLnF1ZXJ5LmluZ3Jlc3MudGxzIH19CiAgdGxzOgp7eyB0b1lhbWwgLlZhbHVlcy5xdWVyeS5pbmdyZXNzLnRscyB8IGluZGVudCA0IH19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "templates/query-svc.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucXVlcnkuZW5hYmxlZCAtfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLnF1ZXJ5Lm5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBxdWVyeS1zZXJ2aWNlCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGNvbXBvbmVudDogcXVlcnkKICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBpZiAuVmFsdWVzLnF1ZXJ5LnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMucXVlcnkuc2VydmljZS5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGphZWdlci1xdWVyeQogICAgcG9ydDoge3sgLlZhbHVlcy5xdWVyeS5zZXJ2aWNlLnF1ZXJ5UG9ydCB9fQogICAgcHJvdG9jb2w6IFRDUAogICAgdGFyZ2V0UG9ydDoge3sgLlZhbHVlcy5xdWVyeS5zZXJ2aWNlLnRhcmdldFBvcnQgfX0KICBzZWxlY3RvcjoKICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICBjb21wb25lbnQ6IHF1ZXJ5CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBqYWVnZXItaW5mcmE6IHF1ZXJ5LXBvZAogIHR5cGU6IHt7IC5WYWx1ZXMucXVlcnkuc2VydmljZS50eXBlIH19Cnt7LSB0ZW1wbGF0ZSAibG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIiAuVmFsdWVzLnF1ZXJ5IH19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/spark-cronjob.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuc3BhcmsuZW5hYmxlZCAtfX0Ke3stIGlmIG9yICguQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAiYmF0Y2gvdjFiZXRhMSIpICguQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAiYmF0Y2gvdjJhbHBoYTEiKSAtfX0KYXBpVmVyc2lvbjoge3sgdGVtcGxhdGUgImNyb25qb2IuYXBpVmVyc2lvbiIgJCB9fQpraW5kOiBDcm9uSm9iCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0tc3BhcmsKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJqYWVnZXIubmFtZSIgLiB9fQogICAgamFlZ2VyLWluZnJhOiBzcGFyay1jcm9uam9iCiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfCByZXBsYWNlICIrIiAiXyIgfX0KICAgIGNvbXBvbmVudDogc3BhcmsKICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBpZiAuVmFsdWVzLnNwYXJrLmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnNwYXJrLmFubm90YXRpb25zIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQpzcGVjOgogIHNjaGVkdWxlOiB7eyAuVmFsdWVzLnNwYXJrLnNjaGVkdWxlIHwgcXVvdGUgfX0KICBzdWNjZXNzZnVsSm9ic0hpc3RvcnlMaW1pdDoge3sgLlZhbHVlcy5zcGFyay5zdWNjZXNzZnVsSm9ic0hpc3RvcnlMaW1pdCB9fQogIGZhaWxlZEpvYnNIaXN0b3J5TGltaXQ6IHt7IC5WYWx1ZXMuc3BhcmsuZmFpbGVkSm9ic0hpc3RvcnlMaW1pdCB9fQogIGpvYlRlbXBsYXRlOgogICAgc3BlYzoKICAgICAgdGVtcGxhdGU6CiAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICBsYWJlbHM6CiAgICAgICAgICAgIGFwcDoge3sgdGVtcGxhdGUgImphZWdlci5uYW1lIiAuIH19CiAgICAgICAgICAgIGNvbXBvbmVudDogc3BhcmsKICAgICAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICAgICAgICBqYWVnZXItaW5mcmE6IHNwYXJrLWluc3RhbmNlCiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNwYXJrLnBvZExhYmVscyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5zcGFyay5wb2RMYWJlbHMgfCBpbmRlbnQgMTIgfX0KICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHNwZWM6CiAgICAgICAgICBub2RlU2VsZWN0b3I6Cnt7IHRvWWFtbCAuVmFsdWVzLnNwYXJrLm5vZGVTZWxlY3RvciB8IGluZGVudCAxMiB9fQp7ey0gaWYgLlZhbHVlcy5zcGFyay50b2xlcmF0aW9ucyB9fQogICAgICB0b2xlcmF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuc3BhcmsudG9sZXJhdGlvbnMgfCBpbmRlbnQgOCB9fQp7ey0gZW5kIH19CiAgICAgICAgICBjb250YWluZXJzOgogICAgICAgICAgLSBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19LXNwYXJrCiAgICAgICAgICAgIGltYWdlOiB7eyAuVmFsdWVzLnNwYXJrLmltYWdlIH19Ont7IC5WYWx1ZXMuc3BhcmsudGFnIH19CiAgICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5zcGFyay5wdWxsUG9saWN5IH19CiAgICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBTVE9SQUdFCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogc3Bhbi1zdG9yYWdlLnR5cGUKICAgICAgICAgICAge3stIGlmIGVxIC5WYWx1ZXMuc3RvcmFnZS50eXBlICJjYXNzYW5kcmEiIH19CiAgICAgICAgICAgIC0gbmFtZTogQ0FTU0FORFJBX0NPTlRBQ1RfUE9JTlRTCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogY2Fzc2FuZHJhLmNvbnRhY3QtcG9pbnRzCiAgICAgICAgICAgIC0gbmFtZTogQ0FTU0FORFJBX0tFWVNQQUNFCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogY2Fzc2FuZHJhLmtleXNwYWNlCiAgICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7ey0gaWYgZXEgLlZhbHVlcy5zdG9yYWdlLnR5cGUgImVsYXN0aWNzZWFyY2giIH19CiAgICAgICAgICAgIC0gbmFtZTogRVNfTk9ERVMKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgICAga2V5OiBlcy5zZXJ2ZXItdXJscwogICAgICAgICAgICAtIG5hbWU6IEVTX05PREVTX1dBTl9PTkxZCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamFlZ2VyLmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogZXMubm9kZXMtd2FuLW9ubHkKICAgICAgICAgICAgLSBuYW1lOiBFU19QQVNTV09SRAogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgImphZWdlci5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgICAgICAgICBrZXk6IGVzLnBhc3N3b3JkCiAgICAgICAgICAgIC0gbmFtZTogRVNfVVNFUk5BTUUKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJqYWVnZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgICAgICAgICAgICAga2V5OiBlcy51c2VybmFtZQogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHJlc291cmNlczoKe3sgdG9ZYW1sIC5WYWx1ZXMuc3BhcmsucmVzb3VyY2VzIHwgaW5kZW50IDE0IH19CiAgICAgICAgICByZXN0YXJ0UG9saWN5OiBPbkZhaWx1cmUKe3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "values.yaml",
          "fileContents": ""
        }
      ]
    },
    "contentSHA": "a5d77ded8ae4a5e576b4d9c7187e9eb220bf1f9bf8c61e4ff9051e164f5e97b4"
  }
}