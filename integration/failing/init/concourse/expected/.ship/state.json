{
  "v1": {
    "config": {},
    "releaseName": "concourse",
    "helmValuesDefaults": "## Default values for Concourse Helm Chart.\n## This is a YAML-formatted file.\n## Declare variables to be passed into your templates.\n\n## Override the name of the Chart.\n##\n# nameOverride:\n\n## Concourse image.\n##\nimage: concourse/concourse\n\n## Concourse image version.\n## ref: https://hub.docker.com/r/concourse/concourse/tags/\n##\nimageTag: \"4.2.2\"\n\n## Specific image digest to use in place of a tag.\n## ref: https://kubernetes.io/docs/concepts/configuration/overview/#container-images\n##\n# imageDigest: sha256:54ea351808b55ecc14af6590732932e2a6a0ed8f6d10f45e8be3b51165d5526a\n\n## Specify a imagePullPolicy: 'Always' if imageTag is 'latest', else set to 'IfNotPresent'.\n## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n##\nimagePullPolicy: IfNotPresent\n\n## Optionally specify an array of imagePullSecrets.\n## Secrets must be manually created in the namespace.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n##\n# imagePullSecrets:\n#   - myRegistrKeySecretName\n\n## Configuration values for Concourse.\n## ref: https://concourse-ci.org/setting-up.html\n##\nconcourse:\n  web:\n    ## Minimum level of logs to see.\n    # logLevel: info\n    ## IP address on which to listen for web traffic.\n    # bindIp: 0.0.0.0\n    ## Port on which to listen for HTTP traffic.\n    bindPort: 8080\n    ## TLS configurations for the web component to be able to serve HTTPS traffic.\n    ## Once enabled, consumes the certificates set via secrets.\n    #\n    tls:\n      enabled: false\n      ## Port on which to listen for HTTPS traffic.\n      # bindPort:\n    ## URL used to reach any ATC from the outside world.\n    # externalUrl: http://127.0.0.1:8080\n    ## URL used to reach this ATC from other ATCs in the cluster.\n    # peerUrl: http://127.0.0.1:8080\n    ## Enable encryption of pipeline configuration. Encryption keys can be set via secrets.\n    ## See https://concourse-ci.org/encryption.html\n    ##\n    encryption:\n      enabled: false\n    localAuth:\n      enabled: true\n    ## IP address on which to listen for the pprof debugger endpoints.\n    # debugBindIp: 127.0.0.1\n    ## Port on which to listen for the pprof debugger endpoints.\n    # debugBindPort: 8079\n    ## Length of time for a intercepted session to be idle before terminating.\n    # interceptIdleTimeout: 0m\n    ## Time limit on checking for new versions of resources.\n    # globalResourceCheckTimeout: 1h\n    ## Interval on which to check for new versions of resources.\n    # resourceCheckingInterval: 1m\n    ## Interval on which to check for new versions of resource types.\n    # resourceTypeCheckingInterval: 1m\n    ## Method by which a worker is selected during container placement.\n    # containerPlacementStrategy: volume-locality\n    ## How long to wait for Baggageclaim to send the response header.\n    # baggageclaimResponseHeaderTimeout: 1m\n    ## Directory containing downloadable CLI binaries.\n    # cliArtifactsDir:\n    ## Log database queries.\n    # logDbQueries:\n    ## Interval on which to run build tracking.\n    # buildTrackerInterval: 10s\n    ## Default build logs to retain, 0 means all\n    # defaultBuildLogsToRetain:\n    ## Maximum build logs to retain, 0 means not specified. Will override values configured in jobs\n    # maxBuildLogsToRetain:\n    ## Default max number of cpu shares per task, 0 means unlimited\n    # defaultTaskCpuLimit:\n    ## Default maximum memory per task, 0 means unlimited\n    # defaultTaskMemoryLimit:\n    postgres:\n      ## The host to connect to.\n      host: 127.0.0.1\n      ## The port to connect to.\n      port: 5432\n      ## Path to a UNIX domain socket to connect to.\n      # socket:\n      ## Whether or not to use SSL.\n      sslmode: disable\n      ## Dialing timeout. (0 means wait indefinitely)\n      connectTimeout: 5m\n      ## The name of the database to use.\n      database: atc\n\n    kubernetes:\n\n      ## Enable the use of in-cluster Kubernetes Secrets.\n      ##\n      enabled: true\n\n      ## Prefix to use for Kubernetes namespaces under which secrets will be looked up. Defaults to\n      ## the Release name hyphen, e.g. \"my-release-\" produces namespace \"my-release-main\" for the\n      ## \"main\" Concourse team.\n      ##\n      ## namespacePrefix:\n\n      ## Teams to create namespaces for to hold secrets.\n      teams:\n        - main\n\n      ## Create the Kubernetes namespace for each team listed above.\n      createTeamNamespaces: true\n\n      ## When true, namespaces are not deleted when the release is deleted.\n      ## Irrelevant if the namespaces are not created by this chart.\n      keepNamespaces: true\n\n      ## Path to Kubernetes config when running ATC outside Kubernetes.\n      # configPath:\n\n    awsSecretsManager:\n      ## Enable the use of AWS Secrets Manager.\n      ##\n      enabled: false\n\n      ## AWS region to use when reading from Secrets Manager\n      ##\n      # region:\n\n      ## pipeline-specific template for Secrets Manager parameters, defaults to: /concourse/{team}/{pipeline}/{secret}\n      ##\n      # pipelineSecretTemplate:\n\n      ## team-specific template for Secrets Manager parameters, defaults to: /concourse/{team}/{secret}\n      ##\n      # teamSecretTemplate: ''\n\n    awsSsm:\n      ## Enable the use of AWS SSM.\n      ##\n      enabled: false\n\n      ## AWS region to use when reading from SSM\n      ##\n      # region:\n\n      ## pipeline-specific template for SSM parameters, defaults to: /concourse/{team}/{pipeline}/{secret}\n      ##\n      # pipelineSecretTemplate:\n\n      ## team-specific template for SSM parameters, defaults to: /concourse/{team}/{secret}\n      ##\n      # teamSecretTemplate: ''\n\n\n    vault:\n      enabled: false\n\n      ## URL pointing to vault addr (i.e. http://vault:8200).\n      ##\n      # url:\n\n      ## vault path under which to namespace credential lookup, defaults to /concourse.\n      ##\n      pathPrefix: /concourse\n\n      ## if the Vault server is using a self-signed certificate, set this to true,\n      ## and provide a value for the cert in secrets.\n      ##\n      # useCaCert:\n\n      ## vault authentication backend, leave this blank if using an initial periodic token\n      ## currently supported backends: token, approle, cert.\n      ##\n      # authBackend:\n\n      ## Cache returned secrets for their lease duration in memory\n      # cache:\n      ## If the cache is enabled, and this is set, override secrets lease duration with a maximum value\n      # maxLease:\n      ## Path to a directory of PEMEncoded CA cert files to verify the vault server SSL cert.\n      # caPath:\n      ## If set, is used to set the SNI host when connecting via TLS.\n      # serverName:\n      ## Enable insecure SSL verification.\n      # insecureSkipVerify:\n        ## Client token for accessing secrets within the Vault server.\n        # clientToken:\n      ## Auth backend to use for logging in to Vault.\n      # authBackend:\n      ## Time after which to force a reLogin. If not set, the token will just be continuously renewed.\n      # authBackendMaxTtl:\n      ## The maximum time between retries when logging in or reAuthing a secret.\n      retryMax: 5m\n      ## The initial time between retries when logging in or reAuthing a secret.\n      retryInitial: 1s\n    ## Don't actually do any automatic scheduling or checking.\n    # noop:\n    staticWorker:\n      enabled: false\n      ## A Garden API endpoint to register as a worker.\n      gardenUrl:\n      ## A Baggageclaim API endpoint to register with the worker.\n      baggageclaimUrl:\n      ## A resource type to advertise for the worker. Can be specified multiple times.\n      resource:\n    metrics:\n      ## Host string to attach to emitted metrics.\n      hostName:\n      ## A keyValue attribute to attach to emitted metrics. Can be specified multiple times.\n      attribute:\n    datadog:\n      enabled: false\n      ## Use IP of node the pod is scheduled on, overrides `agentHost`\n      agentHostUseHostIP: false\n      ## Datadog agent host to expose dogstatsd metrics\n      agentHost: 127.0.0.1\n      ## Datadog agent port to expose dogstatsd metrics\n      agentPort: 8125\n      ## Prefix for all metrics to easily find them in Datadog\n      # prefix: concoursedev\n    influxdb:\n      enabled: false\n      ## InfluxDB server address to emit points to.\n      url: http://127.0.0.1:8086\n      ## InfluxDB database to write points to.\n      database: concourse\n      ## InfluxDB server username.\n      # username:\n      ## Skip SSL verification when emitting to InfluxDB.\n      insecureSkipVerify: false\n    ## Emit metrics to logs.\n    # emitToLogs:\n    newrelic:\n      enabled: false\n      ## New Relic Account ID\n      # accountId:\n      ## New Relic Insights API Key\n      # apiKey:\n      ## An optional prefix for emitted New Relic events\n      # servicePrefix:\n    prometheus:\n      enabled: false\n      ## IP to listen on to expose Prometheus metrics.\n      bindIp: \"0.0.0.0\"\n      ## Port to listen on to expose Prometheus metrics.\n      bindPort: 9391\n    riemann:\n      enabled: false\n      ## Riemann server address to emit metrics to.\n      # host:\n      ## Port of the Riemann server to emit metrics to.\n      port: 5555\n      ## An optional prefix for emitted Riemann services\n      # servicePrefix:\n      ## Tag to attach to emitted metrics. Can be specified multiple times.\n      # tag:\n    ## The value to set for XFrame-Options. If omitted, the header is not set.\n    # xFrameOptions:\n    gc:\n      overrideDefaults: false\n      ## Interval on which to perform garbage collection.\n      interval: 30s\n      ## Grace period before reaping oneOff task containers\n      oneOffGracePeriod: 5m\n    syslog:\n      enabled: false\n      ## Client hostname with which the build logs will be sent to the syslog server.\n      hostName: atc-syslog-drainer\n      ## Remote syslog server address with port (Example: 0.0.0.0:514).\n      # address:\n      ## Transport protocol for syslog messages (Currently supporting tcp, udp \u0026 tls).\n      # transport:\n      ## Interval over which checking is done for new build logs to send to syslog server (duration measurement units are s/m/h; eg. 30s/30m/1h)\n      drainInterval: 30s\n      ## if the syslog server is using a self-signed certificate, set this to true,\n      ## and provide a value for the cert in secrets.\n      useCaCert: false\n    auth:\n      ## Force sending secure flag on http cookies\n      # cookieSecure:\n      ## Length of time for which tokens are valid. Afterwards, users will have to log back in.\n      # duration: 24h\n      mainTeam:\n        ## List of whitelisted local concourse users. These are the users you've added at atc startup with the addLocalUser setting.\n        localUser: \"test\"\n        ## Setting this flag will whitelist all logged in users in the system. ALL OF THEM. If, for example, you've configured GitHub, any user with a GitHub account will have access to your team.\n        # allowAllUsers:\n        ## Authentication (Main Team) (CloudFoundry)\n        cf:\n          ## List of whitelisted CloudFoundry users.\n          user:\n          ## List of whitelisted CloudFoundry orgs\n          org:\n          ## List of whitelisted CloudFoundry spaces\n          space:\n          ## (Deprecated) List of whitelisted CloudFoundry space guids\n          spaceGuid:\n        ## Authentication (Main Team) (GitHub)\n        github:\n          ## List of whitelisted GitHub users\n          user:\n          ## List of whitelisted GitHub orgs\n          org:\n          ## List of whitelisted GitHub teams\n          team:\n        ## Authentication (Main Team) (GitLab)\n        gitlab:\n          ## List of whitelisted GitLab users\n          user:\n          ## List of whitelisted GitLab groups\n          group:\n        ## Authentication (Main Team) (LDAP)\n        ldap:\n          ## List of whitelisted LDAP users\n          user:\n          ## List of whitelisted LDAP groups\n          group:\n        ## Authentication (Main Team) (OAuth2)\n        oauth:\n          ## List of whitelisted OAuth2 users\n          user:\n          ## List of whitelisted OAuth2 groups\n          group:\n        ## Authentication (Main Team) (OIDC)\n        oidc:\n          ## List of whitelisted OIDC users\n          user:\n          ## List of whitelisted OIDC groups\n          group:\n      ## Authentication (CloudFoundry)\n      cf:\n        enabled: false\n        ## (Required) The base API URL of your CF deployment. It will use this information to discover information about the authentication provider.\n        # apiUrl: https://api.run.pivotal.io\n        ## CA Certificate\n        # useCaCert:\n        ## Skip SSL validation\n        # skipSslValidation:\n      ## Authentication (GitHub)\n      github:\n        enabled: false\n        ## Hostname of GitHub Enterprise deployment (No scheme, No trailing slash)\n        # host:\n        ## CA certificate of GitHub Enterprise deployment\n        # useCaCert:\n      ## Authentication (GitLab)\n      gitlab:\n        enabled: false\n        ## Hostname of Gitlab Enterprise deployment (Include scheme, No trailing slash)\n        # host:\n      ## Authentication (LDAP)\n      ldap:\n        enabled: false\n        ## The auth provider name displayed to users on the login page\n        # displayName:\n        ## (Required) The host and optional port of the LDAP server. If port isn't supplied, it will be guessed based on the TLS configuration. 389 or 636.\n        # host:\n        ## (Required) Bind DN for searching LDAP users and groups. Typically this is a readOnly user.\n        # bindDn:\n        ## (Required) Bind Password for the user specified by 'bindDn'\n        # bindPw:\n        ## Required if LDAP host does not use TLS.\n        # insecureNoSsl:\n        ## Skip certificate verification\n        # insecureSkipVerify:\n        ## Start on insecure port, then negotiate TLS\n        # startTls:\n        ## CA certificate\n        # useCaCert:\n        ## BaseDN to start the search from. For example 'cn=users,dc=example,dc=com'\n        # userSearchBaseDn:\n        ## Optional filter to apply when searching the directory. For example '(objectClass=person)'\n        # userSearchFilter:\n        ## Attribute to match against the inputted username. This will be translated and combined with the other filter as '(\u003cattr\u003e=\u003cusername\u003e)'.\n        # userSearchUsername:\n        ## Can either be: 'sub'  search the whole sub tree or 'one' - only search one level. Defaults to 'sub'.\n        # userSearchScope:\n        ## A mapping of attributes on the user entry to claims. Defaults to 'uid'.\n        # userSearchIdAttr:\n        ## A mapping of attributes on the user entry to claims. Defaults to 'mail'.\n        # userSearchEmailAttr:\n        ## A mapping of attributes on the user entry to claims.\n        # userSearchNameAttr:\n        ## BaseDN to start the search from. For example 'cn=groups,dc=example,dc=com'\n        # groupSearchBaseDn:\n        ## Optional filter to apply when searching the directory. For example '(objectClass=posixGroup)'\n        # groupSearchFilter:\n        ## Can either be: 'sub'  search the whole sub tree or 'one' - only search one level. Defaults to 'sub'.\n        # groupSearchScope:\n        ## Adds an additional requirement to the filter that an attribute in the group match the user's attribute value. The exact filter being added is: (\u003cgroupAttr\u003e=\u003cuserAttr value\u003e)\n        # groupSearchUserAttr:\n        ## Adds an additional requirement to the filter that an attribute in the group match the user's attribute value. The exact filter being added is: (\u003cgroupAttr\u003e=\u003cuserAttr value\u003e)\n        # groupSearchGroupAttr:\n        ## The attribute of the group that represents its name.\n        # groupSearchNameAttr:\n      ## Authentication (OAuth2)\n      oauth:\n        enabled: false\n        ## The auth provider name displayed to users on the login page\n        # displayName:\n        ## (Required) Authorization URL\n        # authUrl:\n        ## (Required) Token URL\n        # tokenUrl:\n        ## UserInfo URL\n        # userinfoUrl:\n        ## Any additional scopes that need to be requested during authorization\n        # scope:\n        ## The groups key indicates which claim to use to map external groups to Concourse teams.\n        # groupsKey:\n        ## CA Certificate\n        # useCaCert:\n        ## Skip SSL validation\n        # skipSslValidation:\n      ## Authentication (OIDC)\n      oidc:\n        enabled: false\n        ## The auth provider name displayed to users on the login page\n        # displayName:\n        ## (Required) An OIDC issuer URL that will be used to discover provider configuration using the .wellKnown/openid-configuration\n        # issuer:\n        ## Any additional scopes that need to be requested during authorization\n        # scope:\n        ## The groups key indicates which claim to use to map external groups to Concourse teams.\n        # groupsKey:\n        ## CA Certificate\n        # useCaCert:\n        ## Skip SSL validation\n        # skipSslValidation:\n    tsa:\n      ## Minimum level of logs to see.\n      # logLevel: info\n      ## IP address on which to listen for SSH.\n      # bindIp: 0.0.0.0\n      ## Port on which to listen for SSH.\n      bindPort: 2222\n      ## Port on which to listen for TSA pprof server.\n      # bindDebugPort: 8089\n      ## IP address of this TSA, reachable by the ATCs. Used for forwarded worker addresses.\n      # peerIp:\n      ## Path to private key to use for the SSH server.\n      # hostKey:\n      ## Path to file containing keys to authorize, in SSH authorized_keys format (one public key per line).\n      # authorizedKeys:\n      ## Path to file containing keys to authorize, in SSH authorized_keys format (one public key per line).\n      # teamAuthorizedKeys:\n      ## ATC API endpoints to which workers will be registered.\n      # atcUrl:\n      ## Path to private key to use when signing tokens in reqests to the ATC during registration.\n      # sessionSigningKey:\n      ## interval on which to heartbeat workers to the ATC\n      # heartbeatInterval: 30s\n  worker:\n    ## The name to set for the worker during registration. If not specified, the hostname will be used.\n    # name:\n    ## A tag to set during registration. Can be specified multiple times.\n    # tag:\n    ## The name of the team that this worker will be assigned to.\n    # team:\n    ## HTTP proxy endpoint to use for containers.\n    # http_proxy:\n    ## HTTPS proxy endpoint to use for containers.\n    # https_proxy:\n    ## Blacklist of addresses to skip the proxy when reaching.\n    # no_proxy:\n    ## If set, the worker will be immediately removed upon stalling.\n    # ephemeral:\n    ## Port on which to listen for beacon pprof server.\n    # bindDebugPort: 9099\n    ## Version of the worker. This is normally baked in to the binary, so this flag is hidden.\n    # version:\n    ## Directory in which to place container data.\n    workDir: /concourse-work-dir\n    ## IP address on which to listen for the Garden server.\n    # bindIp: 127.0.0.1\n    ## Port on which to listen for the Garden server.\n    # bindPort: 7777\n    ## IP used to reach this worker from the ATC nodes.\n    # peerIp:\n    ## Minimum level of logs to see.\n    # logLevel: info\n    tsa:\n      ## TSA host to forward the worker through. Can be specified multiple times.\n      host: 127.0.0.1:2222\n      ## File containing a public key to expect from the TSA.\n      # publicKey:\n      ## File containing the private key to use when authenticating to the TSA.\n      # workerPrivateKey:\n    garden:\n      ## Minimum level of logs to see.\n      # logLevel: info\n      ## format of log timestamps\n      # timeFormat: unix-epoch\n      ## Bind with TCP on the given IP.\n      # bindIp:\n      ## Bind with TCP on the given port.\n      bindPort: 7777\n      ## Bind with Unix on the given socket path.\n      # bindSocket: /tmp/garden.sock\n      ## Bind the debug server on the given IP.\n      # debugBindIp:\n      ## Bind the debug server to the given port.\n      # debugBindPort: 17013\n      ## Skip the preparation part of the host that requires root privileges\n      # skipSetup:\n      ## Directory in which to store container data.\n      # depot: /var/run/gdn/depot\n      ## Path in which to store properties.\n      # propertiesPath:\n      ## Path in which to store temporary sockets\n      # consoleSocketsPath:\n      ## Clean up proccess dirs on first invocation of wait\n      # cleanupProcessDirsOnWait:\n      ## Disable creation of privileged containers\n      # disablePrivilegedContainers:\n      ## The lowest numerical subordinate user ID the user is allowed to map\n      # uidMapStart: 1\n      ## The number of numerical subordinate user IDs the user is allowed to map\n      # uidMapLength:\n      ## The lowest numerical subordinate group ID the user is allowed to map\n      # gidMapStart: 1\n      ## The number of numerical subordinate group IDs the user is allowed to map\n      # gidMapLength:\n      ## Default rootfs to use when not specified on container creation.\n      # defaultRootfs:\n      ## Default time after which idle containers should expire.\n      # defaultGraceTime:\n      ## Clean up all the existing containers on startup.\n      # destroyContainersOnStartup:\n      ## Apparmor profile to use for unprivileged container processes\n      # apparmor:\n      ## Directory in which to extract packaged assets\n      # assetsDir: /var/gdn/assets\n      ## Path to the 'dadoo' binary.\n      # dadooBin:\n      ## Path to the 'nstar' binary.\n      # nstarBin:\n      ## Path to the 'tar' binary.\n      # tarBin:\n      ## path to the iptables binary\n      # iptablesBin: /sbin/iptables\n      ## path to the iptables-restore binary\n      # iptablesRestoreBin: /sbin/iptables-restore\n      ## Path execute as pid 1 inside each container.\n      # initBin:\n      ## Path to the runtime plugin binary.\n      # runtimePlugin: runc\n      ## Extra argument to pass to the runtime plugin. Can be specified multiple times.\n      # runtimePluginExtraArg:\n      ## Directory on which to store imported rootfs graph data.\n      # graph:\n      ## Disk usage of the graph dir at which cleanup should trigger, or -1 to disable graph cleanup.\n      # graphCleanupThresholdInMegabytes: -1\n      ## Image that should never be garbage collected. Can be specified multiple times.\n      # persistentImage:\n      ## Path to image plugin binary.\n      # imagePlugin:\n      ## Extra argument to pass to the image plugin to create unprivileged images. Can be specified multiple times.\n      # imagePluginExtraArg:\n      ## Path to privileged image plugin binary.\n      # privilegedImagePlugin:\n      ## Extra argument to pass to the image plugin to create privileged images. Can be specified multiple times.\n      # privilegedImagePluginExtraArg:\n      ## Docker registry API endpoint.\n      # dockerRegistry: registry-1.docker.io\n      ## Docker registry to allow connecting to even if not secure. Can be specified multiple times.\n      # insecureDockerRegistry:\n      ## Network range to use for dynamically allocated container subnets.\n      # networkPool: 10.254.0.0/22\n      ## Allow network access to the host machine.\n      # allowHostAccess:\n      ## Network ranges to which traffic from containers will be denied. Can be specified multiple times.\n      # denyNetwork:\n      ## DNS server IP address to use instead of automatically determined servers. Can be specified multiple times.\n      # dnsServer:\n      ## DNS server IP address to append to the automatically determined servers. Can be specified multiple times.\n      # additionalDnsServer:\n      ## Per line hosts entries. Can be specified multiple times and will be appended verbatim in order to /etc/hosts\n      # additionalHostEntry:\n      ## IP address to use to reach container's mapped ports. Autodetected if not specified.\n      # externalIp:\n      ## Start of the ephemeral port range used for mapped container ports.\n      # portPoolStart: 61001\n      ## Size of the port pool used for mapped container ports.\n      # portPoolSize: 4534\n      ## Path in which to store port pool properties.\n      # portPoolPropertiesPath:\n      ## MTU size for container network interfaces. Defaults to the MTU of the interface used for outbound access by the host. Max allowed value is 1500.\n      # mtu:\n      ## Path to network plugin binary.\n      # networkPlugin:\n      ## Extra argument to pass to the network plugin. Can be specified multiple times.\n      # networkPluginExtraArg:\n      ## Maximum number of microseconds each cpu share assigned to a container allows per quota period\n      # cpuQuotaPerShare: 0\n      ## Set hard limit for the tcp buf memory, value in bytes\n      # tcpMemoryLimit: 0\n      ## Default block IO weight assigned to a container\n      # defaultContainerBlockioWeight: 0\n      ## Maximum number of containers that can be created.\n      # maxContainers: 0\n      ## Disable swap memory limit\n      # disableSwapLimit:\n      ## Interval on which to emit metrics.\n      # metricsEmissionInterval: 1m\n      ## Origin identifier for Dropsonde-emitted metrics.\n      # dropsondeOrigin: garden-linux\n      ## Destination for Dropsonde-emitted metrics.\n      # dropsondeDestination: 127.0.0.1:3457\n      ## Path to a containerd socket.\n      # containerdSocket:\n      ## Use containerd to run processes in containers.\n      # useContainerdForProcesses:\n      ## Enable proxy DNS server.\n      # dnsProxyEnable:\n    baggageclaim:\n      ## Minimum level of logs to see.\n      # logLevel: info\n      ## IP address on which to listen for API traffic.\n      # bindIp: 127.0.0.1\n      ## Port on which to listen for API traffic.\n      # bindPort: 7788\n      ## Port on which to listen for baggageclaim pprof server.\n      # bindDebugPort: 8099\n      ## Directory in which to place volume data.\n      # volumes:\n      ## Driver to use for managing volumes.\n      driver: naive\n      ## Path to btrfs binary\n      # btrfsBin: btrfs\n      ## Path to mkfs.btrfs binary\n      # mkfsBin: mkfs.btrfs\n      ## Path to directory in which to store overlay data\n      # overlaysDir:\n      ## Interval on which to reap expired volumes.\n      # reapInterval: 10s\n\n## Configuration values for Concourse Web components.\n##\nweb:\n  ## Override the components name (defaults to web).\n  ##\n  # nameOverride:\n\n  ## Number of replicas.\n  ##\n  replicas: 1\n\n  ## Configures the liveness probe used to determine\n  ## if the Web component is up.\n  ## Note.: if you're upgrading Concourse from one version\n  ## to another, the probe will probably fail for some time\n  ## before migrations are finished - in such situations,\n  ## either consider bumping the values set here.\n  livenessProbe:\n    failureThreshold: 5\n    httpGet:\n      path: /api/v1/info\n      port: atc\n    initialDelaySeconds: 10\n    periodSeconds: 15\n    timeoutSeconds: 3\n\n  ## Configures the readiness probes.\n  readinessProbe:\n    httpGet:\n      path: /api/v1/info\n      port: atc\n\n  ## Configure resource requests and limits.\n  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/\n  ##\n  resources:\n    requests:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n\n  ## Configure additional environment variables for the\n  ## web containers.\n  # env:\n  #   - name: CONCOURSE_LOG_LEVEL\n  #     value: \"debug\"\n  #   - name: CONCOURSE_TSA_LOG_LEVEL\n  #     value: \"debug\"\n\n  ## For managing where secrets should be mounted for the web agents\n  keySecretsPath: \"/concourse-keys\"\n  authSecretsPath: \"/concourse-auth\"\n  vaultSecretsPath: \"/concourse-vault\"\n  postgresqlSecretsPath: \"/concourse-postgresql\"\n  syslogSecretsPath: \"/concourse-syslog\"\n  tlsSecretsPath: \"/concourse-web-tls\"\n\n  ## Configure additional volumes for the\n  ## web container(s)\n  ##\n  # additionalVolumes:\n  #   - name: my-team-authorized-keys\n  #     configMap:\n  #       name: my-team-authorized-keys-config\n\n  ## Configure additional volumeMounts for the\n  ## web container(s)\n  ##\n  # additionalVolumeMounts:\n  #   - name: my-team-authorized-keys\n  #     mountPath: /my-team-authorized-keys\n\n  ## Additional affinities to add to the web pods.\n  ##\n  # additionalAffinities:\n  #   nodeAffinity:\n  #     preferredDuringSchedulingIgnoredDuringExecution:\n  #       - weight: 50\n  #         preference:\n  #           matchExpressions:\n  #             - key: spot\n  #               operator: NotIn\n  #               values:\n  #                 - \"true\"\n\n  ## Annotations for the web nodes.\n  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n  annotations: {}\n  # annotations:\n  #   key1: \"value1\"\n  #   key2: \"value2\"\n\n  ## Node selector for web nodes.\n  nodeSelector: {}\n\n  ## Tolerations for the web nodes.\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n  # tolerations:\n  #  - key: \"toleration=key\"\n  #    operator: \"Equal\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule\"\n\n  ## Service configuration.\n  ## ref: https://kubernetes.io/docs/user-guide/services/\n  ##\n  service:\n    ## For minikube, set this to ClusterIP, elsewhere use LoadBalancer or NodePort\n    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types\n    ##\n    type: ClusterIP\n\n    ## When using web.service.type: LoadBalancer, sets the user-specified load balancer IP\n    # loadBalancerIP: 172.217.1.174\n\n    # # Additional Labels to be added to the web service.\n    # labels:\n\n    ## Annotations to be added to the web service.\n    ##\n    # annotations:\n    #   prometheus.io/probe: \"true\"\n    #   prometheus.io/probe_path: \"/\"\n    #\n    #   ## When using web.service.type: LoadBalancer, enable HTTPS with an ACM cert\n    #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: \"arn:aws:acm:eu-west-1:123456789:certificate/abc123-abc123-abc123-abc123\"\n    #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: \"http\"\n    #   service.beta.kubernetes.io/aws-load-balancer-backend-port: \"atc\"\n    #   service.beta.kubernetes.io/aws-load-balancer-ssl-ports: \"443\"\n    #\n    # ## When using web.service.type: LoadBalancer, whitelist the load balancer to particular IPs\n    # loadBalancerSourceRanges:\n    #   - 192.168.1.10/32\n\n  # When using web.service.type: NodePort, sets the nodePort for atc\n  #  atcNodePort: 30150\n  #\n  # When using web.service.type: NodePort, sets the nodePort for atc tls\n  #  atcTlsNodePort: 30151\n  #\n  # When using web.service.type: NodePort, sets the nodePort for tsa\n  #  tsaNodePort: 30152\n\n  ## Ingress configuration.\n  ## ref: https://kubernetes.io/docs/user-guide/ingress/\n  ##\n  ingress:\n    ## Enable Ingress.\n    ##\n    enabled: false\n\n    ## Annotations to be added to the web ingress.\n    ##\n    # annotations:\n    #   kubernetes.io/ingress.class: nginx\n    #   kubernetes.io/tls-acme: 'true'\n\n    ## Hostnames.\n    ## Must be provided if Ingress is enabled.\n    ##\n    # hosts:\n    #   - concourse.domain.com\n\n    ## TLS configuration.\n    ## Secrets must be manually created in the namespace.\n    ##\n    # tls:\n    #   - secretName: concourse-web-tls\n    #     hosts:\n    #       - concourse.domain.com\n    #\n    #\n\n## Configuration values for Concourse Worker components.\n##\nworker:\n  ## Override the components name (defaults to worker).\n  ##\n  # nameOverride:\n\n  ## Number of replicas.\n  ##\n  replicas: 2\n\n  ## Minimum number of workers available after an eviction\n  ## ref: https://kubernetes.io/docs/admin/disruptions/\n  ##\n  minAvailable: 1\n\n  ## Configure resource requests and limits.\n  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/\n  ##\n  resources:\n    requests:\n      cpu: \"100m\"\n      memory: \"512Mi\"\n\n  ## Configure additional environment variables for the\n  ## worker container(s)\n  # env:\n  #   - name: http_proxy\n  #     value: \"http://proxy.your-domain.com:3128\"\n  #   - name: https_proxy\n  #     value: \"http://proxy.your-domain.com:3128\"\n  #   - name: no_proxy\n  #     value: \"your-domain.com\"\n  #   - name: CONCOURSE_GARDEN_DNS_SERVER\n  #     value: \"8.8.8.8\"\n  #   - name: CONCOURSE_GARDEN_DNS_PROXY_ENABLE\n  #     value: \"true\"\n  #   - name: CONCOURSE_GARDEN_ALLOW_HOST_ACCESS\n  #     value: \"true\"\n\n\n  ## For managing where secrets should be mounted for worker agents\n  keySecretsPath: \"/concourse-keys\"\n\n  ## Configure additional volumeMounts for the\n  ## worker container(s)\n  # additionalVolumeMounts:\n  #   - name: concourse-baggageclaim\n  #     mountPath: /baggageclaim\n\n  ## Annotations to be added to the worker pods.\n  ##\n  # annotations:\n  #   iam.amazonaws.com/role: arn:aws:iam::123456789012:role/concourse\n  #\n\n  ## Node selector for the worker nodes.\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n  nodeSelector: {}\n  # nodeSelector: {type: concourse}\n\n  ## Additional affinities to add to the worker pods.\n  ## Useful if you prefer to run workers on non-spot instances, for example\n  ##\n  # additionalAffinities:\n  #   nodeAffinity:\n  #     preferredDuringSchedulingIgnoredDuringExecution:\n  #       - weight: 50\n  #         preference:\n  #           matchExpressions:\n  #             - key: spot\n  #               operator: NotIn\n  #               values:\n  #                 - \"true\"\n\n  ## Configure additional volumes for the\n  ## worker container(s)\n  # additionalVolumes:\n  #   - name: concourse-baggageclaim\n  #     hostPath:\n  #       path: /dev/nvme0n1\n  #       type: BlockDevice\n  #\n  # As a special exception, this allows taking over the `concourse-work-dir`\n  # volume (from the default emptyDir) if `persistence.enabled` is false:\n  #\n  # additionalVolumes:\n  #   - name: concourse-work-dir\n  #     hostPath:\n  #       path: /mnt/locally-mounted-fast-disk/concourse\n  #       type: DirectoryOrCreate\n\n  ## Whether the workers should be forced to run on separate nodes.\n  ## This is accomplished by setting their AntiAffinity with requiredDuringSchedulingIgnoredDuringExecution as opposed to preferred\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity-beta-feature\n  hardAntiAffinity: false\n\n  ## Tolerations for the worker nodes.\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n  # tolerations:\n  #  - key: \"toleration=key\"\n  #    operator: \"Equal\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule\"\n\n  ## Time to allow the pod to terminate before being forcefully terminated. This should provide time for\n  ## the worker to retire, i.e. drain its tasks. See https://concourse-ci.org/worker-internals.html for worker\n  ## lifecycle semantics.\n  terminationGracePeriodSeconds: 60\n\n  ## If any of the strings are found in logs, the worker's livenessProbe will fail and trigger a pod restart.\n  ## Specify one string per line, exact matching is used.\n  ##\n  fatalErrors: |-\n    guardian.api.garden-server.create.failed\n    baggageclaim.api.volume-server.create-volume-async.failed-to-create\n\n  ## Strategy for StatefulSet updates (requires Kubernetes 1.6+)\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset\n  ##\n  updateStrategy: RollingUpdate\n\n  ## Pod Management strategy (requires Kubernetes 1.7+)\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies\n  ##\n  ## \"OrderedReady\" is default. \"Parallel\" means worker pods will launch or terminate\n  ## in parallel.\n  podManagementPolicy: Parallel\n\n  ## When persistance is disabled this value will be used to limit the emptyDir volume size\n  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir\n  # emptyDirSize: 20Gi\n\n## Persistent Volume Storage configuration.\n## ref: https://kubernetes.io/docs/user-guide/persistent-volumes\n##\npersistence:\n  ## Enable persistence using Persistent Volume Claims.\n  ##\n  enabled: true\n\n  ## Worker Persistence configuration.\n  ##\n  worker:\n    ## concourse data Persistent Volume Storage Class\n    ## If defined, storageClassName: \u003cstorageClass\u003e\n    ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n    ## If undefined (the default) or set to null, no storageClassName spec is\n    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n    ##   GKE, AWS \u0026 OpenStack)\n    ##\n    # storageClass: \"-\"\n\n    ## Persistent Volume Access Mode.\n    ##\n    accessMode: ReadWriteOnce\n\n    ## Persistent Volume Storage Size.\n    ##\n    size: 20Gi\n\n## Configuration values for the postgresql dependency.\n## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md\n##\npostgresql:\n\n  ## Use the PostgreSQL chart dependency.\n  ## Set to false if bringing your own PostgreSQL, and set secret value postgresql-uri.\n  ##\n  enabled: true\n\n  ### PostgreSQL User to create.\n  ##\n  postgresUser: concourse\n\n  ## PostgreSQL Password for the new user.\n  ## If not set, a random 10 characters password will be used.\n  ##\n  postgresPassword: concourse\n\n  ## PostgreSQL Database to create.\n  ##\n  postgresDatabase: concourse\n\n  ## Persistent Volume Storage configuration.\n  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes\n  ##\n  persistence:\n    ## Enable PostgreSQL persistence using Persistent Volume Claims.\n    ##\n    enabled: true\n    ## concourse data Persistent Volume Storage Class\n    ## If defined, storageClassName: \u003cstorageClass\u003e\n    ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n    ## If undefined (the default) or set to null, no storageClassName spec is\n    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n    ##   GKE, AWS \u0026 OpenStack)\n    ##\n    # storageClass: \"-\"\n    ## Persistent Volume Access Mode.\n    ##\n    accessMode: ReadWriteOnce\n    ## Persistent Volume Storage Size.\n    ##\n    size: 8Gi\n\n## For RBAC support:\nrbac:\n  # true here enables creation of rbac resources\n  create: true\n\n  # rbac version\n  apiVersion: v1beta1\n\n  ## The name of the service account to use for web pods if rbac.create is false\n  ##\n  webServiceAccountName: default\n\n  ## The name of the service account to use for worker pods if rbac.create is false\n  ##\n  workerServiceAccountName: default\n\n## For managing secrets using Helm\n##\nsecrets:\n\n  ## List of username:password or username:bcrypted_password combinations for all your local concourse users.\n  localUsers: \"test:test\"\n  ## Create the secret resource from the following values. Set this to\n  ## false to manage these secrets outside Helm.\n  ##\n  create: true\n\n  ## The TLS certificate and private key for the web component to be able to terminate\n  ## TLS connections.\n  # webTlsCert:\n  # webTlsKey:\n\n  ## Concourse Host Keys.\n  ## ref: https://concourse-ci.org/install.html#generating-keys\n  ##\n  hostKey: |-\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIEogIBAAKCAQEA2AUPXxuiDC/qrBWjIdT5fvNcMlMEYpR3X4SLQIgLC1ULDsCO\n    fleKZ+Wi4RzwbkUKiKmJm5GeyNVVCDdfvdD1Sd1+5faqmp2/OQBzLS7o8NY/btMw\n    8h9lx4KVJaJJ1EM1EiyGY41Nx591KP14pBfr0/NdOIrDu2JvF6e7CHEbrzkN57kb\n    BVQkaIMaS01Rw/5Oe68GFalli2ii8L8dNWVVzquBh5PwVWimvTgwv3TYG2TH8L1V\n    V7n+/zRRpkjMl2+PUouGqD+Bp+4wF+hp4AW5v24CqjtLJEMv4IEJv2FRfrOauBIZ\n    XjAS1SSg9VaTOS3iwxaYrv8uG1XfMFHICvkEPQIDAQABAoIBAG87W8jrX6vK2Jm3\n    ooJ/OeFmymiXWsCwFi+2/kVCR/2T0tfLyxO/W+NX2WD1F9CP+HaaZeMXPp3HS7up\n    V8FT4ZohVYBwXTS0WYyucKApcYThrVQRpzhldnEfClGQmVeVK7Sp/KEyV4Sc1SVA\n    L2i/cI142N2Ohm7spquVkLcuFsVINzZ0fXCv25dTqbkEgjTJzNdBzyFXvc4z0Mt9\n    gW14M7mz+YKYOfsCxIEm438fC9b16C96yIFBdN+/jaP8pmb2RoIE2D0F8bj5K1hR\n    YyGFKMOU4e6cYq59iWfubKuu2WNJEBk/5aO7x7Xu2S0k8wIYlwxFuu4LfR2Kvizu\n    +mFVf3kCgYEA9e0+40tJGpOPM8hAB3DwXjYc8lCuyYf3z30T3RqVNCUVSWnlaj/s\n    3ENi6+Ng3u+Zs8cR2CFou+jAClTyWLuSnI9yACD0eyW9n4bzYMUbgdC6vneLjpzx\n    wWR9Xv5RmZVly7xWuqcgEeEf8RNcYI3oXby0laF3EObvuAx/4ETIkFcCgYEA4N42\n    w1UEWGopWBIIXYHkEPHQuF0SxR2CZyh9ExTeSxFphyibkcHRjDW+t91ZLnSm5k1N\n    TOdYuc0ApBV3U+TexeFvDI94L/Oze6Ht5MatRQz8kRwMFGJL3TrpbgTmWdfG05Ad\n    oiScJzwY16oJXnKusxik7V+gCCNNE0/2UuMnY4sCgYAEf82pvOPef5qcGOrK+A79\n    ukG3UTCRcVJgUmp9nhHivVbxW+WdlwPPV9BEfol0KrAGMPsrmBjhbzWsOregVfYt\n    tRYh2HiAlEUu2Po06AZDzrzL5UYBWu+1WRBOH5sAk1IkcxKnIY2dph++elszTQVW\n    SbCIGEckYQU7ucbRJJECywKBgBb4vHFx8vKxTa3wkagzx7+vZFohL/SxEgxFx5k2\n    bYsPqU8kZ9gZC7YeG3CfDShAxHgMd5QeoiLA/YrFop4QaG2gnP6UfXuwkqpTnYDc\n    hwDh1b9hNR6z9/oOtaAGoh2VfHtKYqyYvtcHPaZyeWiLoKstHlQdi7SpHouVhJ1t\n    FS4HAoGAGy+56+zvdROjJy9A2Mn/4BvWrsu4RSQILBJ6Hb4TpF46p2fn0rwqyhOj\n    Occs+xkdEsI9w5phXzIEeOq2LqvWHDPxtdLpxOrrmx4AftAWdM8S1+OqTpzHihK1\n    y1ZOrWfvON+XjWFFAEej/CpQZkNUkTzjTtSC0dnfAveZlasQHdI=\n    -----END RSA PRIVATE KEY-----\n\n  hostKeyPub: |-\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYBQ9fG6IML+qsFaMh1Pl+81wyUwRilHdfhItAiAsLVQsOwI5+V4pn5aLhHPBuRQqIqYmbkZ7I1VUIN1+90PVJ3X7l9qqanb85AHMtLujw1j9u0zDyH2XHgpUloknUQzUSLIZjjU3Hn3Uo/XikF+vT8104isO7Ym8Xp7sIcRuvOQ3nuRsFVCRogxpLTVHD/k57rwYVqWWLaKLwvx01ZVXOq4GHk/BVaKa9ODC/dNgbZMfwvVVXuf7/NFGmSMyXb49Si4aoP4Gn7jAX6GngBbm/bgKqO0skQy/ggQm/YVF+s5q4EhleMBLVJKD1VpM5LeLDFpiu/y4bVd8wUcgK+QQ9 Concourse\n\n  ## Concourse Session Signing Keys.\n  ## ref: https://concourse-ci.org/install.html#generating-keys\n  ##\n  sessionSigningKey: |-\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIEowIBAAKCAQEAwLql/rUIaI+PX7Tl3FWcTee4sQf8/daakALXx955tPwkhqlY\n    e4T2V84p/ylFvNWpM4vfcMYKfMY0JLKgAgBvJhCytSkDBhTBoWmN6yE0AB11P9En\n    lIZRBWNYqaC2cSge2ZD8qOSnwfFhnQAW8+7pE+ElJAVh7dtdF3A478H50lIigq8I\n    zMWp2EGJpFC7/Uu36oIL/03MNGCmrH1jvtTuJiAMQUZYyL1ReBkvvHOzw9i4HXPy\n    SMVtcllm4NBs2aVPtwhr2kwSkLt8t1bPdRn6OIyEAw5WktzAKaiZnkTvj6g3xzdp\n    zKcrdlBr9aznlNvoSinBUfvtwyFmvFN1HHbA9wIDAQABAoIBAE7G/DrUfI9gvtX7\n    90jMpYsigFe8UCjho2PiBZlo0o6r0bJJXiV+/8J8PqZRlHPPUc4EClzqVjcSPRYS\n    /VxUGRqSELoD/Xxq14rGvn+xnrO9VsOzFl6bWFq/dOpBCtHN+G4t2VifvgKES8YE\n    11z19sdta+UBXjn/RFnkQSGfRCI3QqTaYvjxevt0uWlyPmqkFPQQw8bvHIXzoB+B\n    rzeiMa++nMvbX5pAH9XA0BvhyuH3fHidTUwiVBpkMcpLWtjP0A0JTsecDdbinDDq\n    un2EIo8zMWRwKQN/JnUxsi8AUEigBTCUqeDgREXtW62uvFkSpcVMXwmVityLYIVy\n    qnVLUCECgYEA6IwXkP1qnSfcNeoVI/ypDuz1/kdqcjSPhLYe+jdiLLoFkMW9AlDm\n    lzwNaWlTFD9ygo+NjJCo63/A8HCm55sajws5hZ6r20vdZcKFMk9h0qF5oVA7lkQ2\n    gvG2WaznuU7KkqhfP+pXhiLgZKoJkst/+g7r6uHpredwDY6hxeBK4vsCgYEA1CqH\n    8ywC5qUo/36kQg/TU2adN/YEHdJAAbU23EVrGQSVmnXW08H2NLFk0tsxrwoNnbgp\n    PIk2J7BimbJvbND17ibr4GAklDTsR8aJkDl+0JgNCAK9N07qVt1s7FXzhg95jUL9\n    EQW55z60GAJpecqNwA4Jsa8P852N0355Obp92TUCgYBkOBvf7JcJ66fHxH4f6D+j\n    oxPQ5k5Fsck4VJS9GSlCRVkor09ptBvsiYDuMOoRC9b51YwXTDDAbWplNOd5YSrt\n    AtVjdKJz/BoKRO7KY9Owxs54au+DLxqfDDSeKRokjoRW+CE0lnXp5RX3zCAcF3+r\n    8MpTi9D9lYSBEzs84BDmCQKBgQCMcH6/K3HcJJVn0fd+tyUGftUw9sswxjySJNbk\n    pZrH263/qWMDls+Xf5kire9MU1ZCAWZiaN0NFoed/2wcVpGEDAV0548u/30r4bKr\n    YjOcdhmiJNYFJ1qdF0MDib2CDvpB1IbZXrX46RujDO2urbJ435HxKNVhR/had8xc\n    tyKYxQKBgCVDhN0MhnlUQJVZfX42APmF4gQg0r3sfL/NGXjEjMIKKFe5a88eZVHr\n    L8x1+dp0q7czC8a/l1DUuiwDKl8OEpxLsGCq/J/wAfrSMPifu6EUlbUwlJOPdgha\n    +p/KFAelHXJ2w/8yackAcarh35VP7ixhuvxswHNdgvfsBTFcjn30\n    -----END RSA PRIVATE KEY-----\n\n  ## Concourse Worker Keys.\n  ## ref: https://concourse-ci.org/install.html#generating-keys\n  ##\n  workerKey: |-\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIEpAIBAAKCAQEAuPehUmBXAQCoA7TLAQCYhf+vzcZVyj+VGXnMhLHnWLk7dRjo\n    CU8GgNamdS5h7G3ywxOvKA3YjOLr8XyOMLS4c+e8N7tIzlMWdiXhe0lcBH9Z1ai5\n    +Bof3/BlDUBksiKdc1A+QcfX6tDwMkOO5re1H4vOK3H/Cype58wCB03HYNgb05ED\n    fW1Bj2qvz29VtmyjwEMuDs100iMqwCfPUx9oxXmmX8sUBRmw/Y1Rx/8pdKIjKw3m\n    kWIHHBOSCPimO1qC47Aa8v/UH9hERCykyuFHiBiKlnIvZWm9bYvhsRTz4gt5KzRY\n    6OI0oVeHlLOHDSK48Da8VWij15lOqO2Nx6WssQIDAQABAoIBADET22UNFOi6MNpS\n    5S5N5ypezlnOD0NLnZcV3zMyNQ0wkNsgEakuo64Zxi7/cJIYFjq2hVoeWl//cdUw\n    VFYODYcLbMBo3AeKukH9CRf6PgUfeUmcrENtQxnbIiTi+hTd5GMNXod7rAmtCJ59\n    mHQVOGS3ZqvWYnKm+mmMktk3RPinynX/A4y3WHPacuAS58HM09Ck43WcHMxbGpsL\n    /gZpICyFYZ2DviM+AHyWGcmw7LJrpC0QHo6+BAFMs4xlUecNgVIFUpfOoAcfsdtG\n    K9j4AbuZ47iFisbay+1pyg/7O5eRTdGVQRtc7PBMOjea5jGsfmlDmdn1ZS50ykun\n    ANfoQ5UCgYEA9Ak73PRy9nLlRkt4OBCF/4fwThUCMedsnWaVjQBMJYim4FB2ivF5\n    cKdWt3y/RZI85KKYu0EXhLEoSIEAfz057R8t3QdVK4tZx6B47UFjBjCYeVMtwHDQ\n    prxQiOPHIHCplBNFuGzA5VXL9gQLRD+ek0uOy2GJJ0Wu1xyeouI+SW8CgYEAwgkO\n    TOtOogqmcAALjWgeeQiZetflSKbJlpQNhmCPAMm0SFI8eF4SpRXLzd41VC2mLIwT\n    L3tjc7/8ocXoElFM4L0fo9Lx/SHFH4JEn5FT0PXPmvsF2JRhsXJFLJSihxF/91Xs\n    2aBcQILPFzLcrI6OFUakNwGTU/CIxpkzRvQrG98CgYEAzNVnUuo4CNadzagRK3Xr\n    E3Yl5VRK+FpY17FAfA6w25xc/dFr/un61e0Po4no/ltmEz7LVfmn5O/ScTEemq5o\n    jbjrBShfe+JGpIH0nqiQlqR5hvSjZXEMIbfVHWGbRYZrQGgA0HEwZA7k2QXB8zI3\n    R0lXfSzMM5OQ0uwp12xxfa8CgYBHILq1R6zTicPpWprhg0FobNaWSX4rW7iaEjvC\n    /rJtP4Nu33Z7SUDcc1j6ZnJ2ISXBPrfpt/mE/OPHCZ1A2bysxadLjpBWkoKIQmCV\n    fdiTyQgJb+t8sSf+vDzPUs0hZjDaogzo2ff3TfxMLMDoIHnFItgfsdwn8QyygIZj\n    hC4pUQKBgQDqsxnkI6yXFE5gshnW7H8zqKNlzKd/dZEL6e+lRz4R3UY/KcEkRAfq\n    Yi3cwo9fE3U3kSmpl5MQwUjWm/BZ7JyueoY/4ndwaFPgc34IKsgJ0wau9pZiQAB1\n    DxpOSF+BR71Jx3sxvIdCODNTtm645j5yrZVnJAuMPofo5XFmunDoJA==\n    -----END RSA PRIVATE KEY-----\n\n  workerKeyPub: |-\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC496FSYFcBAKgDtMsBAJiF/6/NxlXKP5UZecyEsedYuTt1GOgJTwaA1qZ1LmHsbfLDE68oDdiM4uvxfI4wtLhz57w3u0jOUxZ2JeF7SVwEf1nVqLn4Gh/f8GUNQGSyIp1zUD5Bx9fq0PAyQ47mt7Ufi84rcf8LKl7nzAIHTcdg2BvTkQN9bUGPaq/Pb1W2bKPAQy4OzXTSIyrAJ89TH2jFeaZfyxQFGbD9jVHH/yl0oiMrDeaRYgccE5II+KY7WoLjsBry/9Qf2ERELKTK4UeIGIqWci9lab1ti+GxFPPiC3krNFjo4jShV4eUs4cNIrjwNrxVaKPXmU6o7Y3Hpayx Concourse\n\n  ## Secrets for DB access\n  # postgresUser:\n  # postgresPassword:\n  # postgresCaCert:\n  # postgresClientCert:\n  # postgresClientKey:\n\n  ## Secrets for DB encryption\n  ##\n  # encryptionKey:\n  # oldEncryptionKey:\n\n  ## Secrets for SSM AWS access\n  # awsSsmAccessKey:\n  # awsSsmSecretKey:\n  # awsSsmSessionToken:\n\n  ## Secrets for Secrets Manager AWS access\n  # awsSecretsmanagerAccessKey:\n  # awsSecretsmanagerSecretKey:\n  # awsSecretsmanagerSessionToken:\n\n  ## Secrets for CF OAuth\n  # cfClientId:\n  # cfClientSecret:\n  # cfCaCert: |-\n\n  ## Secrets for GitHub OAuth.\n  ##\n  # githubClientId:\n  # githubClientSecret:\n  # githubCaCert: |-\n\n  ## Secrets for GitLab OAuth.\n  ##\n  # gitlabClientId:\n  # gitlabClientSecret:\n\n  ## Secrets for LDAP Auth.\n  ##\n  # ldapCaCert: |-\n\n  ## Secrets for generic OAuth.\n  ##\n  # oauthClientId:\n  # oauthClientSecret:\n  # oauthCaCert: |-\n\n  ## Secrets for oidc OAuth.\n  ##\n  # oidcClientId:\n  # oidcClientSecret:\n  # oidcCaCert: |-\n\n  ## Secrets for using Hashcorp Vault as a credential manager.\n  ##\n  ## if the Vault server is using a self-signed certificate, provide the CA public key.\n  ## the value will be written to /concourse-vault/ca.cert\n  ##\n  # vaultCaCert: |-\n\n  ## initial periodic token issued for concourse\n  ## ref: https://www.vaultproject.io/docs/concepts/tokens.html#periodic-tokens\n  ##\n  # vaultClientToken:\n\n  ## vault authentication parameters\n  ## Paramter to pass when logging in via the backend\n  ## Required for \"approle\" authenication method\n  ## e.g. \"role_id=x,secret_id=x\"\n  ## ref: https://concourse-ci.org/creds.html#vault-auth-param=NAME=VALUE\n  ##\n  # vaultAuthParam:\n\n  ## provide the client certificate for authenticating with the [TLS](https://www.vaultproject.io/docs/auth/cert.html) backend\n  ## the value will be written to /concourse-vault/client.cert\n  ## make sure to also set credentialManager.vault.authBackend to `cert`\n  ##\n  # vaultClientCert: |-\n\n  ## provide the client key for authenticating with the [TLS](https://www.vaultproject.io/docs/auth/cert.html) backend\n  ## the value will be written to /concourse-vault/client.key\n  ## make sure to also set credentialManager.vault.authBackend to `cert`\n  ##\n  # vaultClientKey: |-\n\n  ## If influxdb metrics are enabled and authentication is required,\n  ## provide a password here to authenticate with the influxdb server configured.\n  ##\n  # influxdbPassword:\n\n  ## SSL certificate used to verify the Syslog server for draining build logs.\n  # syslogCaCert: |-\n",
    "upstream": "https://github.com/helm/charts/tree/0662ec9efe30dda63467bf19ae00217472b1385c/stable/concourse",
    "metadata": {
      "applicationType": "helm",
      "sequence": 0,
      "icon": "https://avatars1.githubusercontent.com/u/7809479",
      "name": "concourse",
      "releaseNotes": "[stable/concourse] Allow namespace creation independently of rbac (#10786)\n\n* Allow namespace creation independently of rbac\n\nAt the moment, when defining `concourse.web.kubernetes.teams`, the helm\nchart will take care of namespace generation. Although this is very\nuseful in most cases, we believe some people may find it problematic.\n\nOur use case, is to create the namespaces ahead of time and fill them\nwith `Pipeline` type resources defining Concourse pipelines. These are\nthen picked by our `pipeline-operator` and continuously applied to\nConcourse for specific teams.\n\nA hacky way around it, would be to set the\n`concourse.web.kubernetes.teams` value to an empty array, and create the\nrole bindings manually. It feels a little like cheating, and a cleaner\nway to accomplish that would be to have a separate flag responsible for\nnamespace creation in the Concourse helm chart.\n\nSigned-off-by: Rafal Proszowski \u003cparoxp@gmail.com\u003e\n\n* Bump patch\n\nSigned-off-by: Rafal Proszowski \u003cparoxp@gmail.com\u003e",
      "version": "3.7.2",
      "license": {
        "id": "",
        "assignee": "",
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "0001-01-01T00:00:00Z",
        "type": ""
      }
    },
    "upstreamContents": {
      "upstreamFiles": [
        {
          "filePath": ".helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "Chart.yaml",
          "fileContents": "bmFtZTogY29uY291cnNlCnZlcnNpb246IDMuNy4yCmFwcFZlcnNpb246IDQuMi4yCmRlc2NyaXB0aW9uOiBDb25jb3Vyc2UgaXMgYSBzaW1wbGUgYW5kIHNjYWxhYmxlIENJIHN5c3RlbS4KaWNvbjogaHR0cHM6Ly9hdmF0YXJzMS5naXRodWJ1c2VyY29udGVudC5jb20vdS83ODA5NDc5CmtleXdvcmRzOgotIGNpCi0gY29uY291cnNlCi0gY29uY291cnNlLmNpCmhvbWU6IGh0dHBzOi8vY29uY291cnNlLWNpLm9yZy8Kc291cmNlczoKLSBodHRwczovL2dpdGh1Yi5jb20vY29uY291cnNlL2NvbmNvdXJzZQotIGh0dHBzOi8vZ2l0aHViLmNvbS9oZWxtL2NoYXJ0cwptYWludGFpbmVyczoKLSBuYW1lOiBjaXJvY29zdGEKICBlbWFpbDogY3Njb3N0YUBwaXZvdGFsLmlvCi0gbmFtZTogd2lsbGlhbS10cmFuCiAgZW1haWw6IHdpbGxAYXV0b25vbWljLmFpCmVuZ2luZTogZ290cGwK"
        },
        {
          "filePath": "OWNERS",
          "fileContents": "YXBwcm92ZXJzOgotIGNpcm9jb3N0YQotIHdpbGxpYW0tdHJhbgpyZXZpZXdlcnM6Ci0gY2lyb2Nvc3RhCi0gd2lsbGlhbS10cmFuCg=="
        },
        {
          "filePath": "README.md",
          "fileContents": "IyBDb25jb3Vyc2UgSGVsbSBDaGFydAoKW0NvbmNvdXJzZV0oaHR0cHM6Ly9jb25jb3Vyc2UtY2kub3JnLykgaXMgYSBzaW1wbGUgYW5kIHNjYWxhYmxlIENJIHN5c3RlbS4KCiMjIFRMO0RSOwoKYGBgY29uc29sZQokIGhlbG0gaW5zdGFsbCBzdGFibGUvY29uY291cnNlCmBgYAoKIyMgSW50cm9kdWN0aW9uCgpUaGlzIGNoYXJ0IGJvb3RzdHJhcHMgYSBbQ29uY291cnNlXShodHRwczovL2NvbmNvdXJzZS1jaS5vcmcvKSBkZXBsb3ltZW50IG9uIGEgW0t1YmVybmV0ZXNdKGh0dHBzOi8va3ViZXJuZXRlcy5pbykgY2x1c3RlciB1c2luZyB0aGUgW0hlbG1dKGh0dHBzOi8vaGVsbS5zaCkgcGFja2FnZSBtYW5hZ2VyLgoKIyMgUHJlcmVxdWlzaXRlcyBEZXRhaWxzCgoqIEt1YmVybmV0ZXMgMS42IChmb3IgYHBvZCBhZmZpbml0eWAgc3VwcG9ydCkKKiBQViBzdXBwb3J0IG9uIHVuZGVybHlpbmcgaW5mcmFzdHJ1Y3R1cmUgKGlmIHBlcnNpc3RlbmNlIGlzIHJlcXVpcmVkKQoKIyMgSW5zdGFsbGluZyB0aGUgQ2hhcnQKClRvIGluc3RhbGwgdGhlIGNoYXJ0IHdpdGggdGhlIHJlbGVhc2UgbmFtZSBgbXktcmVsZWFzZWA6CgpgYGBjb25zb2xlCiQgaGVsbSBpbnN0YWxsIC0tbmFtZSBteS1yZWxlYXNlIHN0YWJsZS9jb25jb3Vyc2UKYGBgCgojIyBVbmluc3RhbGxpbmcgdGhlIENoYXJ0CgpUbyB1bmluc3RhbGwvZGVsZXRlIHRoZSBgbXktcmVsZWFzZWAgZGVwbG95bWVudDoKCmBgYGNvbnNvbGUKJCBoZWxtIGRlbGV0ZSBteS1yZWxlYXNlCmBgYAoKVGhlIGNvbW1hbmQgcmVtb3ZlcyBuZWFybHkgYWxsIHRoZSBLdWJlcm5ldGVzIGNvbXBvbmVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGFydCBhbmQgZGVsZXRlcyB0aGUgcmVsZWFzZS4KCiMjIyBDbGVhbnVwIG9ycGhhbmVkIFBlcnNpc3RlbnQgVm9sdW1lcwoKVGhpcyBjaGFydCB1c2VzIGBTdGF0ZWZ1bFNldHNgIGZvciBDb25jb3Vyc2UgV29ya2Vycy4gRGVsZXRpbmcgYSBgU3RhdGVmdWxTZXRgIGRvZXMgbm90IGRlbGV0ZSBhc3NvY2lhdGVkIFBlcnNpc3RlbnQgVm9sdW1lcy4KCkRvIHRoZSBmb2xsb3dpbmcgYWZ0ZXIgZGVsZXRpbmcgdGhlIGNoYXJ0IHJlbGVhc2UgdG8gY2xlYW4gdXAgb3JwaGFuZWQgUGVyc2lzdGVudCBWb2x1bWVzLgoKYGBgY29uc29sZQokIGt1YmVjdGwgZGVsZXRlIHB2YyAtbCBhcHA9JHtSRUxFQVNFLU5BTUV9LXdvcmtlcgpgYGAKCiMjIFNjYWxpbmcgdGhlIENoYXJ0CgpTY2FsaW5nIHNob3VsZCB0eXBpY2FsbHkgYmUgbWFuYWdlZCB2aWEgdGhlIGBoZWxtIHVwZ3JhZGVgIGNvbW1hbmQsIGJ1dCBgU3RhdGVmdWxTZXRzYCBkb24ndCB5ZXQgd29yayB3aXRoIGBoZWxtIHVwZ3JhZGVgLiBJbiB0aGUgbWVhbnRpbWUsIHVudGlsIGBoZWxtIHVwZ3JhZGVgIHdvcmtzLCBpZiB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIG51bWJlciBvZiByZXBsaWNhcywgeW91IGNhbiB1c2UgdGhlIGBrdWJlY3RsIHNjYWxlYCBjb21tYW5kIGFzIHNob3duIGJlbG93OgoKYGBgY29uc29sZQokIGt1YmVjdGwgc2NhbGUgc3RhdGVmdWxzZXQgbXktcmVsZWFzZS13b3JrZXIgLS1yZXBsaWNhcz0zCmBgYAoKIyMjIFJlc3RhcnRpbmcgd29ya2VycwoKSWYgYSB3b3JrZXIgaXNuJ3QgdGFraW5nIG9uIHdvcmssIHlvdSBjYW4gcmVzdGFydCB0aGUgd29ya2VyIHdpdGggYGt1YmVjdGwgZGVsZXRlIHBvZGAuIFRoaXMgaW5pdGlhdGVzIGEgZ3JhY2VmdWwgc2h1dGRvd24gYnkgInJldGlyaW5nIiB0aGUgd29ya2VyLCB0byBlbnN1cmUgQ29uY291cnNlIGRvZXNuJ3QgdHJ5IGxvb2tpbmcgZm9yIG9sZCB2b2x1bWVzIG9uIHRoZSBuZXcgd29ya2VyLiBUaGUgdmFsdWVgd29ya2VyLnRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzYCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIGFuIHVwcGVyIGxpbWl0IG9uIGdyYWNlZnVsIHNodXRkb3duIHRpbWUgYmVmb3JlIGZvcmNlZnVsbHkgdGVybWluYXRpbmcgdGhlIGNvbnRhaW5lci4gQ2hlY2sgdGhlIG91dHB1dCBvZiBgZmx5IHdvcmtlcnNgLCBhbmQgaWYgYSB3b3JrZXIgaXMgYHN0YWxsZWRgLCB5b3UnbGwgYWxzbyBuZWVkIHRvIHJ1biBgZmx5IHBydW5lLXdvcmtlcmAgdG8gYWxsb3cgdGhlIG5ldyBpbmNhcm5hdGlvbiBvZiB0aGUgd29ya2VyIHRvIHN0YXJ0LgoKIyMjIFdvcmtlciBMaXZlbmVzcyBQcm9iZQoKVGhlIHdvcmtlcidzIExpdmVuZXNzIFByb2JlIHdpbGwgdHJpZ2dlciBhIHJlc3RhcnQgb2YgdGhlIHdvcmtlciBpZiBpdCBkZXRlY3RzIHVucmVjb3ZlcmFibGUgZXJyb3JzLCBieSBsb29raW5nIGF0IHRoZSB3b3JrZXIncyBsb2dzLiBUaGUgc2V0IG9mIHN0cmluZ3MgdXNlZCB0byBpZGVudGlmeSBzdWNoIGVycm9ycyBjb3VsZCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSwgYnV0IGNhbiBiZSB0dW5lZCB3aXRoIGB3b3JrZXIuZmF0YWxFcnJvcnNgLiBTZWUgW3ZhbHVlcy55YW1sXSh2YWx1ZXMueWFtbCkgZm9yIHRoZSBkZWZhdWx0cy4KCiMjIENvbmZpZ3VyYXRpb24KClRoZSBmb2xsb3dpbmcgdGFibGUgbGlzdHMgdGhlIGNvbmZpZ3VyYWJsZSBwYXJhbWV0ZXJzIG9mIHRoZSBDb25jb3Vyc2UgY2hhcnQgYW5kIHRoZWlyIGRlZmF1bHQgdmFsdWVzLgoKfCBQYXJhbWV0ZXIgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZWZhdWx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwKfCBgaW1hZ2VgIHwgQ29uY291cnNlIGltYWdlIHwgYGNvbmNvdXJzZS9jb25jb3Vyc2VgIHwKfCBgaW1hZ2VUYWdgIHwgQ29uY291cnNlIGltYWdlIHZlcnNpb24gfCBgNC4yLjJgIHwKfCBgaW1hZ2VQdWxsUG9saWN5YCB8IENvbmNvdXJzZSBpbWFnZSBwdWxsIHBvbGljeSB8IGBJZk5vdFByZXNlbnRgIHwKfCBgaW1hZ2VQdWxsU2VjcmV0c2AgfCBBcnJheSBvZiBpbWFnZVB1bGxTZWNyZXRzIGluIHRoZSBuYW1lc3BhY2UgZm9yIHB1bGxpbmcgaW1hZ2VzIHwgYFtdYCB8CnwgYHdlYi5hZGRpdGlvbmFsQWZmaW5pdGllc2AgfCBBZGRpdGlvbmFsIGFmZmluaXRpZXMgdG8gYXBwbHkgdG8gd2ViIHBvZHMuIEUuZzogbm9kZSBhZmZpbml0eSB8IGB7fWAgfAp8IGB3ZWIuYWRkaXRpb25hbFZvbHVtZU1vdW50c2AgfCBWb2x1bWVNb3VudHMgdG8gYmUgYWRkZWQgdG8gdGhlIHdlYiBwb2RzIHwgYG5pbGAgfAp8IGB3ZWIuYWRkaXRpb25hbFZvbHVtZXNgIHwgVm9sdW1lcyB0byBiZSBhZGRlZCB0byB0aGUgd2ViIHBvZHMgfCBgbmlsYCB8CnwgYHdlYi5hbm5vdGF0aW9uc2B8IENvbmNvdXJzZSBXZWIgZGVwbG95bWVudCBhbm5vdGF0aW9ucyB8IGBuaWxgIHwKfCBgd2ViLmF1dGhTZWNyZXRzUGF0aGAgfCBTcGVjaWZ5IHRoZSBtb3VudCBkaXJlY3Rvcnkgb2YgdGhlIHdlYiBhdXRoIHNlY3JldHMgfCBgL2NvbmNvdXJzZS1hdXRoYCB8CnwgYHdlYi5lbnZgIHwgQ29uZmlndXJlIGFkZGl0aW9uYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciB0aGUgd2ViIGNvbnRhaW5lcnMgfCBgW11gIHwKfCBgd2ViLmluZ3Jlc3MuYW5ub3RhdGlvbnNgIHwgQ29uY291cnNlIFdlYiBJbmdyZXNzIGFubm90YXRpb25zIHwgYHt9YCB8CnwgYHdlYi5pbmdyZXNzLmVuYWJsZWRgIHwgRW5hYmxlIENvbmNvdXJzZSBXZWIgSW5ncmVzcyB8IGBmYWxzZWAgfAp8IGB3ZWIuaW5ncmVzcy5ob3N0c2AgfCBDb25jb3Vyc2UgV2ViIEluZ3Jlc3MgSG9zdG5hbWVzIHwgYFtdYCB8CnwgYHdlYi5pbmdyZXNzLnRsc2AgfCBDb25jb3Vyc2UgV2ViIEluZ3Jlc3MgVExTIGNvbmZpZ3VyYXRpb24gfCBgW11gIHwKfCBgd2ViLmtleXNTZWNyZXRzUGF0aGAgfCBTcGVjaWZ5IHRoZSBtb3VudCBkaXJlY3Rvcnkgb2YgdGhlIHdlYiBrZXlzIHNlY3JldHMgfCBgL2NvbmNvdXJzZS1rZXlzYCB8CnwgYHdlYi5saXZlbmVzc1Byb2JlYCB8IExpdmVuZXNzIFByb2JlIHNldHRpbmdzIHwgYHsiZmFpbHVyZVRocmVzaG9sZCI6NSwiaHR0cEdldCI6eyJwYXRoIjoiL2FwaS92MS9pbmZvIiwicG9ydCI6ImF0YyJ9LCJpbml0aWFsRGVsYXlTZWNvbmRzIjoxMCwicGVyaW9kU2Vjb25kcyI6MTUsInRpbWVvdXRTZWNvbmRzIjozfWAgfAp8IGB3ZWIubmFtZU92ZXJyaWRlYCB8IE92ZXJyaWRlIHRoZSBDb25jb3Vyc2UgV2ViIGNvbXBvbmVudHMgbmFtZSB8IGBuaWxgIHwKfCBgd2ViLm5vZGVTZWxlY3RvcmAgfCBOb2RlIHNlbGVjdG9yIGZvciB3ZWIgbm9kZXMgfCBge31gIHwKfCBgd2ViLnBvc3RncmVzcWxTZWNydHNQYXRoYCB8IFNwZWNpZnkgdGhlIG1vdW50IGRpcmVjdG9yeSBvZiB0aGUgd2ViIHBvc3RncmVzcWwgc2VjcmV0cyB8IGAvY29uY291cnNlLXBvc3RncmVzcWxgIHwKfCBgd2ViLnJlYWRpbmVzc1Byb2JlYCB8IFJlYWRpbmVzcyBQcm9iZSBzZXR0aW5ncyB8IGB7Imh0dHBHZXQiOnsicGF0aCI6Ii9hcGkvdjEvaW5mbyIsInBvcnQiOiJhdGMifX1gIHwKfCBgd2ViLnJlcGxpY2FzYCB8IE51bWJlciBvZiBDb25jb3Vyc2UgV2ViIHJlcGxpY2FzIHwgYDFgIHwKfCBgd2ViLnJlc291cmNlc2AgfCBDb25jb3Vyc2UgV2ViIHJlc291cmNlIHJlcXVlc3RzIGFuZCBsaW1pdHMgfCBge3JlcXVlc3RzOiB7Y3B1OiAiMTAwbSIsIG1lbW9yeTogIjEyOE1pIn19YCB8CnwgYHdlYi5zZXJ2aWNlLmFubm90YXRpb25zYCB8IENvbmNvdXJzZSBXZWIgU2VydmljZSBhbm5vdGF0aW9ucyB8IGBuaWxgIHwKfCBgd2ViLnNlcnZpY2UuYXRjTm9kZVBvcnRgIHwgU2V0cyB0aGUgbm9kZVBvcnQgZm9yIGF0YyB3aGVuIHVzaW5nIGBOb2RlUG9ydGAgfCBgbmlsYCB8CnwgYHdlYi5zZXJ2aWNlLmF0Y1Rsc05vZGVQb3J0YCB8IFNldHMgdGhlIG5vZGVQb3J0IGZvciBhdGMgdGxzIHdoZW4gdXNpbmcgYE5vZGVQb3J0YCB8IGBuaWxgIHwKfCBgd2ViLnNlcnZpY2UubGFiZWxzYCB8IEFkZGl0aW9uYWwgY29uY291cnNlIHdlYiBzZXJ2aWNlIGxhYmVscyB8IGBuaWxgIHwKfCBgd2ViLnNlcnZpY2UubG9hZEJhbGFuY2VySVBgIHwgVGhlIElQIHRvIHVzZSB3aGVuIHdlYi5zZXJ2aWNlLnR5cGUgaXMgTG9hZEJhbGFuY2VyIHwgYG5pbGAgfAp8IGB3ZWIuc2VydmljZS5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXNgIHwgQ29uY291cnNlIFdlYiBTZXJ2aWNlIExvYWQgQmFsYW5jZXIgU291cmNlIElQIHJhbmdlcyB8IGBuaWxgIHwKfCBgd2ViLnNlcnZpY2UudHNhTm9kZVBvcnRgIHwgU2V0cyB0aGUgbm9kZVBvcnQgZm9yIHRzYSB3aGVuIHVzaW5nIGBOb2RlUG9ydGAgfCBgbmlsYCB8CnwgYHdlYi5zZXJ2aWNlLnR5cGVgIHwgQ29uY291cnNlIFdlYiBzZXJ2aWNlIHR5cGUgfCBgQ2x1c3RlcklQYCB8CnwgYHdlYi5zeXNsb2dTZWNyZXRzUGF0aGAgfCBTcGVjaWZ5IHRoZSBtb3VudCBkaXJlY3Rvcnkgb2YgdGhlIHdlYiBzeXNsb2cgc2VjcmV0cyB8IGAvY29uY291cnNlLXN5c2xvZ2AgfAp8IGB3ZWIudG9sZXJhdGlvbnNgIHwgVG9sZXJhdGlvbnMgZm9yIHRoZSB3ZWIgbm9kZXMgfCBgW11gIHwKfCBgd2ViLnZhdWx0U2VjcmV0c1BhdGhgIHwgU3BlY2lmeSB0aGUgbW91bnQgZGlyZWN0b3J5IG9mIHRoZSB3ZWIgdmF1bHQgc2VjcmV0cyB8IGAvY29uY291cnNlLXZhdWx0YCB8CnwgYHdvcmtlci5uYW1lT3ZlcnJpZGVgIHwgT3ZlcnJpZGUgdGhlIENvbmNvdXJzZSBXb3JrZXIgY29tcG9uZW50cyBuYW1lIHwgYG5pbGAgfAp8IGB3b3JrZXIucmVwbGljYXNgIHwgTnVtYmVyIG9mIENvbmNvdXJzZSBXb3JrZXIgcmVwbGljYXMgfCBgMmAgfAp8IGB3b3JrZXIubWluQXZhaWxhYmxlYCB8IE1pbmltdW0gbnVtYmVyIG9mIHdvcmtlcnMgYXZhaWxhYmxlIGFmdGVyIGFuIGV2aWN0aW9uIHwgYDFgIHwKfCBgd29ya2VyLnJlc291cmNlc2AgfCBDb25jb3Vyc2UgV29ya2VyIHJlc291cmNlIHJlcXVlc3RzIGFuZCBsaW1pdHMgfCBge3JlcXVlc3RzOiB7Y3B1OiAiMTAwbSIsIG1lbW9yeTogIjUxMk1pIn19YCB8CnwgYHdvcmtlci5lbnZgIHwgQ29uZmlndXJlIGFkZGl0aW9uYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciB0aGUgd29ya2VyIGNvbnRhaW5lcihzKSB8IGBbXWAgfAp8IGB3b3JrZXIuYW5ub3RhdGlvbnNgIHwgQW5ub3RhdGlvbnMgdG8gYmUgYWRkZWQgdG8gdGhlIHdvcmtlciBwb2RzIHwgYHt9YCB8CnwgYHdvcmtlci5rZXlzU2VjcmV0c1BhdGhgIHwgU3BlY2lmeSB0aGUgbW91bnQgZGlyZWN0b3J5IG9mIHRoZSB3b3JrZXIga2V5cyBzZWNyZXRzIHwgYC9jb25jb3Vyc2Uta2V5c2AgfAp8IGB3b3JrZXIuYWRkaXRpb25hbFZvbHVtZU1vdW50c2AgfCBWb2x1bWVNb3VudHMgdG8gYmUgYWRkZWQgdG8gdGhlIHdvcmtlciBwb2RzIHwgYG5pbGAgfAp8IGB3b3JrZXIuYWRkaXRpb25hbFZvbHVtZXNgIHwgVm9sdW1lcyB0byBiZSBhZGRlZCB0byB0aGUgd29ya2VyIHBvZHMgfCBgbmlsYCB8CnwgYHdvcmtlci5hZGRpdGlvbmFsQWZmaW5pdGllc2AgfCBBZGRpdGlvbmFsIGFmZmluaXRpZXMgdG8gYXBwbHkgdG8gd29ya2VyIHBvZHMuIEUuZzogbm9kZSBhZmZpbml0eSB8IGB7fWAgfAp8IGB3b3JrZXIudG9sZXJhdGlvbnNgIHwgVG9sZXJhdGlvbnMgZm9yIHRoZSB3b3JrZXIgbm9kZXMgfCBgW11gIHwKfCBgd29ya2VyLnRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzYCB8IFVwcGVyIGJvdW5kIGZvciBncmFjZWZ1bCBzaHV0ZG93biB0byBhbGxvdyB0aGUgd29ya2VyIHRvIGRyYWluIGl0cyB0YXNrcyB8IGA2MGAgfAp8IGB3b3JrZXIuZmF0YWxFcnJvcnNgIHwgTmV3bGluZSBkZWxpbWl0ZWQgc3RyaW5ncyB3aGljaCwgd2hlbiBsb2dnZWQsIHNob3VsZCB0cmlnZ2VyIGEgcmVzdGFydCBvZiB0aGUgd29ya2VyIHwgKlNlZSBbdmFsdWVzLnlhbWxdKHZhbHVlcy55YW1sKSogfAp8IGB3b3JrZXIudXBkYXRlU3RyYXRlZ3lgIHwgYE9uRGVsZXRlYCBvciBgUm9sbGluZ1VwZGF0ZWAgKHJlcXVpcmVzIEt1YmVybmV0ZXMgPj0gMS43KSB8IGBSb2xsaW5nVXBkYXRlYCB8CnwgYHdvcmtlci5wb2RNYW5hZ2VtZW50UG9saWN5YCB8IGBPcmRlcmVkUmVhZHlgIG9yIGBQYXJhbGxlbGAgKHJlcXVpcmVzIEt1YmVybmV0ZXMgPj0gMS43KSB8IGBQYXJhbGxlbGAgfAp8IGB3b3JrZXIuaGFyZEFudGlBZmZpbml0eWAgfCBTaG91bGQgdGhlIHdvcmtlcnMgYmUgZm9yY2VkIChhcyBvcHBvc2VkIHRvIHByZWZlcnJlZCkgdG8gYmUgb24gZGlmZmVyZW50IG5vZGVzPyB8IGBmYWxzZWAgfAp8IGB3b3JrZXIuZW1wdHlEaXJTaXplYCB8IFdoZW4gcGVyc2lzdGFuY2UgaXMgZGlzYWJsZWQgdGhpcyB2YWx1ZSB3aWxsIGJlIHVzZWQgdG8gbGltaXQgdGhlIGVtcHR5RGlyIHZvbHVtZSBzaXplIHwgYG5pbGAgfAp8IGBwZXJzaXN0ZW5jZS5lbmFibGVkYCB8IEVuYWJsZSBDb25jb3Vyc2UgcGVyc2lzdGVuY2UgdXNpbmcgUGVyc2lzdGVudCBWb2x1bWUgQ2xhaW1zIHwgYHRydWVgIHwKfCBgcGVyc2lzdGVuY2Uud29ya2VyLnN0b3JhZ2VDbGFzc2AgfCBDb25jb3Vyc2UgV29ya2VyIFBlcnNpc3RlbnQgVm9sdW1lIFN0b3JhZ2UgQ2xhc3MgfCBgZ2VuZXJpY2AgfAp8IGBwZXJzaXN0ZW5jZS53b3JrZXIuYWNjZXNzTW9kZWAgfCBDb25jb3Vyc2UgV29ya2VyIFBlcnNpc3RlbnQgVm9sdW1lIEFjY2VzcyBNb2RlIHwgYFJlYWRXcml0ZU9uY2VgIHwKfCBgcGVyc2lzdGVuY2Uud29ya2VyLnNpemVgIHwgQ29uY291cnNlIFdvcmtlciBQZXJzaXN0ZW50IFZvbHVtZSBTdG9yYWdlIFNpemUgfCBgMjBHaWAgfAp8IGBwb3N0Z3Jlc3FsLmVuYWJsZWRgIHwgRW5hYmxlIFBvc3RncmVTUUwgYXMgYSBjaGFydCBkZXBlbmRlbmN5IHwgYHRydWVgIHwKfCBgcG9zdGdyZXNxbC5wb3N0Z3Jlc1VzZXJgIHwgUG9zdGdyZVNRTCBVc2VyIHRvIGNyZWF0ZSB8IGBjb25jb3Vyc2VgIHwKfCBgcG9zdGdyZXNxbC5wb3N0Z3Jlc1Bhc3N3b3JkYCB8IFBvc3RncmVTUUwgUGFzc3dvcmQgZm9yIHRoZSBuZXcgdXNlciB8IGBjb25jb3Vyc2VgIHwKfCBgcG9zdGdyZXNxbC5wb3N0Z3Jlc0RhdGFiYXNlYCB8IFBvc3RncmVTUUwgRGF0YWJhc2UgdG8gY3JlYXRlIHwgYGNvbmNvdXJzZWAgfAp8IGBwb3N0Z3Jlc3FsLnBlcnNpc3RlbmNlLmVuYWJsZWRgIHwgRW5hYmxlIFBvc3RncmVTUUwgcGVyc2lzdGVuY2UgdXNpbmcgUGVyc2lzdGVudCBWb2x1bWUgQ2xhaW1zIHwgYHRydWVgIHwKfCBgcmJhYy5jcmVhdGVgIHwgRW5hYmxlcyBjcmVhdGlvbiBvZiBSQkFDIHJlc291cmNlcyB8IGB0cnVlYCB8CnwgYHJiYWMuYXBpVmVyc2lvbmAgfCBSQkFDIHZlcnNpb24gfCBgdjFiZXRhMWAgfAp8IGByYmFjLndlYlNlcnZpY2VBY2NvdW50TmFtZWAgfCBOYW1lIG9mIHRoZSBzZXJ2aWNlIGFjY291bnQgdG8gdXNlIGZvciB3ZWIgcG9kcyBpZiBgcmJhYy5jcmVhdGVgIGlzIGBmYWxzZWAgfCBgZGVmYXVsdGAgfAp8IGByYmFjLndvcmtlclNlcnZpY2VBY2NvdW50TmFtZWAgfCBOYW1lIG9mIHRoZSBzZXJ2aWNlIGFjY291bnQgdG8gdXNlIGZvciB3b3JrZXJzIGlmIGByYmFjLmNyZWF0ZWAgaXMgYGZhbHNlYCB8IGBkZWZhdWx0YCB8CnwgYHNlY3JldHMuY3JlYXRlYCB8IENyZWF0ZSB0aGUgc2VjcmV0IHJlc291cmNlIGZyb20gdGhlIGZvbGxvd2luZyB2YWx1ZXMuICpTZWUgW1NlY3JldHNdKCNzZWNyZXRzKSogfCBgdHJ1ZWAgfAp8IGBzZWNyZXRzLmF3c1NzbUFjY2Vzc0tleWAgfCBBV1MgQWNjZXNzIEtleSBJRCBmb3IgU1NNIGFjY2VzcyB8IGBuaWxgIHwKfCBgc2VjcmV0cy5hd3NTc21TZWNyZXRLZXlgIHwgQVdTIFNlY3JldCBBY2Nlc3MgS2V5IElEIGZvciBTU00gYWNjZXNzIHwgYG5pbGAgfAp8IGBzZWNyZXRzLmF3c1NzbVNlc3Npb25Ub2tlbmAgfCBBV1MgU2Vzc2lvbiBUb2tlbiBmb3IgU1NNIGFjY2VzcyB8IGBuaWxgIHwKfCBgc2VjcmV0cy5jZkNhQ2VydGAgfCBDQSBjZXJ0aWZpY2F0ZSBmb3IgY2YgYXV0aCBwcm92aWRlciB8IGBuaWxgIHwKfCBgc2VjcmV0cy5jZkNsaWVudElkYCB8IENsaWVudCBJRCBmb3IgY2YgYXV0aCBwcm92aWRlciB8IGBuaWxgIHwKfCBgc2VjcmV0cy5jZkNsaWVudFNlY3JldGAgfCBDbGllbnQgc2VjcmV0IGZvciBjZiBhdXRoIHByb3ZpZGVyIHwgYG5pbGAgfAp8IGBzZWNyZXRzLmVuY3J5cHRpb25LZXlgIHwgY3VycmVudCBlbmNyeXB0aW9uIGtleSB8IGBuaWxgIHwKfCBgc2VjcmV0cy5naXRodWJDYUNlcnRgIHwgQ0EgY2VydGlmaWNhdGUgZm9yIEVudGVycHJpc2UgR2l0aHViIE9BdXRoIHwgYG5pbGAgfAp8IGBzZWNyZXRzLmdpdGh1YkNsaWVudElkYCB8IEFwcGxpY2F0aW9uIGNsaWVudCBJRCBmb3IgR2l0SHViIE9BdXRoIHwgYG5pbGAgfAp8IGBzZWNyZXRzLmdpdGh1YkNsaWVudFNlY3JldGAgfCBBcHBsaWNhdGlvbiBjbGllbnQgc2VjcmV0IGZvciBHaXRIdWIgT0F1dGggfCBgbmlsYCB8CnwgYHNlY3JldHMuZ2l0bGFiQ2xpZW50SWRgIHwgQXBwbGljYXRpb24gY2xpZW50IElEIGZvciBHaXRMYWIgT0F1dGggfCBgbmlsYCB8CnwgYHNlY3JldHMuZ2l0bGFiQ2xpZW50U2VjcmV0YCB8IEFwcGxpY2F0aW9uIGNsaWVudCBzZWNyZXQgZm9yIEdpdExhYiBPQXV0aCB8IGBuaWxgIHwKfCBgc2VjcmV0cy5ob3N0S2V5UHViYCB8IENvbmNvdXJzZSBIb3N0IFB1YmxpYyBLZXkgfCAqU2VlIFt2YWx1ZXMueWFtbF0odmFsdWVzLnlhbWwpKiB8CnwgYHNlY3JldHMuaG9zdEtleWAgfCBDb25jb3Vyc2UgSG9zdCBQcml2YXRlIEtleSB8ICpTZWUgW3ZhbHVlcy55YW1sXSh2YWx1ZXMueWFtbCkqIHwKfCBgc2VjcmV0cy5pbmZsdXhkYlBhc3N3b3JkYCB8IFBhc3N3b3JkIHVzZWQgdG8gYXV0aGVudGljYXRlIHdpdGggaW5mbHV4ZGIgfCBgbmlsYCB8CnwgYHNlY3JldHMubG9jYWxVc2Vyc2AgfCBDcmVhdGUgY29uY291cnNlIGxvY2FsIHVzZXJzLiBEZWZhdWx0IHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhcmUgYHRlc3Q6dGVzdGAgKlNlZSBbdmFsdWVzLnlhbWxdKHZhbHVlcy55YW1sKSogfAp8IGBzZWNyZXRzLm9hdXRoQ2FDZXJ0YCB8IENBIGNlcnRpZmljYXRlIGZvciBHZW5lcmljIE9BdXRoIHwgYG5pbGAgfAp8IGBzZWNyZXRzLm9hdXRoQ2xpZW50SWRgIHwgQXBwbGljYXRpb24gY2xpZW50IElEIGZvciBHZW5lcmljIE9BdXRoIHwgYG5pbGAgfAp8IGBzZWNyZXRzLm9hdXRoQ2xpZW50U2VjcmV0YCB8IEFwcGxpY2F0aW9uIGNsaWVudCBzZWNyZXQgZm9yIEdlbmVyaWMgT0F1dGggfCBgbmlsYCB8CnwgYHNlY3JldHMub2lkY0NhQ2VydGAgfCBDQSBjZXJ0aWZpY2F0ZSBmb3IgT0lEQyBPYXV0aCB8IGBuaWxgIHwKfCBgc2VjcmV0cy5vaWRjQ2xpZW50SWRgIHwgQXBwbGljYXRpb24gY2xpZW50IElEIGZvciBPSURJIE9BdXRoIHwgYG5pbGAgfAp8IGBzZWNyZXRzLm9pZGNDbGllbnRTZWNyZXRgIHwgQXBwbGljYXRpb24gY2xpZW50IHNlY3JldCBmb3IgT0lEQyBPQXV0aCB8IGBuaWxgIHwKfCBgc2VjcmV0cy5vbGRFbmNyeXB0aW9uS2V5YCB8IG9sZCBlbmNyeXB0aW9uIGtleSwgdXNlZCBmb3Iga2V5IHJvdGF0aW9uIHwgYG5pbGAgfAp8IGBzZWNyZXRzLnBvc3RncmVzcWxDYUNlcnRgIHwgUG9zdGdyZVNRTCBDQSBjZXJ0aWZpY2F0ZSB8IGBuaWxgIHwKfCBgc2VjcmV0cy5wb3N0Z3Jlc3FsQ2xpZW50Q2VydGAgfCBQb3N0Z3JlU1FMIENsaWVudCBjZXJ0aWZpY2F0ZSB8IGBuaWxgIHwKfCBgc2VjcmV0cy5wb3N0Z3Jlc3FsQ2xpZW50S2V5YCB8IFBvc3RncmVTUUwgQ2xpZW50IGtleSB8IGBuaWxgIHwKfCBgc2VjcmV0cy5wb3N0Z3Jlc3FsUGFzc3dvcmRgIHwgUG9zdGdyZVNRTCBVc2VyIFBhc3N3b3JkIHwgYG5pbGAgfAp8IGBzZWNyZXRzLnBvc3RncmVzcWxVc2VyYCB8IFBvc3RncmVTUUwgVXNlciBOYW1lIHwgYG5pbGAgfAp8IGBzZWNyZXRzLnNlc3Npb25TaWduaW5nS2V5YCB8IENvbmNvdXJzZSBTZXNzaW9uIFNpZ25pbmcgUHJpdmF0ZSBLZXkgfCAqU2VlIFt2YWx1ZXMueWFtbF0odmFsdWVzLnlhbWwpKiB8CnwgYHNlY3JldHMuc3lzbG9nQ2FDZXJ0YCB8IFNTTCBjZXJ0aWZpY2F0ZSB0byB2ZXJpZnkgU3lzbG9nIHNlcnZlciB8IGBuaWxgIHwKfCBgc2VjcmV0cy52YXVsdEF1dGhQYXJhbWAgfCBQYXJhbXRlciB0byBwYXNzIHdoZW4gbG9nZ2luZyBpbiB2aWEgdGhlIGJhY2tlbmQgfCBgbmlsYCB8CnwgYHNlY3JldHMudmF1bHRDYUNlcnRgIHwgQ0EgY2VydGlmaWNhdGUgdXNlIHRvIHZlcmlmeSB0aGUgdmF1bHQgc2VydmVyIFNTTCBjZXJ0IHwgYG5pbGAgfAp8IGBzZWNyZXRzLnZhdWx0Q2xpZW50Q2VydGAgfCBWYXVsdCBDbGllbnQgQ2VydGlmaWNhdGUgfCBgbmlsYCB8CnwgYHNlY3JldHMudmF1bHRDbGllbnRLZXlgIHwgVmF1bHQgQ2xpZW50IEtleSB8IGBuaWxgIHwKfCBgc2VjcmV0cy52YXVsdENsaWVudFRva2VuYCB8IFZhdWx0IHBlcmlvZGljIGNsaWVudCB0b2tlbiB8IGBuaWxgIHwKfCBgc2VjcmV0cy53ZWJUbHNDZXJ0YCB8IFRMUyBjZXJ0aWZpY2F0ZSBmb3IgdGhlIHdlYiBjb21wb25lbnQgdG8gdGVybWluYXRlIFRMUyBjb25uZWN0aW9ucyB8IGBuaWxgIHwKfCBgc2VjcmV0cy53ZWJUbHNLZXlgIHwgQW4gUlNBIHByaXZhdGUga2V5LCB1c2VkIHRvIGVuY3J5cHQgSFRUUFMgdHJhZmZpYyAgfCBgbmlsYCB8CnwgYHNlY3JldHMud29ya2VyS2V5UHViYCB8IENvbmNvdXJzZSBXb3JrZXIgUHVibGljIEtleSB8ICpTZWUgW3ZhbHVlcy55YW1sXSh2YWx1ZXMueWFtbCkqIHwKfCBgc2VjcmV0cy53b3JrZXJLZXlgIHwgQ29uY291cnNlIFdvcmtlciBQcml2YXRlIEtleSB8ICpTZWUgW3ZhbHVlcy55YW1sXSh2YWx1ZXMueWFtbCkqIHwKCkZvciBjb25maWd1cmFibGUgY29uY291cnNlIHBhcmFtZXRlcnMsIHJlZmVyIHRvIFt2YWx1ZXMueWFtbF0odmFsdWVzLnlhbWwpIGBjb25jb3Vyc2VgIHNlY3Rpb24uIEFsbCBwYXJhbWV0ZXJzIHVuZGVyIHRoaXMgc2VjdGlvbiBhcmUgc3RyaWN0bHkgbWFwcGVkIGZyb20gY29uY291cnNlIGJpbmFyeSBjb21tYW5kcy4gRm9yIGV4YW1wbGUgaWYgb25lIG5lZWRzIHRvIGNvbmZpZ3VyZSB0aGUgY29uY291cnNlIGV4dGVybmFsIFVSTCwgdGhlIHBhcmFtIGBjb25jb3Vyc2VgIC0+IGB3ZWJgIC0+IGBleHRlcm5hbFVybGAgc2hvdWxkIGJlIHNldCwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byBydW5uaW5nIGNvbmNvdXJzZSBiaW5hcnkgYXMgYGNvbmNvdXJzZSB3ZWIgLS1leHRlcm5hbC11cmxgLiBGb3IgdGhvc2Ugc3ViLXNlY3Rpb25zIHRoYXQgaGF2ZSBgZW5hYmxlZGAsIG9uZSBuZWVkcyB0byBzZXQgYGVuYWJsZWRgIHRvIGJlIGB0cnVlYCB0byB1c2UgdGhlIGZvbGxvd2luZyBwYXJhbXMgd2l0aGluIHRoZSBzZWN0aW9uLgoKU3BlY2lmeSBlYWNoIHBhcmFtZXRlciB1c2luZyB0aGUgYC0tc2V0IGtleT12YWx1ZVssa2V5PXZhbHVlXWAgYXJndW1lbnQgdG8gYGhlbG0gaW5zdGFsbGAuCgpBbHRlcm5hdGl2ZWx5LCBhIFlBTUwgZmlsZSB0aGF0IHNwZWNpZmllcyB0aGUgdmFsdWVzIGZvciB0aGUgcGFyYW1ldGVycyBjYW4gYmUgcHJvdmlkZWQgd2hpbGUgaW5zdGFsbGluZyB0aGUgY2hhcnQuIEZvciBleGFtcGxlLAoKYGBgY29uc29sZQokIGhlbG0gaW5zdGFsbCAtLW5hbWUgbXktcmVsZWFzZSAtZiB2YWx1ZXMueWFtbCBzdGFibGUvY29uY291cnNlCmBgYAoKPiAqKlRpcCoqOiBZb3UgY2FuIHVzZSB0aGUgZGVmYXVsdCBbdmFsdWVzLnlhbWxdKHZhbHVlcy55YW1sKQoKIyMjIFNlY3JldHMKCkZvciB5b3VyIGNvbnZlbmllbmNlLCB0aGlzIGNoYXJ0IHByb3ZpZGVzIHNvbWUgZGVmYXVsdCB2YWx1ZXMgZm9yIHNlY3JldHMsIGJ1dCBpdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdSBnZW5lcmF0ZSBhbmQgbWFuYWdlIHRoZXNlIHNlY3JldHMgb3V0c2lkZSB0aGUgSGVsbSBjaGFydC4gVG8gZG8gdGhpcywgc2V0IGBzZWNyZXRzLmNyZWF0ZWAgdG8gYGZhbHNlYCwgY3JlYXRlIGZpbGVzIGZvciBlYWNoIHNlY3JldCB2YWx1ZSwgYW5kIHR1cm4gaXQgYWxsIGludG8gYSBrOHMgc2VjcmV0LiBCZSBjYXJlZnVsIHdpdGggaW50cm9kdWNpbmcgdHJhaWxpbmcgbmV3bGluZSBjaGFyYWN0ZXJzOyBmb2xsb3dpbmcgdGhlIHN0ZXBzIGJlbG93IGVuc3VyZXMgbm9uZSBlbmQgdXAgaW4geW91ciBzZWNyZXRzLiBGaXJzdCwgcGVyZm9ybSB0aGUgZm9sbG93aW5nIHRvIGNyZWF0ZSB0aGUgbWFuZGF0b3J5IHNlY3JldCB2YWx1ZXM6CgpgYGBjb25zb2xlCm1rZGlyIGNvbmNvdXJzZS1zZWNyZXRzCmNkIGNvbmNvdXJzZS1zZWNyZXRzCnNzaC1rZXlnZW4gLXQgcnNhIC1mIGhvc3Qta2V5ICAtTiAnJwptdiBob3N0LWtleS5wdWIgaG9zdC1rZXktcHViCnNzaC1rZXlnZW4gLXQgcnNhIC1mIHdvcmtlci1rZXkgIC1OICcnCm12IHdvcmtlci1rZXkucHViIHdvcmtlci1rZXktcHViCnNzaC1rZXlnZW4gLXQgcnNhIC1mIHNlc3Npb24tc2lnbmluZy1rZXkgIC1OICcnCnJtIHNlc3Npb24tc2lnbmluZy1rZXkucHViCnByaW50ZiAiJXM6JXMiICJjb25jb3Vyc2UiICIkKG9wZW5zc2wgcmFuZCAtYmFzZTY0IDI0KSIgPiBsb2NhbC11c2VycwpgYGAKCllvdSdsbCBhbHNvIG5lZWQgdG8gY3JlYXRlL2NvcHkgc2VjcmV0IHZhbHVlcyBmb3Igb3B0aW9uYWwgZmVhdHVyZXMuIFNlZSBbdGVtcGxhdGVzL3NlY3JldHMueWFtbF0odGVtcGxhdGVzL3NlY3JldHMueWFtbCkgZm9yIHBvc3NpYmxlIHZhbHVlcy4gSW4gdGhlIGV4YW1wbGUgYmVsb3csIHdlIGFyZSBub3QgdXNpbmcgdGhlIFtQb3N0Z3JlU1FMXSgjcG9zdGdyZXNxbCkgY2hhcnQgZGVwZW5kZW5jeSwgYW5kIHNvIHdlIG11c3Qgc2V0IGBwb3N0Z3Jlc3FsLXVzZXJgIGFuZCBgcG9zdGdyZXNxbC1wYXNzd29yZGAgc2VjcmV0cy4KCmBgYGNvbnNvbGUKIyBjb3B5IGEgcG9zZ3JlcyB1c2VyIHRvIGNsaXBib2FyZCBhbmQgcGFzdGUgaXQgdG8gZmlsZQpwcmludGYgIiVzIiAiJChwYnBhc3RlKSIgPiBwb3N0Z3Jlc3FsLXVzZXIKIyBjb3B5IGEgcG9zZ3JlcyBwYXNzd29yZCB0byBjbGlwYm9hcmQgYW5kIHBhc3RlIGl0IHRvIGZpbGUKcHJpbnRmICIlcyIgIiQocGJwYXN0ZSkiID4gcG9zdGdyZXNxbC1wYXNzd29yZAoKIyBjb3B5IEdpdGh1YiBjbGllbnQgaWQgYW5kIHNlY3JldHMgdG8gY2xpcGJvYXJkIGFuZCBwYXN0ZSB0byBmaWxlcwpwcmludGYgIiVzIiAiJChwYnBhc3RlKSIgPiBnaXRodWItY2xpZW50LWlkCnByaW50ZiAiJXMiICIkKHBicGFzdGUpIiA+IGdpdGh1Yi1jbGllbnQtc2VjcmV0CgojIHNldCBhbiBlbmNyeXB0aW9uIGtleSBmb3IgREIgZW5jcnlwdGlvbiBhdCByZXN0CnByaW50ZiAiJXMiICIkKG9wZW5zc2wgcmFuZCAtYmFzZTY0IDI0KSIgPiBlbmNyeXB0aW9uLWtleQpgYGAKClRoZW4gY3JlYXRlIGEgc2VjcmV0IGNhbGxlZCBgW3JlbGVhc2UtbmFtZV0tY29uY291cnNlYCBmcm9tIGFsbCB0aGUgc2VjcmV0IHZhbHVlIGZpbGVzIGluIHRoZSBjdXJyZW50IGZvbGRlcjoKCmBgYGNvbnNvbGUKa3ViZWN0bCBjcmVhdGUgc2VjcmV0IGdlbmVyaWMgbXktcmVsZWFzZS1jb25jb3Vyc2UgLS1mcm9tLWZpbGU9LgpgYGAKCk1ha2Ugc3VyZSB5b3UgY2xlYW4gdXAgYWZ0ZXIgeW91cnNlbGYuCgojIyMgUGVyc2lzdGVuY2UKClRoaXMgY2hhcnQgbW91bnRzIGEgUGVyc2lzdGVudCBWb2x1bWUgZm9yIGVhY2ggQ29uY291cnNlIFdvcmtlci4gVGhlIHZvbHVtZSBpcyBjcmVhdGVkIHVzaW5nIGR5bmFtaWMgdm9sdW1lIHByb3Zpc2lvbmluZy4gSWYgeW91IHdhbnQgdG8gZGlzYWJsZSBpdCBvciBjaGFuZ2UgdGhlIHBlcnNpc3RlbmNlIHByb3BlcnRpZXMsIHVwZGF0ZSB0aGUgYHBlcnNpc3RlbmNlYCBzZWN0aW9uIG9mIHlvdXIgY3VzdG9tIGB2YWx1ZXMueWFtbGAgZmlsZToKCmBgYHlhbWwKIyMgUGVyc2lzdGVudCBWb2x1bWUgU3RvcmFnZSBjb25maWd1cmF0aW9uLgojIyByZWY6IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL3VzZXItZ3VpZGUvcGVyc2lzdGVudC12b2x1bWVzCiMjCnBlcnNpc3RlbmNlOgogICMjIEVuYWJsZSBwZXJzaXN0ZW5jZSB1c2luZyBQZXJzaXN0ZW50IFZvbHVtZSBDbGFpbXMuCiAgIyMKICBlbmFibGVkOiB0cnVlCgogICMjIFdvcmtlciBQZXJzaXN0ZW5jZSBjb25maWd1cmF0aW9uLgogICMjCiAgd29ya2VyOgogICAgIyMgUGVyc2lzdGVudCBWb2x1bWUgU3RvcmFnZSBDbGFzcy4KICAgICMjCiAgICBjbGFzczogZ2VuZXJpYwoKICAgICMjIFBlcnNpc3RlbnQgVm9sdW1lIEFjY2VzcyBNb2RlLgogICAgIyMKICAgIGFjY2Vzc01vZGU6IFJlYWRXcml0ZU9uY2UKCiAgICAjIyBQZXJzaXN0ZW50IFZvbHVtZSBTdG9yYWdlIFNpemUuCiAgICAjIwogICAgc2l6ZTogIjIwR2kiCmBgYAoKSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHVzZSBQZXJzaXN0ZW50IFZvbHVtZXMgZm9yIENvbmNvdXJzZSBXb3JrZXJzOyBvdGhlcndpc2UsIHRoZSBjb250YWluZXIgaW1hZ2VzIG1hbmFnZWQgYnkgdGhlIFdvcmtlciBhcmUgc3RvcmVkIGluIGFuIGBlbXB0eURpcmAgdm9sdW1lIG9uIHRoZSBub2RlJ3MgZGlzay4gVGhpcyB3aWxsIGludGVyZmVyZSB3aXRoIGs4cyBJbWFnZUdDIGFuZCB0aGUgbm9kZSdzIGRpc2sgd2lsbCBmaWxsIHVwIGFzIGEgcmVzdWx0LiBUaGlzIHdpbGwgYmUgZml4ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZSBvZiBrOHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMvcHVsbC81NzAyMAoKIyMjIEluZ3Jlc3MgVExTCgpJZiB5b3VyIGNsdXN0ZXIgYWxsb3dzIGF1dG9tYXRpYyBjcmVhdGlvbi9yZXRyaWV2YWwgb2YgVExTIGNlcnRpZmljYXRlcyAoZS5nLiBba3ViZS1sZWdvXShodHRwczovL2dpdGh1Yi5jb20vamV0c3RhY2sva3ViZS1sZWdvKSksIHBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhhdCBtZWNoYW5pc20uCgpUbyBtYW51YWxseSBjb25maWd1cmUgVExTLCBmaXJzdCBjcmVhdGUvcmV0cmlldmUgYSBrZXkgJiBjZXJ0aWZpY2F0ZSBwYWlyIGZvciB0aGUgYWRkcmVzcyhlcykgeW91IHdpc2ggdG8gcHJvdGVjdC4gVGhlbiBjcmVhdGUgYSBUTFMgc2VjcmV0IGluIHRoZSBuYW1lc3BhY2U6CgpgYGBjb25zb2xlCmt1YmVjdGwgY3JlYXRlIHNlY3JldCB0bHMgY29uY291cnNlLXdlYi10bHMgLS1jZXJ0PXBhdGgvdG8vdGxzLmNlcnQgLS1rZXk9cGF0aC90by90bHMua2V5CmBgYAoKSW5jbHVkZSB0aGUgc2VjcmV0J3MgbmFtZSwgYWxvbmcgd2l0aCB0aGUgZGVzaXJlZCBob3N0bmFtZXMsIGluIHRoZSBgd2ViLmluZ3Jlc3MudGxzYCBzZWN0aW9uIG9mIHlvdXIgY3VzdG9tIGB2YWx1ZXMueWFtbGAgZmlsZToKCmBgYHlhbWwKIyMgQ29uZmlndXJhdGlvbiB2YWx1ZXMgZm9yIENvbmNvdXJzZSBXZWIgY29tcG9uZW50cy4KIyMKd2ViOgogICMjIEluZ3Jlc3MgY29uZmlndXJhdGlvbi4KICAjIyByZWY6IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL3VzZXItZ3VpZGUvaW5ncmVzcy8KICAjIwogIGluZ3Jlc3M6CiAgICAjIyBFbmFibGUgaW5ncmVzcy4KICAgICMjCiAgICBlbmFibGVkOiB0cnVlCgogICAgIyMgSG9zdG5hbWVzLgogICAgIyMgTXVzdCBiZSBwcm92aWRlZCBpZiBJbmdyZXNzIGlzIGVuYWJsZWQuCiAgICAjIwogICAgaG9zdHM6CiAgICAgIC0gY29uY291cnNlLmRvbWFpbi5jb20KCiAgICAjIyBUTFMgY29uZmlndXJhdGlvbi4KICAgICMjIFNlY3JldHMgbXVzdCBiZSBtYW51YWxseSBjcmVhdGVkIGluIHRoZSBuYW1lc3BhY2UuCiAgICAjIwogICAgdGxzOgogICAgICAtIHNlY3JldE5hbWU6IGNvbmNvdXJzZS13ZWItdGxzCiAgICAgICAgaG9zdHM6CiAgICAgICAgICAtIGNvbmNvdXJzZS5kb21haW4uY29tCmBgYAoKIyMjIFBvc3RncmVTUUwKCkJ5IGRlZmF1bHQsIHRoaXMgY2hhcnQgdXNlcyBhIFBvc3RncmVTUUwgZGF0YWJhc2UgZGVwbG95ZWQgYXMgYSBjaGFydCBkZXBlbmRlbmN5LCB3aXRoIGRlZmF1bHQgdmFsdWVzIGZvciB1c2VybmFtZSwgcGFzc3dvcmQsIGFuZCBkYXRhYmFzZSBuYW1lLiBUaGVzZSBjYW4gYmUgbW9kaWZpZWQgYnkgc2V0dGluZyB0aGUgYHBvc3RncmVzcWwuKmAgdmFsdWVzLgoKWW91IGNhbiBhbHNvIGJyaW5nIHlvdXIgb3duIFBvc3RncmVTUUwuIFRvIGRvIHNvLCBzZXQgYHBvc3RncmVzcWwuZW5hYmxlZGAgdG8gZmFsc2UsIGFuZCB0aGVuIGNvbmZpZ3VyZSBDb25jb3Vyc2UncyBgcG9zdGdyZXNgIHZhbHVlcyAoYGNvbmNvdXJzZS53ZWIucG9zdGdyZXMuKmApLgoKTm90ZSB0aGF0IHNvbWUgdmFsdWVzIGdldCBzZXQgaW4gdGhlIGZvcm0gb2Ygc2VjcmV0cywgbGlrZSBgcG9zdGdyZXNxbC11c2VyYCwgYHBvc3RncmVzcWwtcGFzc3dvcmRgLCBhbmQgb3RoZXJzIChzZWUgW3RlbXBsYXRlcy9zZWNyZXRzLnlhbWxdKHRlbXBsYXRlcy9zZWNyZXRzLnlhbWwpIGZvciBwb3NzaWJsZSB2YWx1ZXMgYW5kIHRoZSBbc2VjcmV0cyBzZWN0aW9uXSgjc2VjcmV0cykgb24gdGhpcyBSRUFETUUgZm9yIGd1aWRhbmNlIG9uIGhvdyB0byBzZXQgdGhvc2Ugc2VjcmV0cykuCgoKIyMjIENyZWRlbnRpYWwgTWFuYWdlbWVudAoKUGlwZWxpbmVzIHVzdWFsbHkgbmVlZCBjcmVkZW50aWFscyB0byBkbyB0aGluZ3MuIENvbmNvdXJzZSBzdXBwb3J0cyB0aGUgdXNlIG9mIGEgW0NyZWRlbnRpYWwgTWFuYWdlcl0oaHR0cHM6Ly9jb25jb3Vyc2UtY2kub3JnL2NyZWRzLmh0bWwpIHNvIHlvdXIgcGlwZWxpbmVzIGNhbiBjb250YWluIHJlZmVyZW5jZXMgdG8gc2VjcmV0cyBpbnN0ZWFkIG9mIHRoZSBhY3R1YWwgc2VjcmV0IHZhbHVlcy4gWW91IGNhbid0IHVzZSBtb3JlIHRoYW4gb25lIGNyZWRlbnRpYWwgbWFuYWdlciBhdCBhIHRpbWUuCgojIyMjIEt1YmVybmV0ZXMgU2VjcmV0cwoKQnkgZGVmYXVsdCwgdGhpcyBjaGFydCB1c2VzIEt1YmVybmV0ZXMgU2VjcmV0cyBhcyBhIGNyZWRlbnRpYWwgbWFuYWdlci4gCgpGb3IgYSBnaXZlbiBDb25jb3Vyc2UgKnRlYW0qLCBhIHBpcGVsaW5lIGxvb2tzIGZvciBzZWNyZXRzIGluIGEgbmFtZXNwYWNlIG5hbWVkIGBbbmFtZXNwYWNlUHJlZml4XVt0ZWFtTmFtZV1gLiBUaGUgbmFtZXNwYWNlIHByZWZpeCBpcyB0aGUgcmVsZWFzZSBuYW1lIGZvbGxvd2VkIGJ5IGEgaHlwaGVuIGJ5IGRlZmF1bHQsIGFuZCBjYW4gYmUgb3ZlcnJpZGRlbiB3aXRoIHRoZSB2YWx1ZSBgY29uY291cnNlLndlYi5rdWJlcm5ldGVzLm5hbWVzcGFjZVByZWZpeGAuIEVhY2ggdGVhbSBsaXN0ZWQgdW5kZXIgYGNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy50ZWFtc2Agd2lsbCBoYXZlIGEgbmFtZXNwYWNlIGNyZWF0ZWQgZm9yIGl0LCBhbmQgdGhlIG5hbWVzcGFjZSByZW1haW5zIGFmdGVyIGRlbGV0aW9uIG9mIHRoZSByZWxlYXNlIHVubGVzcyB5b3Ugc2V0IGBjb25jb3Vyc2Uud2ViLmt1YmVybmV0ZXMua2VlcE5hbWVzcGFjZWAgdG8gYGZhbHNlYC4gQnkgZGVmYXVsdCwgYSBuYW1lc3BhY2Ugd2lsbCBiZSBjcmVhdGVkIGZvciB0aGUgYG1haW5gIHRlYW0uCgpUaGUgc2VydmljZSBhY2NvdW50IHVzZWQgYnkgQ29uY291cnNlIG11c3QgaGF2ZSBgZ2V0YCBhY2Nlc3MgdG8gc2VjcmV0cyBpbiB0aGF0IG5hbWVzcGFjZS4gV2hlbiBgcmJhYy5jcmVhdGVgIGlzIHRydWUsIHRoaXMgYWNjZXNzIGlzIGdyYW50ZWQgZm9yIGVhY2ggdGVhbSBsaXN0ZWQgdW5kZXIgYGNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy50ZWFtc2AuCgpIZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIHRoZSBsb29rdXAgaGV1cmlzdGljcywgZ2l2ZW4gcmVsZWFzZSBuYW1lIGBjb25jb3Vyc2VgOgoKSW4gdGVhbSBgYWNjb3VudGluZy1kZXZgLCBwaXBlbGluZSBgbXktYXBwYDsgdGhlIGV4cHJlc3Npb24gYCgoYXBpLWtleSkpYCByZXNvbHZlcyB0bzoKCjEuIHRoZSBzZWNyZXQgdmFsdWUgaW4gbmFtZXNwYWNlOiBgY29uY291cnNlLWFjY291bnRpbmctZGV2YCBzZWNyZXQ6IGBteS1hcHAuYXBpLWtleWAsIGtleTogYHZhbHVlYAoyLiBhbmQgaWYgbm90IGZvdW5kLCBpcyB0aGUgdmFsdWUgaW4gbmFtZXNwYWNlOiBgY29uY291cnNlLWFjY291bnRpbmctZGV2YCBzZWNyZXQ6IGBhcGkta2V5YCwga2V5OiBgdmFsdWVgCgpJbiB0ZWFtIGFjY291bnRpbmctZGV2LCBwaXBlbGluZSBgbXktYXBwYCwgdGhlIGV4cHJlc3Npb24gYCgoY29tbW9uLXNlY3JldHMuYXBpLWtleSkpYCByZXNvbHZlcyB0bzoKCjEuIHRoZSBzZWNyZXQgdmFsdWUgaW4gbmFtZXNwYWNlOiBgY29uY291cnNlLWFjY291bnRpbmctZGV2YCBzZWNyZXQ6IGBteS1hcHAuY29tbW9uLXNlY3JldHNgLCBrZXk6IGBhcGkta2V5YAoyLiBhbmQgaWYgbm90IGZvdW5kLCBpcyB0aGUgdmFsdWUgaW4gbmFtZXNwYWNlOiBgY29uY291cnNlLWFjY291bnRpbmctZGV2YCBzZWNyZXQ6IGBjb21tb24tc2VjcmV0c2AsIGtleTogYGFwaS1rZXlgCgpCZSBtaW5kZnVsIG9mIHlvdXIgdGVhbSBhbmQgcGlwZWxpbmUgbmFtZXMsIHRvIGVuc3VyZSB0aGV5IGNhbiBiZSB1c2VkIGluIG5hbWVzcGFjZSBhbmQgc2VjcmV0IG5hbWVzLCBlLmcuIG5vIHVuZGVyc2NvcmVzLgoKVG8gdGVzdCwgY3JlYXRlIGEgc2VjcmV0IGluIG5hbWVzcGFjZSBgY29uY291cnNlLW1haW5gOgoKYGBgY29uc29sZQprdWJlY3RsIGNyZWF0ZSBzZWNyZXQgZ2VuZXJpYyBoZWxsbyAtLWZyb20tbGl0ZXJhbCAndmFsdWU9SGVsbG8gd29ybGQhJwpgYGAKClRoZW4gYGZseSBzZXQtcGlwZWxpbmVgIHdpdGggdGhlIGZvbGxvd2luZyBwaXBlbGluZSwgYW5kIHRyaWdnZXIgaXQ6CgpgYGB5YW1sCmpvYnM6Ci0gbmFtZTogaGVsbG8td29ybGQKICBwbGFuOgogIC0gdGFzazogc2F5LWhlbGxvCiAgICBjb25maWc6CiAgICAgIHBsYXRmb3JtOiBsaW51eAogICAgICBpbWFnZV9yZXNvdXJjZToKICAgICAgICB0eXBlOiBkb2NrZXItaW1hZ2UKICAgICAgICBzb3VyY2U6IHtyZXBvc2l0b3J5OiBhbHBpbmV9CiAgICAgIHBhcmFtczoKICAgICAgICBIRUxMTzogKChoZWxsbykpCiAgICAgIHJ1bjoKICAgICAgICBwYXRoOiAvYmluL3NoCiAgICAgICAgYXJnczogWyItYyIsICJlY2hvICRIRUxMTyJdCmBgYAoKIyMjIyBIYXNoaWNvcnAgVmF1bHQKClRvIHVzZSBWYXVsdCwgc2V0IGBjb25jb3Vyc2Uud2ViLmt1YmVybmV0ZXMuZW5hYmxlZGAgdG8gZmFsc2UsIGFuZCBzZXQgdGhlIGZvbGxvd2luZyB2YWx1ZXM6CgoKYGBgeWFtbAojIyBDb25maWd1cmF0aW9uIHZhbHVlcyBmb3IgdGhlIENyZWRlbnRpYWwgTWFuYWdlci4KIyMgcmVmOiBodHRwczovL2NvbmNvdXJzZS1jaS5vcmcvY3JlZHMuaHRtbAojIwpjb25jb3Vyc2U6CiAgd2ViOgogICAgdmF1bHQ6CiAgICAgICMjIFVzZSBIYXNoaWNvcnAgVmF1bHQgZm9yIHRoZSBDcmVkZW50aWFsIE1hbmFnZXIuCiAgICAgICMjCiAgICAgIGVuYWJsZWQ6IGZhbHNlCgogICAgICAjIyBVUkwgcG9pbnRpbmcgdG8gdmF1bHQgYWRkciAoaS5lLiBodHRwOi8vdmF1bHQ6ODIwMCkuCiAgICAgICMjCiAgICAgICMgdXJsOgoKICAgICAgIyMgdmF1bHQgcGF0aCB1bmRlciB3aGljaCB0byBuYW1lc3BhY2UgY3JlZGVudGlhbCBsb29rdXAsIGRlZmF1bHRzIHRvIC9jb25jb3Vyc2UuCiAgICAgICMjCiAgICAgICMgcGF0aFByZWZpeDoKYGBgCgojIyMjIEFXUyBTeXN0ZW1zIE1hbmFnZXIgUGFyYW1ldGVyIFN0b3JlIChTU00pCgpUbyB1c2UgU1NNLCBzZXQgYGNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy5lbmFibGVkYCB0byBmYWxzZSwgYW5kIHNldCBgY29uY291cnNlLndlYi5hd3NTc20uZW5hYmxlZGAgdG8gdHJ1ZS4KCkZvciBhIGdpdmVuIENvbmNvdXJzZSAqdGVhbSosIGEgcGlwZWxpbmUgbG9va3MgZm9yIHNlY3JldHMgaW4gU1NNIHVzaW5nIGVpdGhlciBgL2NvbmNvdXJzZS97dGVhbX0ve3NlY3JldH1gIG9yIGAvY29uY291cnNlL3t0ZWFtfS97cGlwZWxpbmV9L3tzZWNyZXR9YDsgdGhlIHBhdHRlcm5zIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgY29uY291cnNlLndlYi5hd3NTc20udGVhbVNlY3JldFRlbXBsYXRlYCBhbmQgYGNvbmNvdXJzZS53ZWIuYXdzU3NtLnBpcGVsaW5lU2VjcmV0VGVtcGxhdGVgIHNldHRpbmdzLgoKQ29uY291cnNlIHJlcXVpcmVzIEFXUyBjcmVkZW50aWFscyB3aGljaCBhcmUgYWJsZSB0byByZWFkIGZyb20gU1NNIGZvciB0aGlzIGZlYXR1cmUgdG8gZnVuY3Rpb24uIENyZWRlbnRpYWxzIGNhbiBiZSBzZXQgaW4gdGhlIGBzZWNyZXRzLmF3c1NzbSpgIHNldHRpbmdzOyBpZiB5b3VyIGNsdXN0ZXIgaXMgcnVubmluZyBpbiBhIGRpZmZlcmVudCBBV1MgcmVnaW9uLCB5b3UgbWF5IGFsc28gbmVlZCB0byBzZXQgYGNvbmNvdXJzZS53ZWIuYXdzU3NtLnJlZ2lvbmAuCgpUaGUgbWluaW11bSBJQU0gcG9saWN5IHlvdSBuZWVkIHRvIHVzZSBTU00gd2l0aCBDb25jb3Vyc2UgaXM6CgpgYGBqc29uCnsKICAiVmVyc2lvbiI6ICIyMDEyLTEwLTE3IiwKICAiU3RhdGVtZW50IjogWwogICAgewogICAgICAiQWN0aW9uIjogImttczpEZWNyeXB0IiwKICAgICAgIlJlc291cmNlIjogIjxrbXMta2V5LWFybj4iLAogICAgICAiRWZmZWN0IjogIkFsbG93IgogICAgfSwKICAgIHsKICAgICAgIkFjdGlvbiI6ICJzc206R2V0UGFyYW1ldGVyKiIsCiAgICAgICJSZXNvdXJjZSI6ICI8Li4uYXJuLi4uPjpwYXJhbWV0ZXIvY29uY291cnNlLyoiLAogICAgICAiRWZmZWN0IjogIkFsbG93IgogICAgfQogIF0KfQpgYGAKCldoZXJlIGA8a21zLWtleS1hcm4+YCBpcyB0aGUgQVJOIG9mIHRoZSBLTVMga2V5IHVzZWQgdG8gZW5jcnlwdCB0aGUgc2VjcmV0cyBpbiBQYXJhbWV0ZXIgU3RvcmUsIGFuZCB0aGUgYDwuLi5hcm4uLi4+YCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCBhIGNvcnJlY3QgQVJOIGZvciB5b3VyIGFjY291bnQgYW5kIHJlZ2lvbidzIFBhcmFtZXRlciBTdG9yZS4KCiMjIyMgQVdTIFNlY3JldHMgTWFuYWdlcgoKVG8gdXNlIFNlY3JldHMgTWFuYWdlciwgc2V0IGBjb25jb3Vyc2Uud2ViLmt1YmVybmV0ZXMuZW5hYmxlZGAgdG8gZmFsc2UsIGFuZCBzZXQgYGNvbmNvdXJzZS53ZWIuYXdzU2VjcmV0c01hbmFnZXIuZW5hYmxlZGAgdG8gdHJ1ZS4KCkZvciBhIGdpdmVuIENvbmNvdXJzZSAqdGVhbSosIGEgcGlwZWxpbmUgbG9va3MgZm9yIHNlY3JldHMgaW4gU2VjcmV0cyBNYW5hZ2VyIHVzaW5nIGVpdGhlciBgL2NvbmNvdXJzZS97dGVhbX0ve3NlY3JldH1gIG9yIGAvY29uY291cnNlL3t0ZWFtfS97cGlwZWxpbmV9L3tzZWNyZXR9YDsgdGhlIHBhdHRlcm5zIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgY29uY291cnNlLndlYi5hd3NTZWNyZXRzTWFuYWdlci50ZWFtU2VjcmV0VGVtcGxhdGVgIGFuZCBgY29uY291cnNlLndlYi5hd3NTZWNyZXRzTWFuYWdlci5waXBlbGluZVNlY3JldFRlbXBsYXRlYCBzZXR0aW5ncy4KCkNvbmNvdXJzZSByZXF1aXJlcyBBV1MgY3JlZGVudGlhbHMgd2hpY2ggYXJlIGFibGUgdG8gcmVhZCBmcm9tIFNlY3JldHMgTWFuYWdlciBmb3IgdGhpcyBmZWF0dXJlIHRvIGZ1bmN0aW9uLiBDcmVkZW50aWFscyBjYW4gYmUgc2V0IGluIHRoZSBgc2VjcmV0cy5hd3NTZWNyZXRzbWFuYWdlcipgIHNldHRpbmdzOyBpZiB5b3VyIGNsdXN0ZXIgaXMgcnVubmluZyBpbiBhIGRpZmZlcmVudCBBV1MgcmVnaW9uLCB5b3UgbWF5IGFsc28gbmVlZCB0byBzZXQgYGNvbmNvdXJzZS53ZWIuYXdzU2VjcmV0c01hbmFnZXIucmVnaW9uYC4KClRoZSBtaW5pbXVtIElBTSBwb2xpY3kgeW91IG5lZWQgdG8gdXNlIFNlY3JldHMgTWFuYWdlciB3aXRoIENvbmNvdXJzZSBpczoKCmBgYGpzb24KewogICJWZXJzaW9uIjogIjIwMTItMTAtMTciLAogICJTdGF0ZW1lbnQiOiBbCiAgICB7CiAgICAgICJTaWQiOiAiQWxsb3dBY2Nlc3NUb1NlY3JldE1hbmFnZXJQYXJhbWV0ZXJzIiwKICAgICAgIkVmZmVjdCI6ICJBbGxvdyIsCiAgICAgICJBY3Rpb24iOiBbCiAgICAgICAgInNlY3JldHNtYW5hZ2VyOkxpc3RTZWNyZXRzIgogICAgICBdLAogICAgICAiUmVzb3VyY2UiOiAiKiIKICAgIH0sCiAgICB7CiAgICAgICJTaWQiOiAiQWxsb3dBY2Nlc3NHZXRTZWNyZXQiLAogICAgICAiRWZmZWN0IjogIkFsbG93IiwKICAgICAgIkFjdGlvbiI6IFsKICAgICAgICAic2VjcmV0c21hbmFnZXI6R2V0U2VjcmV0VmFsdWUiLAogICAgICAgICJzZWNyZXRzbWFuYWdlcjpEZXNjcmliZVNlY3JldCIKICAgICAgXSwKICAgICAgIlJlc291cmNlIjogWwogICAgICAgICJhcm46YXdzOnNlY3JldHNtYW5hZ2VyOjo6c2VjcmV0Oi9jb25jb3Vyc2UvKiIKICAgICAgXQogICAgfQogIF0KfQpgYGAK"
        },
        {
          "filePath": "more-config.yaml",
          "fileContents": "d2ViOgogIGFkZGl0aW9uYWxWb2x1bWVzOgogIC0gbmFtZTogdGVhbS1hdXRob3JpemVkLWtleXMKICAgIGNvbmZpZ01hcDoKICAgICAgbmFtZTogaHVzaC1ob3VzZS10ZWFtLWF1dGhvcml6ZWQta2V5cwogIGFkZGl0aW9uYWxWb2x1bWVNb3VudHM6CiAgLSBuYW1lOiB0ZWFtLWF1dGhvcml6ZWQta2V5cwogICAgbW91bnRQYXRoOiAvdGVhbS1hdXRob3JpemVkLWtleXMvCg=="
        },
        {
          "filePath": "requirements.lock",
          "fileContents": "ZGVwZW5kZW5jaWVzOgotIG5hbWU6IHBvc3RncmVzcWwKICByZXBvc2l0b3J5OiBodHRwczovL2t1YmVybmV0ZXMtY2hhcnRzLnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vCiAgdmVyc2lvbjogMC4xMy4xCmRpZ2VzdDogc2hhMjU2OjY1ZDM1ODg3OGU0OTZhYjFiNTE3MjFhNzZlMmFmNWI3ZmQzZTZiYjc2MzBiMWQ0MDJhZjY3YTE3YmY3ODJiYjQKZ2VuZXJhdGVkOiAyMDE4LTA1LTMxVDE2OjExOjQwLjY1NTc5NDA4OCswMTowMAo="
        },
        {
          "filePath": "requirements.yaml",
          "fileContents": "ZGVwZW5kZW5jaWVzOgotIG5hbWU6IHBvc3RncmVzcWwKICB2ZXJzaW9uOiAwLjEzLjEKICByZXBvc2l0b3J5OiBodHRwczovL2t1YmVybmV0ZXMtY2hhcnRzLnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vCiAgY29uZGl0aW9uOiBwb3N0Z3Jlc3FsLmVuYWJsZWQK"
        },
        {
          "filePath": "templates/NOTES.txt",
          "fileContents": "CiogQ29uY291cnNlIGNhbiBiZSBhY2Nlc3NlZDoKCiAgKiBXaXRoaW4geW91ciBjbHVzdGVyLCBhdCB0aGUgZm9sbG93aW5nIEROUyBuYW1lIGF0IHBvcnQge3sgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLmJpbmRQb3J0IH19OgoKICAgIHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAuIH19Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMuY2x1c3Rlci5sb2NhbAoKICB7ey0gaWYgLlZhbHVlcy53ZWIuaW5ncmVzcy5lbmFibGVkIH19CgogICogRnJvbSBvdXRzaWRlIHRoZSBjbHVzdGVyLCB0aGUgVVJMKHMpIGFyZToKICAgIHt7IHJhbmdlIC5WYWx1ZXMud2ViLmluZ3Jlc3MuaG9zdHMgfX0KICAgIGh0dHA6Ly97eyAuIH19CiAgICB7ey0gZW5kIH19CiAge3stIGVsc2UgfX0KCiAgKiBGcm9tIG91dHNpZGUgdGhlIGNsdXN0ZXIsIHJ1biB0aGVzZSBjb21tYW5kcyBpbiB0aGUgc2FtZSBzaGVsbDoKICAgIHt7LSBpZiBjb250YWlucyAiTm9kZVBvcnQiIC5WYWx1ZXMud2ViLnNlcnZpY2UudHlwZSB9fQoKICAgIGV4cG9ydCBOT0RFX1BPUlQ9JChrdWJlY3RsIGdldCAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gLW8ganNvbnBhdGg9Insuc3BlYy5wb3J0c1swXS5ub2RlUG9ydH0iIHNlcnZpY2VzIHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAuIH19KQogICAgZXhwb3J0IE5PREVfSVA9JChrdWJlY3RsIGdldCBub2RlcyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gLW8ganNvbnBhdGg9InsuaXRlbXNbMF0uc3RhdHVzLmFkZHJlc3Nlc1swXS5hZGRyZXNzfSIpCiAgICBlY2hvIGh0dHA6Ly8kTk9ERV9JUDokTk9ERV9QT1JUCiAgICB7ey0gZWxzZSBpZiBjb250YWlucyAiTG9hZEJhbGFuY2VyIiAuVmFsdWVzLndlYi5zZXJ2aWNlLnR5cGUgfX0KCiAgICAgTk9URTogSXQgbWF5IHRha2UgYSBmZXcgbWludXRlcyBmb3IgdGhlIExvYWRCYWxhbmNlciBJUCB0byBiZSBhdmFpbGFibGUuCiAgICAgICAgICAgWW91IGNhbiB3YXRjaCB0aGUgc3RhdHVzIG9mIGJ5IHJ1bm5pbmcgJ2t1YmVjdGwgZ2V0IHN2YyAtdyB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndlYi5mdWxsbmFtZSIgLiB9fScKCiAgICBleHBvcnQgU0VSVklDRV9JUD0kKGt1YmVjdGwgZ2V0IHN2YyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0ge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiIC4gfX0gLW8ganNvbnBhdGg9J3suc3RhdHVzLmxvYWRCYWxhbmNlci5pbmdyZXNzWzBdLmlwfScpCiAgICBlY2hvIGh0dHA6Ly8kU0VSVklDRV9JUDp7eyAuVmFsdWVzLmNvbmNvdXJzZS53ZWIuYmluZFBvcnQgfX0KICAgIHt7LSBlbHNlIGlmIGNvbnRhaW5zICJDbHVzdGVySVAiICAuVmFsdWVzLndlYi5zZXJ2aWNlLnR5cGUgfX0KCiAgICBleHBvcnQgUE9EX05BTUU9JChrdWJlY3RsIGdldCBwb2RzIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSAtbCAiYXBwPXt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAuIH19IiAtbyBqc29ucGF0aD0iey5pdGVtc1swXS5tZXRhZGF0YS5uYW1lfSIpCiAgICBlY2hvICJWaXNpdCBodHRwOi8vMTI3LjAuMC4xOjgwODAgdG8gdXNlIENvbmNvdXJzZSIKICAgIGt1YmVjdGwgcG9ydC1mb3J3YXJkIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSAkUE9EX05BTUUgODA4MDp7eyAuVmFsdWVzLmNvbmNvdXJzZS53ZWIuYmluZFBvcnQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiogSWYgdGhpcyBpcyB5b3VyIGZpcnN0IHRpbWUgdXNpbmcgQ29uY291cnNlLCBmb2xsb3cgdGhlIHR1dG9yaWFscyBhdCBodHRwczovL2NvbmNvdXJzZS1jaS5vcmcvdHV0b3JpYWxzLmh0bWwKCnt7LSBpZiBjb250YWlucyAibmFpdmUiIC5WYWx1ZXMuY29uY291cnNlLndvcmtlci5iYWdnYWdlY2xhaW0uZHJpdmVyIH19CgoqKioqKioqKioqKioqKioqKioqCioqKioqKldBUk5JTkcqKioqKioKKioqKioqKioqKioqKioqKioqKgoKWW91IGFyZSB1c2luZyB0aGUgIm5haXZlIiBiYWdnYWdlIGNsYWltIGRyaXZlciwgd2hpY2ggaXMgYWxzbyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBjaGFydC4gCgpUaGlzIGlzIHRoZSBkZWZhdWx0IGZvciBjb21wYXRpYmlsaXR5IHJlYXNvbnMsIGJ1dCBpcyB2ZXJ5IHNwYWNlIGluZWZmaWNpZW50LCBhbmQgc2hvdWxkIGJlIGNoYW5nZWQgdG8gZWl0aGVyICJidHJmcyIgKHJlY29tbWVuZGVkKSBvciAib3ZlcmxheSIgZGVwZW5kaW5nIG9uIHRoYXQgZmlsZXN5c3RlbSdzIHN1cHBvcnQgaW4gdGhlIExpbnV4IGtlcm5lbCB5b3VyIGNsdXN0ZXIgaXMgdXNpbmcuIAoKUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY29uY291cnNlL2NvbmNvdXJzZS9pc3N1ZXMvMTIzMCBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2NvbmNvdXJzZS9jb25jb3Vyc2UvaXNzdWVzLzE5NjYgZm9yIGJhY2tncm91bmQuCgp7ey0gZW5kIH19CgoKCnt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIubG9jYWxBdXRoLmVuYWJsZWQgfX0Ke3stIGlmIGNvbnRhaW5zICJ0ZXN0OnRlc3QiIC5WYWx1ZXMuc2VjcmV0cy5sb2NhbFVzZXJzIH19CgoqKioqKioqKioqKioqKioqKioqCioqKioqKldBUk5JTkcqKioqKioKKioqKioqKioqKioqKioqKioqKgoKWW91J3JlIHVzaW5nIHRoZSBkZWZhdWx0ICJ0ZXN0IiB1c2VyIHdpdGggdGhlIGRlZmF1bHQgInRlc3QiIHBhc3N3b3JkLgoKTWFrZSBzdXJlIHlvdSBlaXRoZXIgZGlzYWJsZSBsb2NhbCBhdXRoIG9yIGNoYW5nZSB0aGUgY29tYmluYXRpb24gdG8gc29tZXRoaW5nIG1vcmUgc2VjdXJlLCBwcmVmZXJhYmx5IHNwZWNpZnlpbmcgYSBwYXNzd29yZCBpbiB0aGUgYmNyeXB0ZWQgZm9ybS4KClBsZWFzZSBzZWUgYFJFQURNRS5tZGAgZm9yIGV4YW1wbGVzLgoKe3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiY29uY291cnNlLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGNvbmNvdXJzZSBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJjb25jb3Vyc2UuY29uY291cnNlLmZ1bGxuYW1lIiAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LSBkZWZpbmUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAid2ViIiAuVmFsdWVzLndlYi5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LSBkZWZpbmUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAid29ya2VyIiAuVmFsdWVzLndvcmtlci5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgcG9zdGdyZXNxbCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJjb25jb3Vyc2UucG9zdGdyZXNxbC5mdWxsbmFtZSIgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0ICJwb3N0Z3Jlc3FsIiAuVmFsdWVzLnBvc3RncmVzcWwubmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey0gZGVmaW5lICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiAtfX0Ke3stIGlmIC5pcyB9fQp7ey0gcmVxdWlyZWQgKHByaW50ZiAic2VjcmV0cy4lcyBpcyByZXF1aXJlZCBiZWNhdXNlIHNlY3JldHMuY3JlYXRlIGlzIHRydWUgYW5kICVzIGlzIHRydWUiIC5rZXkgLmlzKSAoaW5kZXggLnJvb3QuVmFsdWVzLnNlY3JldHMgLmtleSApIHwgYjY0ZW5jIHwgcXVvdGUgfX0Ke3stIGVsc2UgLX19Cnt7LSByZXF1aXJlZCAocHJpbnRmICJzZWNyZXRzLiVzIGlzIHJlcXVpcmVkIGJlY2F1c2Ugc2VjcmV0cy5jcmVhdGUgaXMgdHJ1ZSBhbmQgJXMgaXNuJ3QgdHJ1ZSIgLmtleSAuaXNudCkgKGluZGV4IC5yb290LlZhbHVlcy5zZWNyZXRzIC5rZXkgKSB8IGI2NGVuYyB8IHF1b3RlIH19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey0gZGVmaW5lICJjb25jb3Vyc2UubmFtZXNwYWNlUHJlZml4IiAtfX0Ke3stIGRlZmF1bHQgKHByaW50ZiAiJXMtIiAuUmVsZWFzZS5OYW1lICkgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLmt1YmVybmV0ZXMubmFtZXNwYWNlUHJlZml4IC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/namespace.yaml",
          "fileContents": "e3stIGlmIGFuZCAuVmFsdWVzLmNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy5lbmFibGVkIC5WYWx1ZXMuY29uY291cnNlLndlYi5rdWJlcm5ldGVzLmNyZWF0ZVRlYW1OYW1lc3BhY2VzIC19fQp7ey0gcmFuZ2UgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLmt1YmVybmV0ZXMudGVhbXMgfX0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IE5hbWVzcGFjZQptZXRhZGF0YToKe3stIGlmICQuVmFsdWVzLmNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy5rZWVwTmFtZXNwYWNlcyB9fQogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvcmVzb3VyY2UtcG9saWN5Ijoga2VlcAp7ey0gZW5kIH19CiAgbmFtZToge3sgdGVtcGxhdGUgImNvbmNvdXJzZS5uYW1lc3BhY2VQcmVmaXgiICQgfX17eyAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLmNvbmNvdXJzZS5mdWxsbmFtZSIgJCB9fQogICAgY2hhcnQ6ICJ7eyAkLkNoYXJ0Lk5hbWUgfX0te3sgJC5DaGFydC5WZXJzaW9uIH19IgogICAgcmVsZWFzZTogInt7ICQuUmVsZWFzZS5OYW1lIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAkLlJlbGVhc2UuU2VydmljZSB9fSIKe3stIGVuZCB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/secrets.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuc2VjcmV0cy5jcmVhdGUgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2UuY29uY291cnNlLmZ1bGxuYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLmNvbmNvdXJzZS5mdWxsbmFtZSIgLiB9fQogICAgY2hhcnQ6ICJ7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fSIKICAgIHJlbGVhc2U6ICJ7eyAuUmVsZWFzZS5OYW1lIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19Igp0eXBlOiBPcGFxdWUKZGF0YToKICBob3N0LWtleToge3sgLlZhbHVlcy5zZWNyZXRzLmhvc3RLZXkgfCBiNjRlbmMgfCBxdW90ZSB9fQogIGhvc3Qta2V5LXB1Yjoge3sgLlZhbHVlcy5zZWNyZXRzLmhvc3RLZXlQdWIgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHNlc3Npb24tc2lnbmluZy1rZXk6IHt7IC5WYWx1ZXMuc2VjcmV0cy5zZXNzaW9uU2lnbmluZ0tleSB8IGI2NGVuYyB8IHF1b3RlIH19CiAgd29ya2VyLWtleToge3sgLlZhbHVlcy5zZWNyZXRzLndvcmtlcktleSB8IGI2NGVuYyB8IHF1b3RlIH19CiAgd29ya2VyLWtleS1wdWI6IHt7IC5WYWx1ZXMuc2VjcmV0cy53b3JrZXJLZXlQdWIgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7LSBpZiBub3QgLlZhbHVlcy5wb3N0Z3Jlc3FsLmVuYWJsZWQgfX0KICBwb3N0Z3Jlc3FsLXVzZXI6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJwb3N0Z3Jlc1VzZXIiICJpc250IiAicG9zdGdyZXNxbC5lbmFibGVkIiAicm9vdCIgLiB9fQogIHBvc3RncmVzcWwtcGFzc3dvcmQ6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJwb3N0Z3Jlc1Bhc3N3b3JkIiAiaXNudCIgInBvc3RncmVzcWwuZW5hYmxlZCIgInJvb3QiIC4gfX0KICBwb3N0Z3Jlc3FsLWNhLWNlcnQ6IHt7IGRlZmF1bHQgIiIgLlZhbHVlcy5zZWNyZXRzLnBvc3RncmVzQ2FDZXJ0IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICBwb3N0Z3Jlc3FsLWNsaWVudC1jZXJ0OiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy5wb3N0Z3Jlc0NsaWVudENlcnQgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHBvc3RncmVzcWwtY2xpZW50LWtleToge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMucG9zdGdyZXNDbGllbnRLZXkgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLmVuY3J5cHRpb24uZW5hYmxlZCB9fQogIGVuY3J5cHRpb24ta2V5OiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLnNlY3JldC5yZXF1aXJlZCIgZGljdCAia2V5IiAiZW5jcnlwdGlvbktleSIgImlzIiAiY29uY291cnNlLmVuY3J5cHRpb24uZW5hYmxlZCIgInJvb3QiIC4gfX0KICBvbGQtZW5jcnlwdGlvbi1rZXk6IHt7IGRlZmF1bHQgIiIgLlZhbHVlcy5zZWNyZXRzLm9sZEVuY3J5cHRpb25LZXkgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLmxvY2FsQXV0aC5lbmFibGVkIH19CiAgbG9jYWwtdXNlcnM6IHt7IC5WYWx1ZXMuc2VjcmV0cy5sb2NhbFVzZXJzIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5hdXRoLmNmLmVuYWJsZWQgfX0KICBjZi1jbGllbnQtaWQ6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJjZkNsaWVudElkIiAiaXMiICJjb25jb3Vyc2Uud2ViLmF1dGguY2YuZW5hYmxlZCIgInJvb3QiIC4gfX0KICBjZi1jbGllbnQtc2VjcmV0OiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLnNlY3JldC5yZXF1aXJlZCIgZGljdCAia2V5IiAiY2ZDbGllbnRTZWNyZXQiICJpcyIgImNvbmNvdXJzZS53ZWIuYXV0aC5jZi5lbmFibGVkIiAicm9vdCIgLiB9fQogIGNmLWNhLWNlcnQ6IHt7IGRlZmF1bHQgIiIgLlZhbHVlcy5zZWNyZXRzLmNmQ2FDZXJ0IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5hdXRoLmdpdGh1Yi5lbmFibGVkIH19CiAgZ2l0aHViLWNsaWVudC1pZDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS5zZWNyZXQucmVxdWlyZWQiIGRpY3QgImtleSIgImdpdGh1YkNsaWVudElkIiAiaXMiICJjb25jb3Vyc2Uud2ViLmF1dGguZ2l0aHViLmVuYWJsZWQiICJyb290IiAuIH19CiAgZ2l0aHViLWNsaWVudC1zZWNyZXQ6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJnaXRodWJDbGllbnRTZWNyZXQiICJpcyIgImNvbmNvdXJzZS53ZWIuYXV0aC5naXRodWIuZW5hYmxlZCIgInJvb3QiIC4gfX0KICBnaXRodWItY2EtY2VydDoge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMuZ2l0aHViQ2FDZXJ0IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5hdXRoLmdpdGxhYi5lbmFibGVkIH19CiAgZ2l0bGFiLWNsaWVudC1pZDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS5zZWNyZXQucmVxdWlyZWQiIGRpY3QgImtleSIgImdpdGxhYkNsaWVudElkIiAiaXMiICJjb25jb3Vyc2Uud2ViLmF1dGguZ2l0bGFiLmVuYWJsZWQiICJyb290IiAuIH19CiAgZ2l0bGFiLWNsaWVudC1zZWNyZXQ6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJnaXRsYWJDbGllbnRTZWNyZXQiICJpcyIgImNvbmNvdXJzZS53ZWIuYXV0aC5naXRsYWIuZW5hYmxlZCIgInJvb3QiIC4gfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5hdXRoLmxkYXAuZW5hYmxlZCB9fQogIGxkYXAtY2EtY2VydDoge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMubGRhcENhQ2VydCB8IGI2NGVuYyB8IHF1b3RlIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIuYXV0aC5vYXV0aC5lbmFibGVkIH19CiAgb2F1dGgtY2xpZW50LWlkOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLnNlY3JldC5yZXF1aXJlZCIgZGljdCAia2V5IiAib2F1dGhDbGllbnRJZCIgImlzIiAiY29uY291cnNlLndlYi5hdXRoLm9hdXRoLmVuYWJsZWQiICJyb290IiAuIH19CiAgb2F1dGgtY2xpZW50LXNlY3JldDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS5zZWNyZXQucmVxdWlyZWQiIGRpY3QgImtleSIgIm9hdXRoQ2xpZW50U2VjcmV0IiAiaXMiICJjb25jb3Vyc2Uud2ViLmF1dGgub2F1dGguZW5hYmxlZCIgInJvb3QiIC4gfX0KICBvYXV0aC1jYS1jZXJ0OiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy5vYXV0aENhQ2VydCB8IGI2NGVuYyB8IHF1b3RlIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIuYXV0aC5vaWRjLmVuYWJsZWQgfX0KICBvaWRjLWNsaWVudC1pZDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS5zZWNyZXQucmVxdWlyZWQiIGRpY3QgImtleSIgIm9pZGNDbGllbnRJZCIgImlzIiAiY29uY291cnNlLndlYi5hdXRoLm9pZGMuZW5hYmxlZCIgInJvb3QiIC4gfX0KICBvaWRjLWNsaWVudC1zZWNyZXQ6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJvaWRjQ2xpZW50U2VjcmV0IiAiaXMiICJjb25jb3Vyc2Uud2ViLmF1dGgub2lkYy5lbmFibGVkIiAicm9vdCIgLiB9fQogIG9pZGMtY2EtY2VydDoge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMub2lkY0NhQ2VydCB8IGI2NGVuYyB8IHF1b3RlIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIudGxzLmVuYWJsZWQgfX0KICB3ZWItdGxzLWNlcnQ6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uuc2VjcmV0LnJlcXVpcmVkIiBkaWN0ICJrZXkiICJ3ZWJUbHNDZXJ0IiAiaXMiICJjb25jb3Vyc2Uud2ViLnRscy5lbmFibGVkIiAicm9vdCIgLiB9fQogIHdlYi10bHMta2V5OiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLnNlY3JldC5yZXF1aXJlZCIgZGljdCAia2V5IiAid2ViVGxzS2V5IiAiaXMiICJjb25jb3Vyc2Uud2ViLnRscy5lbmFibGVkIiAicm9vdCIgLiB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLnZhdWx0LmVuYWJsZWQgfX0KICB2YXVsdC1jYS1jZXJ0OiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy52YXVsdENhQ2VydCB8IGI2NGVuYyB8IHF1b3RlIH19CiAgdmF1bHQtY2xpZW50LXRva2VuOiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy52YXVsdENsaWVudFRva2VuIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB2YXVsdC1jbGllbnQtY2VydDoge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMudmF1bHRDbGllbnRDZXJ0IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB2YXVsdC1jbGllbnQta2V5OiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy52YXVsdENsaWVudEtleSB8IGI2NGVuYyB8IHF1b3RlIH19CiAgdmF1bHQtY2xpZW50LWF1dGgtcGFyYW06IHt7IGRlZmF1bHQgIiIgLlZhbHVlcy5zZWNyZXRzLnZhdWx0QXV0aFBhcmFtIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5hd3NTc20uZW5hYmxlZCB9fQogIGF3cy1zc20tYWNjZXNzLWtleToge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMuYXdzU3NtQWNjZXNzS2V5IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICBhd3Mtc3NtLXNlY3JldC1rZXk6IHt7IGRlZmF1bHQgIiIgLlZhbHVlcy5zZWNyZXRzLmF3c1NzbVNlY3JldEtleSB8IGI2NGVuYyB8IHF1b3RlIH19CiAge3stIGlmIC5WYWx1ZXMuc2VjcmV0cy5hd3NTc21TZXNzaW9uVG9rZW4gfX0KICBhd3Mtc3NtLXNlc3Npb24tdG9rZW46IHt7IC5WYWx1ZXMuc2VjcmV0cy5hd3NTc21TZXNzaW9uVG9rZW4gfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5hd3NTZWNyZXRzTWFuYWdlci5lbmFibGVkIH19CiAgYXdzLXNlY3JldHNtYW5hZ2VyLWFjY2Vzcy1rZXk6IHt7IGRlZmF1bHQgIiIgLlZhbHVlcy5zZWNyZXRzLmF3c1NlY3JldHNtYW5hZ2VyQWNjZXNzS2V5IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICBhd3Mtc2VjcmV0c21hbmFnZXItc2VjcmV0LWtleToge3sgZGVmYXVsdCAiIiAuVmFsdWVzLnNlY3JldHMuYXdzU2VjcmV0c21hbmFnZXJTZWNyZXRLZXkgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7LSBpZiAuVmFsdWVzLnNlY3JldHMuYXdzU2VjcmV0c21hbmFnZXJTZXNzaW9uVG9rZW4gfX0KICBhd3Mtc2VjcmV0c21hbmFnZXItc2Vzc2lvbi10b2tlbjoge3sgLlZhbHVlcy5zZWNyZXRzLmF3c1NlY3JldHNtYW5hZ2VyU2Vzc2lvblRva2VuIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIuaW5mbHV4ZGIuZW5hYmxlZCB9fQogIGluZmx1eGRiLXBhc3N3b3JkOiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy5pbmZsdXhkYlBhc3N3b3JkIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi5zeXNsb2cuZW5hYmxlZCB9fQogIHN5c2xvZy1jYS1jZXJ0OiB7eyBkZWZhdWx0ICIiIC5WYWx1ZXMuc2VjcmV0cy5zeXNsb2dDYUNlcnQgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "templates/web-deployment.yaml",
          "fileContents": ""
        },
        {
          "filePath": "templates/web-ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMud2ViLmluZ3Jlc3MuZW5hYmxlZCAtfX0Ke3stICRyZWxlYXNlTmFtZSA6PSAuUmVsZWFzZS5OYW1lIC19fQp7ey0gJHNlcnZpY2VOYW1lIDo9IGRlZmF1bHQgIndlYiIgLlZhbHVlcy53ZWIubmFtZU92ZXJyaWRlIC19fQp7ey0gJHNlcnZpY2VQb3J0IDo9IC5WYWx1ZXMuY29uY291cnNlLndlYi5iaW5kUG9ydCAtfX0KYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IEluZ3Jlc3MKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAuIH19CiAgICBjaGFydDogInt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19IgogICAgcmVsZWFzZTogInt7IC5SZWxlYXNlLk5hbWUgfX0iCiAgICBoZXJpdGFnZTogInt7IC5SZWxlYXNlLlNlcnZpY2UgfX0iCiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMud2ViLmluZ3Jlc3MuYW5ub3RhdGlvbnMgfX0KICAgIHt7ICRrZXkgfX06IHt7ICR2YWx1ZSB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgcnVsZXM6CiAgICB7ey0gcmFuZ2UgLlZhbHVlcy53ZWIuaW5ncmVzcy5ob3N0cyB9fQogICAgLSBob3N0OiB7eyAuIH19CiAgICAgIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHt7IHByaW50ZiAiJXMtJXMiICRyZWxlYXNlTmFtZSAkc2VydmljZU5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIH19CiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IHt7ICRzZXJ2aWNlUG9ydCB9fQogICAge3stIGVuZCAtfX0KICB7ey0gaWYgLlZhbHVlcy53ZWIuaW5ncmVzcy50bHMgfX0KICB0bHM6Cnt7IHRvWWFtbCAuVmFsdWVzLndlYi5pbmdyZXNzLnRscyB8IGluZGVudCA0IH19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "templates/web-role.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19Cnt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy5lbmFibGVkIC19fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3t7IC5WYWx1ZXMucmJhYy5hcGlWZXJzaW9uIH19CmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndlYi5mdWxsbmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VjcmV0cyJdCiAgdmVyYnM6IFsiZ2V0Il0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "templates/web-rolebinding.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19Cnt7LSBpZiAuVmFsdWVzLmNvbmNvdXJzZS53ZWIua3ViZXJuZXRlcy5lbmFibGVkIC19fQp7ey0gcmFuZ2UgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLmt1YmVybmV0ZXMudGVhbXMgfX0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8ve3sgJC5WYWx1ZXMucmJhYy5hcGlWZXJzaW9uIH19CmtpbmQ6IFJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAkIH19LXt7IC4gfX0KICBuYW1lc3BhY2U6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2UubmFtZXNwYWNlUHJlZml4IiAkIH19e3sgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiICQgfX0KICAgIGNoYXJ0OiB7eyAkLkNoYXJ0Lk5hbWUgfX0te3sgJC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgJC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7ICQuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAkIH19CnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiICQgfX0KICBuYW1lc3BhY2U6IHt7ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/web-serviceaccount.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud2ViLmZ1bGxuYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndlYi5mdWxsbmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/web-svc.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndlYi5mdWxsbmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiIC4gfX0KICAgIGNoYXJ0OiAie3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0iCiAgICByZWxlYXNlOiAie3sgLlJlbGVhc2UuTmFtZSB9fSIKICAgIGhlcml0YWdlOiAie3sgLlJlbGVhc2UuU2VydmljZSB9fSIKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy53ZWIuc2VydmljZS5sYWJlbHMgfX0KICAgIHt7ICRrZXkgfX06IHt7ICR2YWx1ZSB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMud2ViLnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICAgIHt7ICRrZXkgfX06IHt7ICR2YWx1ZSB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLnByb21ldGhldXMuZW5hYmxlZCB9fQogICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogICAgcHJvbWV0aGV1cy5pby9wb3J0OiB7eyAuVmFsdWVzLmNvbmNvdXJzZS53ZWIucHJvbWV0aGV1cy5iaW5kUG9ydCB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgdHlwZToge3sgLlZhbHVlcy53ZWIuc2VydmljZS50eXBlIH19CiAge3sgaWYgLlZhbHVlcy53ZWIuc2VydmljZS5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXMgfX0KICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6CiAgICB7ey0gcmFuZ2UgLlZhbHVlcy53ZWIuc2VydmljZS5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXMgfX0KICAgIC0ge3sgLiB9fQogICAge3stIGVuZCB9fQogIHt7IGVuZCB9fQogIHt7IGlmIGFuZCAoZXEgIkxvYWRCYWxhbmNlciIgLlZhbHVlcy53ZWIuc2VydmljZS50eXBlKSAuVmFsdWVzLndlYi5zZXJ2aWNlLmxvYWRCYWxhbmNlcklQIH19CiAgbG9hZEJhbGFuY2VySVA6IHt7IC5WYWx1ZXMud2ViLnNlcnZpY2UubG9hZEJhbGFuY2VySVAgfX0KICB7eyBlbmQgfX0KICBwb3J0czoKICAgIC0gbmFtZTogYXRjCiAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuY29uY291cnNlLndlYi5iaW5kUG9ydCB9fQogICAgICB0YXJnZXRQb3J0OiBhdGMKICAgICAge3sgaWYgYW5kIChlcSAiTm9kZVBvcnQiIC5WYWx1ZXMud2ViLnNlcnZpY2UudHlwZSkgLlZhbHVlcy53ZWIuc2VydmljZS5hdGNOb2RlUG9ydCB9fQogICAgICBub2RlUG9ydDoge3sgLlZhbHVlcy53ZWIuc2VydmljZS5hdGNOb2RlUG9ydH19CiAgICAgIHt7IGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29uY291cnNlLndlYi50bHMuZW5hYmxlZCB9fQogICAgLSBuYW1lOiBhdGMtdGxzCiAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuY29uY291cnNlLndlYi50bHMuYmluZFBvcnQgfX0KICAgICAgdGFyZ2V0UG9ydDogYXRjLXRscwogICAgICB7eyBpZiBhbmQgKGVxICJOb2RlUG9ydCIgLlZhbHVlcy53ZWIuc2VydmljZS50eXBlKSAuVmFsdWVzLndlYi5zZXJ2aWNlLmF0Y1Rsc05vZGVQb3J0IH19CiAgICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLndlYi5zZXJ2aWNlLmF0Y1Rsc05vZGVQb3J0fX0KICAgICAge3sgZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICAtIG5hbWU6IHRzYQogICAgICBwb3J0OiB7eyAuVmFsdWVzLmNvbmNvdXJzZS53ZWIudHNhLmJpbmRQb3J0IH19CiAgICAgIHRhcmdldFBvcnQ6IHRzYQogICAgICB7eyBpZiBhbmQgKGVxICJOb2RlUG9ydCIgLlZhbHVlcy53ZWIuc2VydmljZS50eXBlKSAuVmFsdWVzLndlYi5zZXJ2aWNlLnRzYU5vZGVQb3J0IH19CiAgICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLndlYi5zZXJ2aWNlLnRzYU5vZGVQb3J0fX0KICAgICAge3sgZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5jb25jb3Vyc2Uud2ViLnByb21ldGhldXMuZW5hYmxlZCB9fQogICAgLSBuYW1lOiBwcm9tZXRoZXVzCiAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuY29uY291cnNlLndlYi5wcm9tZXRoZXVzLmJpbmRQb3J0IH19CiAgICAgIHRhcmdldFBvcnQ6IHByb21ldGhldXMKICAgIHt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53ZWIuZnVsbG5hbWUiIC4gfX0K"
        },
        {
          "filePath": "templates/worker-policy.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndvcmtlci5mdWxsbmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC4gfX0KICAgIGNoYXJ0OiAie3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0iCiAgICByZWxlYXNlOiAie3sgLlJlbGVhc2UuTmFtZSB9fSIKICAgIGhlcml0YWdlOiAie3sgLlJlbGVhc2UuU2VydmljZSB9fSIKc3BlYzoKICBtaW5BdmFpbGFibGU6IHt7IC5WYWx1ZXMud29ya2VyLm1pbkF2YWlsYWJsZSB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC4gfX0K"
        },
        {
          "filePath": "templates/worker-role.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8ve3sgLlZhbHVlcy5yYmFjLmFwaVZlcnNpb24gfX0Ka2luZDogUm9sZQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndvcmtlci5mdWxsbmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gZXh0ZW5zaW9ucwogIHJlc291cmNlczoKICAtIHBvZHNlY3VyaXR5cG9saWNpZXMKICByZXNvdXJjZU5hbWVzOgogIC0gcHJpdmlsZWdlZAogIHZlcmJzOgogIC0gdXNlCnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/worker-rolebinding.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8ve3sgLlZhbHVlcy5yYmFjLmFwaVZlcnNpb24gfX0Ka2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud29ya2VyLmZ1bGxuYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZToge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC4gfX0Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndvcmtlci5mdWxsbmFtZSIgLiB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/worker-serviceaccount.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud29ya2VyLmZ1bGxuYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndvcmtlci5mdWxsbmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/worker-statefulset.yaml",
          "fileContents": ""
        },
        {
          "filePath": "templates/worker-svc.yaml",
          "fileContents": "IyMgQSBIZWFkbGVzcyBTZXJ2aWNlIGlzIHJlcXVpcmVkIHdoZW4gdXNpbmcgYSBTdGF0ZWZ1bFNldAojIyByZWY6IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL3R1dG9yaWFscy9zdGF0ZWZ1bC1hcHBsaWNhdGlvbi9iYXNpYy1zdGF0ZWZ1bC1zZXQvCiMjCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImNvbmNvdXJzZS53b3JrZXIuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJjb25jb3Vyc2Uud29ya2VyLmZ1bGxuYW1lIiAuIH19CiAgICBjaGFydDogInt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19IgogICAgcmVsZWFzZTogInt7IC5SZWxlYXNlLk5hbWUgfX0iCiAgICBoZXJpdGFnZTogInt7IC5SZWxlYXNlLlNlcnZpY2UgfX0iCnNwZWM6CiAgdHlwZTogQ2x1c3RlcklQCiAgY2x1c3RlcklQOiBOb25lCiAgIyMgV2UgZG8gTk9UIGV4cG9zZSBhbnkgcG9ydCBhcyB3b3JrZXJzIHdpbGwgZm9yd2FyZCBjb25uZWN0aW9ucyB3aXRoIHRoZSBBVEMgdGhyb3VnaCBhIFRTQSByZXZlcnNlLXR1bm5lbAogICMjIHJlZjogaHR0cHM6Ly9jb25jb3Vyc2UtY2kub3JnL2FyY2hpdGVjdHVyZS5odG1sI2FyY2hpdGVjdHVyZS13b3JrZXIKICAjIwogIHBvcnRzOiBbXQogIHNlbGVjdG9yOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uY291cnNlLndvcmtlci5mdWxsbmFtZSIgLiB9fQo="
        },
        {
          "filePath": "values.yaml",
          "fileContents": ""
        }
      ]
    },
    "contentSHA": "99183db72b179080361aae192a23e926cf0fca14d098c2ce4227d01c843fcec6"
  }
}