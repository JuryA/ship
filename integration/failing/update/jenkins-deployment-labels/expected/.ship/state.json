{
  "v1": {
    "config": {},
    "helmValues": "Master:\n  Name: jenkins-master\n  Image: jenkins/jenkins\n  ImageTag: lts\n  ImagePullPolicy: Always\n  Component: jenkins-master\n  UseSecurity: true\n  HostNetworking: false\n  AdminUser: admin\n  resources:\n    requests:\n      cpu: 50m\n      memory: 256Mi\n    limits:\n      cpu: 2000m\n      memory: 2048Mi\n  UsePodSecurityContext: true\n  ServicePort: 8080\n  ServiceType: LoadBalancer\n  ServiceAnnotations: {}\n  HealthProbes: true\n  HealthProbesLivenessTimeout: 90\n  HealthProbesReadinessTimeout: 60\n  HealthProbeLivenessFailureThreshold: 12\n  SlaveListenerPort: 50000\n  DisabledAgentProtocols:\n  - JNLP-connect\n  - JNLP2-connect\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  CLI: false\n  SlaveListenerServiceType: ClusterIP\n  SlaveListenerServiceAnnotations: {}\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  ExtraPorts: null\n  InstallPlugins:\n  - kubernetes:1.12.4\n  - workflow-job:2.24\n  - workflow-aggregator:2.5\n  - credentials-binding:1.16\n  - git:3.9.1\n  InitScripts: null\n  CustomConfigMap: {}\n  OverwriteConfig: false\n  NodeSelector: {}\n  Tolerations: {}\n  PodAnnotations: {}\n  Ingress:\n    ApiVersion: extensions/v1beta1\n    Annotations: {}\n    TLS: null\n  AdminPassword: secret\nAgent:\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.10-1\n  CustomJenkinsLabels: []\n  Component: jenkins-slave\n  Privileged: false\n  resources:\n    requests:\n      cpu: 200m\n      memory: 256Mi\n    limits:\n      cpu: 200m\n      memory: 256Mi\n  AlwaysPullImage: false\n  PodRetention: Never\n  volumes: null\n  NodeSelector: {}\nPersistence:\n  Enabled: true\n  Annotations: {}\n  AccessMode: ReadWriteOnce\n  Size: 8Gi\n  volumes: null\n  mounts: null\nNetworkPolicy:\n  Enabled: false\n  ApiVersion: extensions/v1beta1\nrbac:\n  install: false\n  serviceAccountName: default\n  roleRef: cluster-admin\n  roleBindingKind: ClusterRoleBinding\n",
    "releaseName": "jenkins",
    "helmValuesDefaults": "# Default values for jenkins.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\nMaster:\n  Name: jenkins-master\n  Image: \"jenkins/jenkins\"\n  ImageTag: \"lts\"\n  ImagePullPolicy: \"Always\"\n# ImagePullSecret: jenkins\n  Component: \"jenkins-master\"\n  UseSecurity: true\n  HostNetworking: false\n  AdminUser: admin\n  # AdminPassword: \u003cdefaults to random\u003e\n  resources:\n    requests:\n      cpu: \"50m\"\n      memory: \"256Mi\"\n    limits:\n      cpu: \"2000m\"\n      memory: \"2048Mi\"\n  # Environment variables that get added to the init container (useful for e.g. http_proxy)\n  # InitContainerEnv:\n  #   - name: http_proxy\n  #     value: \"http://192.168.64.1:3128\"\n  # ContainerEnv:\n  #   - name: http_proxy\n  #     value: \"http://192.168.64.1:3128\"\n  # Set min/max heap here if needed with:\n  # JavaOpts: \"-Xms512m -Xmx512m\"\n  # JenkinsOpts: \"\"\n  # JenkinsUriPrefix: \"/jenkins\"\n  # Enable pod security context (must be `true` if RunAsUser or FsGroup are set)\n  UsePodSecurityContext: true\n  # Set RunAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.\n  # When setting RunAsUser to a different value than 0 also set FsGroup to the same value:\n  # RunAsUser: \u003cdefaults to 0\u003e\n  # FsGroup: \u003cwill be omitted in deployment if RunAsUser is 0\u003e\n  ServicePort: 8080\n  # For minikube, set this to NodePort, elsewhere use LoadBalancer\n  # Use ClusterIP if your setup includes ingress controller\n  ServiceType: LoadBalancer\n  # Master Service annotations\n  ServiceAnnotations: {}\n  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https\n  # Used to create Ingress record (should used with ServiceType: ClusterIP)\n  # HostName: jenkins.cluster.local\n  # NodePort: \u003cto set explicitly, choose port between 30000-32767\n  # Enable Kubernetes Liveness and Readiness Probes\n  # ~ 2 minutes to allow Jenkins to restart when upgrading plugins. Set ReadinessTimeout to be shorter than LivenessTimeout.\n  HealthProbes: true\n  HealthProbesLivenessTimeout: 90\n  HealthProbesReadinessTimeout: 60\n  HealthProbeLivenessFailureThreshold: 12\n  SlaveListenerPort: 50000\n  DisabledAgentProtocols:\n    - JNLP-connect\n    - JNLP2-connect\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  CLI: false\n  # Kubernetes service type for the JNLP slave service\n  # SETTING THIS TO \"LoadBalancer\" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341\n  SlaveListenerServiceType: ClusterIP\n  SlaveListenerServiceAnnotations: {}\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  # Optionally assign a known public LB IP\n  # LoadBalancerIP: 1.2.3.4\n  # Optionally configure a JMX port\n  # requires additional JavaOpts, ie\n  # JavaOpts: \u003e\n  #   -Dcom.sun.management.jmxremote.port=4000\n  #   -Dcom.sun.management.jmxremote.authenticate=false\n  #   -Dcom.sun.management.jmxremote.ssl=false\n  # JMXPort: 4000\n  # Optionally configure other ports to expose in the Master container\n  ExtraPorts:\n  # - name: BuildInfoProxy\n  #   port: 9000\n  # List of plugins to be install during Jenkins master start\n  InstallPlugins:\n    - kubernetes:1.12.4\n    - workflow-job:2.24\n    - workflow-aggregator:2.5\n    - credentials-binding:1.16\n    - git:3.9.1\n  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval\n  # ScriptApproval:\n  #   - \"method groovy.json.JsonSlurperClassic parseText java.lang.String\"\n  #   - \"new groovy.json.JsonSlurperClassic\"\n  # List of groovy init scripts to be executed during Jenkins master start\n  InitScripts:\n  #  - |\n  #    print 'adding global pipeline libraries, register properties, bootstrap jobs...'\n  # Kubernetes secret that contains a 'credentials.xml' for Jenkins\n  # CredentialsXmlSecret: jenkins-credentials\n  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,\n  # useful to manage encryption keys used for credentials.xml for instance (such as\n  # master.key and hudson.util.Secret)\n  # SecretsFilesSecret: jenkins-secrets\n  # Jenkins XML job configs to provision\n  # Jobs: |-\n  #   test: |-\n  #     \u003c\u003cxml here\u003e\u003e\n  CustomConfigMap: false\n  # By default, the configMap is only used to set the initial config the first time\n  # that the chart is installed.  Setting `OverwriteConfig` to `true` will overwrite\n  # the jenkins config with the contents of the configMap every time the pod starts.\n  OverwriteConfig: false\n  # Node labels and tolerations for pod assignment\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n  NodeSelector: {}\n  Tolerations: {}\n  PodAnnotations: {}\n\n  Ingress:\n    ApiVersion: extensions/v1beta1\n    Annotations: {}\n    # kubernetes.io/ingress.class: nginx\n    # kubernetes.io/tls-acme: \"true\"\n\n    TLS:\n    # - secretName: jenkins.cluster.local\n    #   hosts:\n    #     - jenkins.cluster.local\n\nAgent:\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.10-1\n  CustomJenkinsLabels: []\n# ImagePullSecret: jenkins\n  Component: \"jenkins-slave\"\n  Privileged: false\n  resources:\n    requests:\n      cpu: \"200m\"\n      memory: \"256Mi\"\n    limits:\n      cpu: \"200m\"\n      memory: \"256Mi\"\n  # You may want to change this to true while testing a new image\n  AlwaysPullImage: false\n  # Controls how slave pods are retained after the Jenkins build completes\n  # Possible values: Always, Never, OnFailure\n  PodRetention: Never\n  # You can define the volumes that you want to mount for this container\n  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret\n  # Configure the attributes as they appear in the corresponding Java class for that type\n  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes\n  volumes:\n  # - type: Secret\n  #   secretName: mysecret\n  #   mountPath: /var/myapp/mysecret\n  NodeSelector: {}\n  # Key Value selectors. Ex:\n  # jenkins-agent: v1\n\nPersistence:\n  Enabled: true\n  ## A manually managed Persistent Volume and Claim\n  ## Requires Persistence.Enabled: true\n  ## If defined, PVC must be created manually before volume will be bound\n  # ExistingClaim:\n\n  ## jenkins data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # StorageClass: \"-\"\n\n  Annotations: {}\n  AccessMode: ReadWriteOnce\n  Size: 8Gi\n  volumes:\n  #  - name: nothing\n  #    emptyDir: {}\n  mounts:\n  #  - mountPath: /var/nothing\n  #    name: nothing\n  #    readOnly: true\n\nNetworkPolicy:\n  # Enable creation of NetworkPolicy resources.\n  Enabled: false\n  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'\n  # For Kubernetes v1.7, use 'networking.k8s.io/v1'\n  ApiVersion: extensions/v1beta1\n\n## Install Default RBAC roles and bindings\nrbac:\n  install: false\n  serviceAccountName: default\n  # Role reference\n  roleRef: cluster-admin\n  # Role kind (RoleBinding or ClusterRoleBinding)\n  roleBindingKind: ClusterRoleBinding\n",
    "kustomize": {
      "overlays": {
        "ship": {
          "excludedBases": [
            "/jenkins-test.yaml"
          ],
          "patches": {
            "/jenkins-master-deployment.yaml": "apiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    chart: jenkins-0.20.1\n    component: jenkins-jenkins-master\n    heritage: Tiller\n    release: jenkins\n    custom: label\n    key: value\n  name: jenkins\n"
          }
        }
      }
    },
    "upstream": "github.com/helm/charts/tree/78858a2fb07aebe082efb11b8991b60e7fdd5d60/stable/jenkins",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png",
      "name": "jenkins",
      "releaseNotes": "Added ExtraPorts to open in the master pod (#7759)\n\n* Added ExtraPorts to open in the master pod\n\nSigned-off-by: ecejjar \u003cjesus.javier.arauz@ericsson.com\u003e\n\n* [stable/jenkins] Bumped up chart version\n\nSigned-off-by: ecejjar \u003cjesus.javier.arauz@ericsson.com\u003e",
      "license": {
        "assignee": "",
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "0001-01-01T00:00:00Z",
        "id": "",
        "type": ""
      },
      "sequence": 0,
      "version": "0.20.1"
    },
    "upstreamContents": {
      "upstreamFiles": [
        {
          "filePath": ".helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "Chart.yaml",
          "fileContents": "bmFtZTogamVua2lucwpob21lOiBodHRwczovL2plbmtpbnMuaW8vCnZlcnNpb246IDAuMjAuMQphcHBWZXJzaW9uOiAyLjEyMS4zCmRlc2NyaXB0aW9uOiBPcGVuIHNvdXJjZSBjb250aW51b3VzIGludGVncmF0aW9uIHNlcnZlci4gSXQgc3VwcG9ydHMgbXVsdGlwbGUgU0NNIHRvb2xzCiAgaW5jbHVkaW5nIENWUywgU3VidmVyc2lvbiBhbmQgR2l0LiBJdCBjYW4gZXhlY3V0ZSBBcGFjaGUgQW50IGFuZCBBcGFjaGUgTWF2ZW4tYmFzZWQKICBwcm9qZWN0cyBhcyB3ZWxsIGFzIGFyYml0cmFyeSBzY3JpcHRzLgpzb3VyY2VzOgotIGh0dHBzOi8vZ2l0aHViLmNvbS9qZW5raW5zY2kvamVua2lucwotIGh0dHBzOi8vZ2l0aHViLmNvbS9qZW5raW5zY2kvZG9ja2VyLWpubHAtc2xhdmUKbWFpbnRhaW5lcnM6Ci0gbmFtZTogbGFjaGllODMKICBlbWFpbDogbGFjaGxhbi5ldmVuc29uQG1pY3Jvc29mdC5jb20KLSBuYW1lOiB2aWdsZXNpYXNjZQogIGVtYWlsOiB2aWdsZXNpYXNAZ29vZ2xlLmNvbQppY29uOiBodHRwczovL3dpa2kuamVua2lucy1jaS5vcmcvZG93bmxvYWQvYXR0YWNobWVudHMvMjkxNjM5My9sb2dvLnBuZwo="
        },
        {
          "filePath": "OWNERS",
          "fileContents": "YXBwcm92ZXJzOgotIGxhY2hpZTgzCi0gdmlnbGVzaWFzY2UKcmV2aWV3ZXJzOgotIGxhY2hpZTgzCi0gdmlnbGVzaWFzY2UK"
        },
        {
          "filePath": "README.md",
          "fileContents": ""
        },
        {
          "filePath": "templates/NOTES.txt",
          "fileContents": "MS4gR2V0IHlvdXIgJ3t7IC5WYWx1ZXMuTWFzdGVyLkFkbWluVXNlciB9fScgdXNlciBwYXNzd29yZCBieSBydW5uaW5nOgogIHByaW50ZiAkKGt1YmVjdGwgZ2V0IHNlY3JldCAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0ge3sgdGVtcGxhdGUgImplbmtpbnMuZnVsbG5hbWUiIC4gfX0gLW8ganNvbnBhdGg9InsuZGF0YS5qZW5raW5zLWFkbWluLXBhc3N3b3JkfSIgfCBiYXNlNjQgLS1kZWNvZGUpO2VjaG8KCnt7LSBpZiAuVmFsdWVzLk1hc3Rlci5Ib3N0TmFtZSB9fQoKMi4gVmlzaXQgaHR0cDovL3t7IC5WYWx1ZXMuTWFzdGVyLkhvc3ROYW1lIH19Cnt7LSBlbHNlIH19CjIuIEdldCB0aGUgSmVua2lucyBVUkwgdG8gdmlzaXQgYnkgcnVubmluZyB0aGVzZSBjb21tYW5kcyBpbiB0aGUgc2FtZSBzaGVsbDoKe3stIGlmIGNvbnRhaW5zICJOb2RlUG9ydCIgLlZhbHVlcy5NYXN0ZXIuU2VydmljZVR5cGUgfX0KICBleHBvcnQgTk9ERV9QT1JUPSQoa3ViZWN0bCBnZXQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7LnNwZWMucG9ydHNbMF0ubm9kZVBvcnR9IiBzZXJ2aWNlcyB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fSkKICBleHBvcnQgTk9ERV9JUD0kKGt1YmVjdGwgZ2V0IG5vZGVzIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSAtbyBqc29ucGF0aD0iey5pdGVtc1swXS5zdGF0dXMuYWRkcmVzc2VzWzBdLmFkZHJlc3N9IikKICBlY2hvIGh0dHA6Ly8kTk9ERV9JUDokTk9ERV9QT1JUL2xvZ2luCgp7ey0gZWxzZSBpZiBjb250YWlucyAiTG9hZEJhbGFuY2VyIiAuVmFsdWVzLk1hc3Rlci5TZXJ2aWNlVHlwZSB9fQogIE5PVEU6IEl0IG1heSB0YWtlIGEgZmV3IG1pbnV0ZXMgZm9yIHRoZSBMb2FkQmFsYW5jZXIgSVAgdG8gYmUgYXZhaWxhYmxlLgogICAgICAgIFlvdSBjYW4gd2F0Y2ggdGhlIHN0YXR1cyBvZiBieSBydW5uaW5nICdrdWJlY3RsIGdldCBzdmMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC13IHt7IHRlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19JwogIGV4cG9ydCBTRVJWSUNFX0lQPSQoa3ViZWN0bCBnZXQgc3ZjIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fSAtLXRlbXBsYXRlICJ7eyAie3sgcmFuZ2UgKGluZGV4IC5zdGF0dXMubG9hZEJhbGFuY2VyLmluZ3Jlc3MgMCkgfX17eyAuIH19e3sgZW5kIH19IiB9fSIpCiAgZWNobyBodHRwOi8vJFNFUlZJQ0VfSVA6e3sgLlZhbHVlcy5NYXN0ZXIuU2VydmljZVBvcnQgfX0vbG9naW4KCnt7LSBlbHNlIGlmIGNvbnRhaW5zICJDbHVzdGVySVAiICAuVmFsdWVzLk1hc3Rlci5TZXJ2aWNlVHlwZSB9fQogIGV4cG9ydCBQT0RfTkFNRT0kKGt1YmVjdGwgZ2V0IHBvZHMgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1sICJjb21wb25lbnQ9e3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLk1hc3Rlci5Db21wb25lbnQgfX0iIC1vIGpzb25wYXRoPSJ7Lml0ZW1zWzBdLm1ldGFkYXRhLm5hbWV9IikKICBlY2hvIGh0dHA6Ly8xMjcuMC4wLjE6e3sgLlZhbHVlcy5NYXN0ZXIuU2VydmljZVBvcnQgfX0KICBrdWJlY3RsIHBvcnQtZm9yd2FyZCAkUE9EX05BTUUge3sgLlZhbHVlcy5NYXN0ZXIuU2VydmljZVBvcnQgfX06e3sgLlZhbHVlcy5NYXN0ZXIuU2VydmljZVBvcnQgfX0KCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQoKMy4gTG9naW4gd2l0aCB0aGUgcGFzc3dvcmQgZnJvbSBzdGVwIDEgYW5kIHRoZSB1c2VybmFtZToge3sgLlZhbHVlcy5NYXN0ZXIuQWRtaW5Vc2VyIH19CgpGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBydW5uaW5nIEplbmtpbnMgb24gS3ViZXJuZXRlcywgdmlzaXQ6Cmh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zb2x1dGlvbnMvamVua2lucy1vbi1jb250YWluZXItZW5naW5lCgp7ey0gaWYgLlZhbHVlcy5QZXJzaXN0ZW5jZS5FbmFibGVkIH19Cnt7LSBlbHNlIH19CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMgICBXQVJOSU5HOiBQZXJzaXN0ZW5jZSBpcyBkaXNhYmxlZCEhISBZb3Ugd2lsbCBsb3NlIHlvdXIgZGF0YSB3aGVuICAgIyMjIyMKIyMjIyMjICAgICAgICAgICAgdGhlIEplbmtpbnMgcG9kIGlzIHRlcm1pbmF0ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7ey0gZW5kIH19Cgp7ey0gaWYgLlZhbHVlcy5yYmFjLmluc3RhbGwgfX0KQ29uZmlndXJlIHRoZSBLdWJlcm5ldGVzIHBsdWdpbiBpbiBKZW5raW5zIHRvIHVzZSB0aGUgZm9sbG93aW5nIFNlcnZpY2UgQWNjb3VudCBuYW1lIHt7IHRlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19IHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6CiAgQ3JlYXRlIGEgSmVua2lucyBjcmVkZW50aWFsIG9mIHR5cGUgS3ViZXJuZXRlcyBzZXJ2aWNlIGFjY291bnQgd2l0aCBzZXJ2aWNlIGFjY291bnQgbmFtZSB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fQogIFVuZGVyIGNvbmZpZ3VyZSBKZW5raW5zIC0tIFVwZGF0ZSB0aGUgY3JlZGVudGlhbHMgY29uZmlnIGluIHRoZSBjbG91ZCBzZWN0aW9uIHRvIHVzZSB0aGUgc2VydmljZSBhY2NvdW50IGNyZWRlbnRpYWwgeW91IGNyZWF0ZWQgaW4gdGhlIHN0ZXAgYWJvdmUuCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiamVua2lucy5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJqZW5raW5zLmZ1bGxuYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIGlmIGNvbnRhaW5zICRuYW1lIC5SZWxlYXNlLk5hbWUgLX19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LSBkZWZpbmUgImplbmtpbnMua3ViZXJuZXRlcy12ZXJzaW9uIiAtfX0KICB7ey0gcmFuZ2UgLlZhbHVlcy5NYXN0ZXIuSW5zdGFsbFBsdWdpbnMgLX19CiAgICB7eyBpZiBoYXNQcmVmaXggImt1YmVybmV0ZXM6IiAuIH19CiAgICAgIHt7LSAkc3BsaXQgOj0gc3BsaXRMaXN0ICI6IiAuIH19CiAgICAgIHt7LSBwcmludGYgIiVzIiAoaW5kZXggJHNwbGl0IDEgKSAtfX0KICAgIHt7LSBlbmQgLX19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "templates/config.yaml",
          "fileContents": ""
        },
        {
          "filePath": "templates/home-pvc.yaml",
          "fileContents": "e3stIGlmIGFuZCAuVmFsdWVzLlBlcnNpc3RlbmNlLkVuYWJsZWQgKG5vdCAuVmFsdWVzLlBlcnNpc3RlbmNlLkV4aXN0aW5nQ2xhaW0pIC19fQpraW5kOiBQZXJzaXN0ZW50Vm9sdW1lQ2xhaW0KYXBpVmVyc2lvbjogdjEKbWV0YWRhdGE6Cnt7LSBpZiAuVmFsdWVzLlBlcnNpc3RlbmNlLkFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLlBlcnNpc3RlbmNlLkFubm90YXRpb25zIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fQogICAgY2hhcnQ6ICJ7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fSIKICAgIHJlbGVhc2U6ICJ7eyAuUmVsZWFzZS5OYW1lIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19IgpzcGVjOgogIGFjY2Vzc01vZGVzOgogICAgLSB7eyAuVmFsdWVzLlBlcnNpc3RlbmNlLkFjY2Vzc01vZGUgfCBxdW90ZSB9fQogIHJlc291cmNlczoKICAgIHJlcXVlc3RzOgogICAgICBzdG9yYWdlOiB7eyAuVmFsdWVzLlBlcnNpc3RlbmNlLlNpemUgfCBxdW90ZSB9fQp7ey0gaWYgLlZhbHVlcy5QZXJzaXN0ZW5jZS5TdG9yYWdlQ2xhc3MgfX0Ke3stIGlmIChlcSAiLSIgLlZhbHVlcy5QZXJzaXN0ZW5jZS5TdG9yYWdlQ2xhc3MpIH19CiAgc3RvcmFnZUNsYXNzTmFtZTogIiIKe3stIGVsc2UgfX0KICBzdG9yYWdlQ2xhc3NOYW1lOiAie3sgLlZhbHVlcy5QZXJzaXN0ZW5jZS5TdG9yYWdlQ2xhc3MgfX0iCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "templates/jenkins-agent-svc.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fS1hZ2VudAogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImplbmtpbnMuZnVsbG5hbWUiIC4gfX0KICAgIGNoYXJ0OiAie3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0iCiAgICBjb21wb25lbnQ6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMuTWFzdGVyLkNvbXBvbmVudCB9fSIKe3stIGlmIC5WYWx1ZXMuTWFzdGVyLlNsYXZlTGlzdGVuZXJTZXJ2aWNlQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuTWFzdGVyLlNsYXZlTGlzdGVuZXJTZXJ2aWNlQW5ub3RhdGlvbnMgfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19CnNwZWM6CiAgcG9ydHM6CiAgICAtIHBvcnQ6IHt7IC5WYWx1ZXMuTWFzdGVyLlNsYXZlTGlzdGVuZXJQb3J0IH19CiAgICAgIHRhcmdldFBvcnQ6IHt7IC5WYWx1ZXMuTWFzdGVyLlNsYXZlTGlzdGVuZXJQb3J0IH19CiAgICAgIHt7IGlmIChhbmQgKGVxIC5WYWx1ZXMuTWFzdGVyLlNsYXZlTGlzdGVuZXJTZXJ2aWNlVHlwZSAiTm9kZVBvcnQiKSAobm90IChlbXB0eSAuVmFsdWVzLk1hc3Rlci5TbGF2ZUxpc3RlbmVyUG9ydCkpKSB9fQogICAgICBub2RlUG9ydDoge3suVmFsdWVzLk1hc3Rlci5TbGF2ZUxpc3RlbmVyUG9ydH19CiAgICAgIHt7ZW5kfX0KICAgICAgbmFtZTogc2xhdmVsaXN0ZW5lcgogIHNlbGVjdG9yOgogICAgY29tcG9uZW50OiAie3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLk1hc3Rlci5Db21wb25lbnQgfX0iCiAgdHlwZToge3sgLlZhbHVlcy5NYXN0ZXIuU2xhdmVMaXN0ZW5lclNlcnZpY2VUeXBlIH19Cg=="
        },
        {
          "filePath": "templates/jenkins-master-deployment.yaml",
          "fileContents": ""
        },
        {
          "filePath": "templates/jenkins-master-ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuTWFzdGVyLkhvc3ROYW1lIH19CmFwaVZlcnNpb246IHt7IC5WYWx1ZXMuTWFzdGVyLkluZ3Jlc3MuQXBpVmVyc2lvbiB9fQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgp7ey0gaWYgLlZhbHVlcy5NYXN0ZXIuSW5ncmVzcy5Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5NYXN0ZXIuSW5ncmVzcy5Bbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fQpzcGVjOgogIHJ1bGVzOgogIC0gaG9zdDoge3sgLlZhbHVlcy5NYXN0ZXIuSG9zdE5hbWUgfCBxdW90ZSB9fQogICAgaHR0cDoKICAgICAgcGF0aHM6CiAgICAgIC0gYmFja2VuZDoKICAgICAgICAgIHNlcnZpY2VOYW1lOiB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fQogICAgICAgICAgc2VydmljZVBvcnQ6IHt7IC5WYWx1ZXMuTWFzdGVyLlNlcnZpY2VQb3J0IH19Cnt7LSBpZiAuVmFsdWVzLk1hc3Rlci5JbmdyZXNzLlRMUyB9fQogIHRsczoKe3sgdG9ZYW1sIC5WYWx1ZXMuTWFzdGVyLkluZ3Jlc3MuVExTIHwgaW5kZW50IDQgfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "templates/jenkins-master-networkpolicy.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuTmV0d29ya1BvbGljeS5FbmFibGVkIH19CmtpbmQ6IE5ldHdvcmtQb2xpY3kKYXBpVmVyc2lvbjoge3sgLlZhbHVlcy5OZXR3b3JrUG9saWN5LkFwaVZlcnNpb24gfX0KbWV0YWRhdGE6CiAgbmFtZTogInt7IC5SZWxlYXNlLk5hbWUgfX0te3sgLlZhbHVlcy5NYXN0ZXIuQ29tcG9uZW50IH19IgpzcGVjOgogIHBvZFNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGNvbXBvbmVudDogInt7IC5SZWxlYXNlLk5hbWUgfX0te3sgLlZhbHVlcy5NYXN0ZXIuQ29tcG9uZW50IH19IgogIGluZ3Jlc3M6CiAgICAjIEFsbG93IHdlYiBhY2Nlc3MgdG8gdGhlIFVJCiAgICAtIHBvcnRzOgogICAgICAtIHBvcnQ6IDgwODAKICAgICMgQWxsb3cgaW5ib3VuZCBjb25uZWN0aW9ucyBmcm9tIHNsYXZlCiAgICAtIGZyb206CiAgICAgIC0gcG9kU2VsZWN0b3I6CiAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgImplbmtpbnMve3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLkFnZW50LkNvbXBvbmVudCB9fSI6ICJ0cnVlIgogICAgICBwb3J0czoKICAgICAgLSBwb3J0OiB7eyAuVmFsdWVzLk1hc3Rlci5TbGF2ZUxpc3RlbmVyUG9ydCB9fQp7ey0gaWYgLlZhbHVlcy5BZ2VudC5FbmFibGVkIH19Ci0tLQpraW5kOiBOZXR3b3JrUG9saWN5CmFwaVZlcnNpb246IHt7IC5WYWx1ZXMuTmV0d29ya1BvbGljeS5BcGlWZXJzaW9uIH19Cm1ldGFkYXRhOgogIG5hbWU6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMuQWdlbnQuQ29tcG9uZW50IH19IgpzcGVjOgogIHBvZFNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgICMgRGVmYXVsdERlbnkKICAgICAgImplbmtpbnMve3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLkFnZW50LkNvbXBvbmVudCB9fSI6ICJ0cnVlIgp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "templates/jenkins-master-svc.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7e3RlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fQogICAgaGVyaXRhZ2U6IHt7LlJlbGVhc2UuU2VydmljZSB8IHF1b3RlIH19CiAgICByZWxlYXNlOiB7ey5SZWxlYXNlLk5hbWUgfCBxdW90ZSB9fQogICAgY2hhcnQ6ICJ7ey5DaGFydC5OYW1lfX0te3suQ2hhcnQuVmVyc2lvbn19IgogICAgY29tcG9uZW50OiAie3suUmVsZWFzZS5OYW1lfX0te3suVmFsdWVzLk1hc3Rlci5Db21wb25lbnR9fSIKe3stIGlmIC5WYWx1ZXMuTWFzdGVyLlNlcnZpY2VBbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5NYXN0ZXIuU2VydmljZUFubm90YXRpb25zIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQpzcGVjOgogIHBvcnRzOgogICAgLSBwb3J0OiB7ey5WYWx1ZXMuTWFzdGVyLlNlcnZpY2VQb3J0fX0KICAgICAgbmFtZTogaHR0cAogICAgICB0YXJnZXRQb3J0OiA4MDgwCiAgICAgIHt7aWYgKGFuZCAoZXEgLlZhbHVlcy5NYXN0ZXIuU2VydmljZVR5cGUgIk5vZGVQb3J0IikgKG5vdCAoZW1wdHkgLlZhbHVlcy5NYXN0ZXIuTm9kZVBvcnQpKSl9fQogICAgICBub2RlUG9ydDoge3suVmFsdWVzLk1hc3Rlci5Ob2RlUG9ydH19CiAgICAgIHt7ZW5kfX0KICBzZWxlY3RvcjoKICAgIGNvbXBvbmVudDogInt7LlJlbGVhc2UuTmFtZX19LXt7LlZhbHVlcy5NYXN0ZXIuQ29tcG9uZW50fX0iCiAgdHlwZToge3suVmFsdWVzLk1hc3Rlci5TZXJ2aWNlVHlwZX19CiAge3tpZiBlcSAuVmFsdWVzLk1hc3Rlci5TZXJ2aWNlVHlwZSAiTG9hZEJhbGFuY2VyIn19Cnt7LSBpZiAuVmFsdWVzLk1hc3Rlci5Mb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXMgfX0KICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6Cnt7IHRvWWFtbCAuVmFsdWVzLk1hc3Rlci5Mb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXMgfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19CiAge3tpZiAuVmFsdWVzLk1hc3Rlci5Mb2FkQmFsYW5jZXJJUH19CiAgbG9hZEJhbGFuY2VySVA6IHt7LlZhbHVlcy5NYXN0ZXIuTG9hZEJhbGFuY2VySVB9fQogIHt7ZW5kfX0KICB7e2VuZH19Cg=="
        },
        {
          "filePath": "templates/jenkins-test.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWU6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXVpLXRlc3Qte3sgcmFuZEFscGhhTnVtIDUgfCBsb3dlciB9fSIKICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiB0ZXN0LXN1Y2Nlc3MKc3BlYzoKICB7ey0gaWYgLlZhbHVlcy5NYXN0ZXIuTm9kZVNlbGVjdG9yIH19CiAgbm9kZVNlbGVjdG9yOgp7eyB0b1lhbWwgLlZhbHVlcy5NYXN0ZXIuTm9kZVNlbGVjdG9yIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuTWFzdGVyLlRvbGVyYXRpb25zIH19CiAgdG9sZXJhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLk1hc3Rlci5Ub2xlcmF0aW9ucyB8IGluZGVudCA0IH19CiAge3stIGVuZCB9fQogIGluaXRDb250YWluZXJzOgogICAgLSBuYW1lOiAidGVzdC1mcmFtZXdvcmsiCiAgICAgIGltYWdlOiAiZGR1cG9ydGFsL2JhdHM6MC40LjAiCiAgICAgIGNvbW1hbmQ6CiAgICAgIC0gImJhc2giCiAgICAgIC0gIi1jIgogICAgICAtIHwKICAgICAgICBzZXQgLWV4CiAgICAgICAgIyBjb3B5IGJhdHMgdG8gdG9vbHMgZGlyCiAgICAgICAgY3AgLVIgL3Vzci9sb2NhbC9saWJleGVjLyAvdG9vbHMvYmF0cy8KICAgICAgdm9sdW1lTW91bnRzOgogICAgICAtIG1vdW50UGF0aDogL3Rvb2xzCiAgICAgICAgbmFtZTogdG9vbHMKICBjb250YWluZXJzOgogICAgLSBuYW1lOiB7eyAuUmVsZWFzZS5OYW1lIH19LXVpLXRlc3QKICAgICAgaW1hZ2U6IHt7IC5WYWx1ZXMuTWFzdGVyLkltYWdlIH19Ont7IC5WYWx1ZXMuTWFzdGVyLkltYWdlVGFnIH19CiAgICAgIGNvbW1hbmQ6IFsiL3Rvb2xzL2JhdHMvYmF0cyIsICItdCIsICIvdGVzdHMvcnVuLnNoIl0KICAgICAgdm9sdW1lTW91bnRzOgogICAgICAtIG1vdW50UGF0aDogL3Rlc3RzCiAgICAgICAgbmFtZTogdGVzdHMKICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAtIG1vdW50UGF0aDogL3Rvb2xzCiAgICAgICAgbmFtZTogdG9vbHMKICB2b2x1bWVzOgogIC0gbmFtZTogdGVzdHMKICAgIGNvbmZpZ01hcDoKICAgICAgbmFtZToge3sgdGVtcGxhdGUgImplbmtpbnMuZnVsbG5hbWUiIC4gfX0tdGVzdHMKICAtIG5hbWU6IHRvb2xzCiAgICBlbXB0eURpcjoge30KICByZXN0YXJ0UG9saWN5OiBOZXZlcgo="
        },
        {
          "filePath": "templates/jobs.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuTWFzdGVyLkpvYnMgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19LWpvYnMKZGF0YToKe3sgLlZhbHVlcy5NYXN0ZXIuSm9icyB8IGluZGVudCAyIH19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "templates/rbac.yaml",
          "fileContents": "e3sgaWYgLlZhbHVlcy5yYmFjLmluc3RhbGwgfX0Ke3stICRzZXJ2aWNlTmFtZSA6PSBpbmNsdWRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIC19fQp7ey0gaWYgLkNhcGFiaWxpdGllcy5BUElWZXJzaW9ucy5IYXMgInJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEiIH19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKe3stIGVsc2UgaWYgLkNhcGFiaWxpdGllcy5BUElWZXJzaW9ucy5IYXMgInJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMSIgfX0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCnt7LSBlbmQgfX0Ka2luZDoge3sgLlZhbHVlcy5yYmFjLnJvbGVCaW5kaW5nS2luZCB9fQptZXRhZGF0YToKICBuYW1lOiB7eyAkc2VydmljZU5hbWUgfX0tcm9sZS1iaW5kaW5nCiAgbGFiZWxzOgogICAgYXBwOiB7eyAkc2VydmljZU5hbWUgfX0KICAgIGNoYXJ0OiAie3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0iCiAgICByZWxlYXNlOiAie3sgLlJlbGVhc2UuTmFtZSB9fSIKICAgIGhlcml0YWdlOiAie3sgLlJlbGVhc2UuU2VydmljZSB9fSIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZToge3sgLlZhbHVlcy5yYmFjLnJvbGVSZWYgfX0Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiB7eyAkc2VydmljZU5hbWUgfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQp7eyBlbmQgfX0K"
        },
        {
          "filePath": "templates/secret.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuTWFzdGVyLlVzZVNlY3VyaXR5IH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiamVua2lucy5mdWxsbmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImplbmtpbnMuZnVsbG5hbWUiIC4gfX0KICAgIGNoYXJ0OiAie3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0iCiAgICByZWxlYXNlOiAie3sgLlJlbGVhc2UuTmFtZSB9fSIKICAgIGhlcml0YWdlOiAie3sgLlJlbGVhc2UuU2VydmljZSB9fSIKdHlwZTogT3BhcXVlCmRhdGE6CiAge3sgaWYgLlZhbHVlcy5NYXN0ZXIuQWRtaW5QYXNzd29yZCB9fQogIGplbmtpbnMtYWRtaW4tcGFzc3dvcmQ6IHt7IC5WYWx1ZXMuTWFzdGVyLkFkbWluUGFzc3dvcmQgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7IGVsc2UgfX0KICBqZW5raW5zLWFkbWluLXBhc3N3b3JkOiB7eyByYW5kQWxwaGFOdW0gMTAgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHt7IGVuZCB9fQogIGplbmtpbnMtYWRtaW4tdXNlcjoge3sgLlZhbHVlcy5NYXN0ZXIuQWRtaW5Vc2VyIHwgYjY0ZW5jIHwgcXVvdGUgfX0Ke3stIGVuZCB9fQ=="
        },
        {
          "filePath": "templates/service-account.yaml",
          "fileContents": "e3sgaWYgLlZhbHVlcy5yYmFjLmluc3RhbGwgfX0Ke3stICRzZXJ2aWNlTmFtZSA6PSBpbmNsdWRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIC19fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiB7eyAkc2VydmljZU5hbWUgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7ICRzZXJ2aWNlTmFtZSB9fQogICAgY2hhcnQ6ICJ7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fSIKICAgIHJlbGVhc2U6ICJ7eyAuUmVsZWFzZS5OYW1lIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19Igp7eyBlbmQgfX0="
        },
        {
          "filePath": "templates/test-config.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19LXRlc3RzCmRhdGE6CiAgcnVuLnNoOiB8LQogICAgQHRlc3QgIlRlc3RpbmcgSmVua2lucyBVSSBpcyBhY2Nlc3NpYmxlIiB7CiAgICAgIGN1cmwgLS1yZXRyeSA0OCAtLXJldHJ5LWRlbGF5IDEwIHt7IHRlbXBsYXRlICJqZW5raW5zLmZ1bGxuYW1lIiAuIH19Ont7IC5WYWx1ZXMuTWFzdGVyLlNlcnZpY2VQb3J0IH19e3sgZGVmYXVsdCAiIiAuVmFsdWVzLk1hc3Rlci5KZW5raW5zVXJpUHJlZml4IH19L2xvZ2luCiAgICB9Cg=="
        },
        {
          "filePath": "values.yaml",
          "fileContents": ""
        }
      ]
    },
    "contentSHA": "f19d8cd21704fb28480ac2f4b590522cf1686ae3b2bc2c6e7eb71da9b169947a"
  }
}
